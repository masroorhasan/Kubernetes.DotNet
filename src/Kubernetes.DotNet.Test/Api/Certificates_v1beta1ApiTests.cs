/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Kubernetes.DotNet.Client;
using Kubernetes.DotNet.Api;
using Kubernetes.DotNet.Model;

namespace Kubernetes.DotNet.Test
{
    /// <summary>
    ///  Class for testing Certificates_v1beta1Api
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class Certificates_v1beta1ApiTests
    {
        private Certificates_v1beta1Api instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new Certificates_v1beta1Api();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of Certificates_v1beta1Api
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' Certificates_v1beta1Api
            //Assert.IsInstanceOfType(typeof(Certificates_v1beta1Api), instance, "instance is a Certificates_v1beta1Api");
        }

        
        /// <summary>
        /// Test CreateCertificateSigningRequest
        /// </summary>
        [Test]
        public void CreateCertificateSigningRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //V1beta1CertificateSigningRequest body = null;
            //string pretty = null;
            //var response = instance.CreateCertificateSigningRequest(body, pretty);
            //Assert.IsInstanceOf<V1beta1CertificateSigningRequest> (response, "response is V1beta1CertificateSigningRequest");
        }
        
        /// <summary>
        /// Test DeleteCertificateSigningRequest
        /// </summary>
        [Test]
        public void DeleteCertificateSigningRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //V1DeleteOptions body = null;
            //string pretty = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //var response = instance.DeleteCertificateSigningRequest(name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteCollectionCertificateSigningRequest
        /// </summary>
        [Test]
        public void DeleteCollectionCertificateSigningRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.DeleteCollectionCertificateSigningRequest(pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test GetAPIResources
        /// </summary>
        [Test]
        public void GetAPIResourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAPIResources();
            //Assert.IsInstanceOf<V1APIResourceList> (response, "response is V1APIResourceList");
        }
        
        /// <summary>
        /// Test ListCertificateSigningRequest
        /// </summary>
        [Test]
        public void ListCertificateSigningRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListCertificateSigningRequest(pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1beta1CertificateSigningRequestList> (response, "response is V1beta1CertificateSigningRequestList");
        }
        
        /// <summary>
        /// Test PatchCertificateSigningRequest
        /// </summary>
        [Test]
        public void PatchCertificateSigningRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchCertificateSigningRequest(name, body, pretty);
            //Assert.IsInstanceOf<V1beta1CertificateSigningRequest> (response, "response is V1beta1CertificateSigningRequest");
        }
        
        /// <summary>
        /// Test ReadCertificateSigningRequest
        /// </summary>
        [Test]
        public void ReadCertificateSigningRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string pretty = null;
            //bool? exact = null;
            //bool? export = null;
            //var response = instance.ReadCertificateSigningRequest(name, pretty, exact, export);
            //Assert.IsInstanceOf<V1beta1CertificateSigningRequest> (response, "response is V1beta1CertificateSigningRequest");
        }
        
        /// <summary>
        /// Test ReplaceCertificateSigningRequest
        /// </summary>
        [Test]
        public void ReplaceCertificateSigningRequestTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //V1beta1CertificateSigningRequest body = null;
            //string pretty = null;
            //var response = instance.ReplaceCertificateSigningRequest(name, body, pretty);
            //Assert.IsInstanceOf<V1beta1CertificateSigningRequest> (response, "response is V1beta1CertificateSigningRequest");
        }
        
        /// <summary>
        /// Test ReplaceCertificateSigningRequestApproval
        /// </summary>
        [Test]
        public void ReplaceCertificateSigningRequestApprovalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //V1beta1CertificateSigningRequest body = null;
            //string pretty = null;
            //var response = instance.ReplaceCertificateSigningRequestApproval(name, body, pretty);
            //Assert.IsInstanceOf<V1beta1CertificateSigningRequest> (response, "response is V1beta1CertificateSigningRequest");
        }
        
        /// <summary>
        /// Test ReplaceCertificateSigningRequestStatus
        /// </summary>
        [Test]
        public void ReplaceCertificateSigningRequestStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //V1beta1CertificateSigningRequest body = null;
            //string pretty = null;
            //var response = instance.ReplaceCertificateSigningRequestStatus(name, body, pretty);
            //Assert.IsInstanceOf<V1beta1CertificateSigningRequest> (response, "response is V1beta1CertificateSigningRequest");
        }
        
    }

}
