/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Kubernetes.DotNet.Client;
using Kubernetes.DotNet.Api;
using Kubernetes.DotNet.Model;

namespace Kubernetes.DotNet.Test
{
    /// <summary>
    ///  Class for testing Extensions_v1beta1Api
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class Extensions_v1beta1ApiTests
    {
        private Extensions_v1beta1Api instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new Extensions_v1beta1Api();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of Extensions_v1beta1Api
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' Extensions_v1beta1Api
            //Assert.IsInstanceOfType(typeof(Extensions_v1beta1Api), instance, "instance is a Extensions_v1beta1Api");
        }

        
        /// <summary>
        /// Test CreateNamespacedDaemonSet
        /// </summary>
        [Test]
        public void CreateNamespacedDaemonSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //V1beta1DaemonSet body = null;
            //string pretty = null;
            //var response = instance.CreateNamespacedDaemonSet(_namespace, body, pretty);
            //Assert.IsInstanceOf<V1beta1DaemonSet> (response, "response is V1beta1DaemonSet");
        }
        
        /// <summary>
        /// Test CreateNamespacedDeployment
        /// </summary>
        [Test]
        public void CreateNamespacedDeploymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //ExtensionsV1beta1Deployment body = null;
            //string pretty = null;
            //var response = instance.CreateNamespacedDeployment(_namespace, body, pretty);
            //Assert.IsInstanceOf<ExtensionsV1beta1Deployment> (response, "response is ExtensionsV1beta1Deployment");
        }
        
        /// <summary>
        /// Test CreateNamespacedDeploymentRollback
        /// </summary>
        [Test]
        public void CreateNamespacedDeploymentRollbackTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //ExtensionsV1beta1DeploymentRollback body = null;
            //string pretty = null;
            //var response = instance.CreateNamespacedDeploymentRollback(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<ExtensionsV1beta1DeploymentRollback> (response, "response is ExtensionsV1beta1DeploymentRollback");
        }
        
        /// <summary>
        /// Test CreateNamespacedIngress
        /// </summary>
        [Test]
        public void CreateNamespacedIngressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //V1beta1Ingress body = null;
            //string pretty = null;
            //var response = instance.CreateNamespacedIngress(_namespace, body, pretty);
            //Assert.IsInstanceOf<V1beta1Ingress> (response, "response is V1beta1Ingress");
        }
        
        /// <summary>
        /// Test CreateNamespacedNetworkPolicy
        /// </summary>
        [Test]
        public void CreateNamespacedNetworkPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //V1beta1NetworkPolicy body = null;
            //string pretty = null;
            //var response = instance.CreateNamespacedNetworkPolicy(_namespace, body, pretty);
            //Assert.IsInstanceOf<V1beta1NetworkPolicy> (response, "response is V1beta1NetworkPolicy");
        }
        
        /// <summary>
        /// Test CreateNamespacedReplicaSet
        /// </summary>
        [Test]
        public void CreateNamespacedReplicaSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //V1beta1ReplicaSet body = null;
            //string pretty = null;
            //var response = instance.CreateNamespacedReplicaSet(_namespace, body, pretty);
            //Assert.IsInstanceOf<V1beta1ReplicaSet> (response, "response is V1beta1ReplicaSet");
        }
        
        /// <summary>
        /// Test CreatePodSecurityPolicy
        /// </summary>
        [Test]
        public void CreatePodSecurityPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //V1beta1PodSecurityPolicy body = null;
            //string pretty = null;
            //var response = instance.CreatePodSecurityPolicy(body, pretty);
            //Assert.IsInstanceOf<V1beta1PodSecurityPolicy> (response, "response is V1beta1PodSecurityPolicy");
        }
        
        /// <summary>
        /// Test CreateThirdPartyResource
        /// </summary>
        [Test]
        public void CreateThirdPartyResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //V1beta1ThirdPartyResource body = null;
            //string pretty = null;
            //var response = instance.CreateThirdPartyResource(body, pretty);
            //Assert.IsInstanceOf<V1beta1ThirdPartyResource> (response, "response is V1beta1ThirdPartyResource");
        }
        
        /// <summary>
        /// Test DeleteCollectionNamespacedDaemonSet
        /// </summary>
        [Test]
        public void DeleteCollectionNamespacedDaemonSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.DeleteCollectionNamespacedDaemonSet(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteCollectionNamespacedDeployment
        /// </summary>
        [Test]
        public void DeleteCollectionNamespacedDeploymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.DeleteCollectionNamespacedDeployment(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteCollectionNamespacedIngress
        /// </summary>
        [Test]
        public void DeleteCollectionNamespacedIngressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.DeleteCollectionNamespacedIngress(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteCollectionNamespacedNetworkPolicy
        /// </summary>
        [Test]
        public void DeleteCollectionNamespacedNetworkPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.DeleteCollectionNamespacedNetworkPolicy(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteCollectionNamespacedReplicaSet
        /// </summary>
        [Test]
        public void DeleteCollectionNamespacedReplicaSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.DeleteCollectionNamespacedReplicaSet(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteCollectionPodSecurityPolicy
        /// </summary>
        [Test]
        public void DeleteCollectionPodSecurityPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.DeleteCollectionPodSecurityPolicy(pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteCollectionThirdPartyResource
        /// </summary>
        [Test]
        public void DeleteCollectionThirdPartyResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.DeleteCollectionThirdPartyResource(pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteNamespacedDaemonSet
        /// </summary>
        [Test]
        public void DeleteNamespacedDaemonSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1DeleteOptions body = null;
            //string pretty = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //var response = instance.DeleteNamespacedDaemonSet(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteNamespacedDeployment
        /// </summary>
        [Test]
        public void DeleteNamespacedDeploymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1DeleteOptions body = null;
            //string pretty = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //var response = instance.DeleteNamespacedDeployment(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteNamespacedIngress
        /// </summary>
        [Test]
        public void DeleteNamespacedIngressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1DeleteOptions body = null;
            //string pretty = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //var response = instance.DeleteNamespacedIngress(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteNamespacedNetworkPolicy
        /// </summary>
        [Test]
        public void DeleteNamespacedNetworkPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1DeleteOptions body = null;
            //string pretty = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //var response = instance.DeleteNamespacedNetworkPolicy(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteNamespacedReplicaSet
        /// </summary>
        [Test]
        public void DeleteNamespacedReplicaSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1DeleteOptions body = null;
            //string pretty = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //var response = instance.DeleteNamespacedReplicaSet(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeletePodSecurityPolicy
        /// </summary>
        [Test]
        public void DeletePodSecurityPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //V1DeleteOptions body = null;
            //string pretty = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //var response = instance.DeletePodSecurityPolicy(name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteThirdPartyResource
        /// </summary>
        [Test]
        public void DeleteThirdPartyResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //V1DeleteOptions body = null;
            //string pretty = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //var response = instance.DeleteThirdPartyResource(name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test GetAPIResources
        /// </summary>
        [Test]
        public void GetAPIResourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAPIResources();
            //Assert.IsInstanceOf<V1APIResourceList> (response, "response is V1APIResourceList");
        }
        
        /// <summary>
        /// Test ListDaemonSetForAllNamespaces
        /// </summary>
        [Test]
        public void ListDaemonSetForAllNamespacesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string pretty = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListDaemonSetForAllNamespaces(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1beta1DaemonSetList> (response, "response is V1beta1DaemonSetList");
        }
        
        /// <summary>
        /// Test ListDeploymentForAllNamespaces
        /// </summary>
        [Test]
        public void ListDeploymentForAllNamespacesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string pretty = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListDeploymentForAllNamespaces(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<ExtensionsV1beta1DeploymentList> (response, "response is ExtensionsV1beta1DeploymentList");
        }
        
        /// <summary>
        /// Test ListIngressForAllNamespaces
        /// </summary>
        [Test]
        public void ListIngressForAllNamespacesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string pretty = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListIngressForAllNamespaces(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1beta1IngressList> (response, "response is V1beta1IngressList");
        }
        
        /// <summary>
        /// Test ListNamespacedDaemonSet
        /// </summary>
        [Test]
        public void ListNamespacedDaemonSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListNamespacedDaemonSet(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1beta1DaemonSetList> (response, "response is V1beta1DaemonSetList");
        }
        
        /// <summary>
        /// Test ListNamespacedDeployment
        /// </summary>
        [Test]
        public void ListNamespacedDeploymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListNamespacedDeployment(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<ExtensionsV1beta1DeploymentList> (response, "response is ExtensionsV1beta1DeploymentList");
        }
        
        /// <summary>
        /// Test ListNamespacedIngress
        /// </summary>
        [Test]
        public void ListNamespacedIngressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListNamespacedIngress(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1beta1IngressList> (response, "response is V1beta1IngressList");
        }
        
        /// <summary>
        /// Test ListNamespacedNetworkPolicy
        /// </summary>
        [Test]
        public void ListNamespacedNetworkPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListNamespacedNetworkPolicy(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1beta1NetworkPolicyList> (response, "response is V1beta1NetworkPolicyList");
        }
        
        /// <summary>
        /// Test ListNamespacedReplicaSet
        /// </summary>
        [Test]
        public void ListNamespacedReplicaSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListNamespacedReplicaSet(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1beta1ReplicaSetList> (response, "response is V1beta1ReplicaSetList");
        }
        
        /// <summary>
        /// Test ListNetworkPolicyForAllNamespaces
        /// </summary>
        [Test]
        public void ListNetworkPolicyForAllNamespacesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string pretty = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListNetworkPolicyForAllNamespaces(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1beta1NetworkPolicyList> (response, "response is V1beta1NetworkPolicyList");
        }
        
        /// <summary>
        /// Test ListPodSecurityPolicy
        /// </summary>
        [Test]
        public void ListPodSecurityPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListPodSecurityPolicy(pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1beta1PodSecurityPolicyList> (response, "response is V1beta1PodSecurityPolicyList");
        }
        
        /// <summary>
        /// Test ListReplicaSetForAllNamespaces
        /// </summary>
        [Test]
        public void ListReplicaSetForAllNamespacesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string pretty = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListReplicaSetForAllNamespaces(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1beta1ReplicaSetList> (response, "response is V1beta1ReplicaSetList");
        }
        
        /// <summary>
        /// Test ListThirdPartyResource
        /// </summary>
        [Test]
        public void ListThirdPartyResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListThirdPartyResource(pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1beta1ThirdPartyResourceList> (response, "response is V1beta1ThirdPartyResourceList");
        }
        
        /// <summary>
        /// Test PatchNamespacedDaemonSet
        /// </summary>
        [Test]
        public void PatchNamespacedDaemonSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedDaemonSet(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1beta1DaemonSet> (response, "response is V1beta1DaemonSet");
        }
        
        /// <summary>
        /// Test PatchNamespacedDaemonSetStatus
        /// </summary>
        [Test]
        public void PatchNamespacedDaemonSetStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedDaemonSetStatus(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1beta1DaemonSet> (response, "response is V1beta1DaemonSet");
        }
        
        /// <summary>
        /// Test PatchNamespacedDeployment
        /// </summary>
        [Test]
        public void PatchNamespacedDeploymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedDeployment(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<ExtensionsV1beta1Deployment> (response, "response is ExtensionsV1beta1Deployment");
        }
        
        /// <summary>
        /// Test PatchNamespacedDeploymentScale
        /// </summary>
        [Test]
        public void PatchNamespacedDeploymentScaleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedDeploymentScale(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<ExtensionsV1beta1Scale> (response, "response is ExtensionsV1beta1Scale");
        }
        
        /// <summary>
        /// Test PatchNamespacedDeploymentStatus
        /// </summary>
        [Test]
        public void PatchNamespacedDeploymentStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedDeploymentStatus(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<ExtensionsV1beta1Deployment> (response, "response is ExtensionsV1beta1Deployment");
        }
        
        /// <summary>
        /// Test PatchNamespacedIngress
        /// </summary>
        [Test]
        public void PatchNamespacedIngressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedIngress(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1beta1Ingress> (response, "response is V1beta1Ingress");
        }
        
        /// <summary>
        /// Test PatchNamespacedIngressStatus
        /// </summary>
        [Test]
        public void PatchNamespacedIngressStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedIngressStatus(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1beta1Ingress> (response, "response is V1beta1Ingress");
        }
        
        /// <summary>
        /// Test PatchNamespacedNetworkPolicy
        /// </summary>
        [Test]
        public void PatchNamespacedNetworkPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedNetworkPolicy(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1beta1NetworkPolicy> (response, "response is V1beta1NetworkPolicy");
        }
        
        /// <summary>
        /// Test PatchNamespacedReplicaSet
        /// </summary>
        [Test]
        public void PatchNamespacedReplicaSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedReplicaSet(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1beta1ReplicaSet> (response, "response is V1beta1ReplicaSet");
        }
        
        /// <summary>
        /// Test PatchNamespacedReplicaSetScale
        /// </summary>
        [Test]
        public void PatchNamespacedReplicaSetScaleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedReplicaSetScale(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<ExtensionsV1beta1Scale> (response, "response is ExtensionsV1beta1Scale");
        }
        
        /// <summary>
        /// Test PatchNamespacedReplicaSetStatus
        /// </summary>
        [Test]
        public void PatchNamespacedReplicaSetStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedReplicaSetStatus(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1beta1ReplicaSet> (response, "response is V1beta1ReplicaSet");
        }
        
        /// <summary>
        /// Test PatchNamespacedReplicationControllerDummyScale
        /// </summary>
        [Test]
        public void PatchNamespacedReplicationControllerDummyScaleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedReplicationControllerDummyScale(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<ExtensionsV1beta1Scale> (response, "response is ExtensionsV1beta1Scale");
        }
        
        /// <summary>
        /// Test PatchPodSecurityPolicy
        /// </summary>
        [Test]
        public void PatchPodSecurityPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchPodSecurityPolicy(name, body, pretty);
            //Assert.IsInstanceOf<V1beta1PodSecurityPolicy> (response, "response is V1beta1PodSecurityPolicy");
        }
        
        /// <summary>
        /// Test PatchThirdPartyResource
        /// </summary>
        [Test]
        public void PatchThirdPartyResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchThirdPartyResource(name, body, pretty);
            //Assert.IsInstanceOf<V1beta1ThirdPartyResource> (response, "response is V1beta1ThirdPartyResource");
        }
        
        /// <summary>
        /// Test ReadNamespacedDaemonSet
        /// </summary>
        [Test]
        public void ReadNamespacedDaemonSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //bool? exact = null;
            //bool? export = null;
            //var response = instance.ReadNamespacedDaemonSet(name, _namespace, pretty, exact, export);
            //Assert.IsInstanceOf<V1beta1DaemonSet> (response, "response is V1beta1DaemonSet");
        }
        
        /// <summary>
        /// Test ReadNamespacedDaemonSetStatus
        /// </summary>
        [Test]
        public void ReadNamespacedDaemonSetStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //var response = instance.ReadNamespacedDaemonSetStatus(name, _namespace, pretty);
            //Assert.IsInstanceOf<V1beta1DaemonSet> (response, "response is V1beta1DaemonSet");
        }
        
        /// <summary>
        /// Test ReadNamespacedDeployment
        /// </summary>
        [Test]
        public void ReadNamespacedDeploymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //bool? exact = null;
            //bool? export = null;
            //var response = instance.ReadNamespacedDeployment(name, _namespace, pretty, exact, export);
            //Assert.IsInstanceOf<ExtensionsV1beta1Deployment> (response, "response is ExtensionsV1beta1Deployment");
        }
        
        /// <summary>
        /// Test ReadNamespacedDeploymentScale
        /// </summary>
        [Test]
        public void ReadNamespacedDeploymentScaleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //var response = instance.ReadNamespacedDeploymentScale(name, _namespace, pretty);
            //Assert.IsInstanceOf<ExtensionsV1beta1Scale> (response, "response is ExtensionsV1beta1Scale");
        }
        
        /// <summary>
        /// Test ReadNamespacedDeploymentStatus
        /// </summary>
        [Test]
        public void ReadNamespacedDeploymentStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //var response = instance.ReadNamespacedDeploymentStatus(name, _namespace, pretty);
            //Assert.IsInstanceOf<ExtensionsV1beta1Deployment> (response, "response is ExtensionsV1beta1Deployment");
        }
        
        /// <summary>
        /// Test ReadNamespacedIngress
        /// </summary>
        [Test]
        public void ReadNamespacedIngressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //bool? exact = null;
            //bool? export = null;
            //var response = instance.ReadNamespacedIngress(name, _namespace, pretty, exact, export);
            //Assert.IsInstanceOf<V1beta1Ingress> (response, "response is V1beta1Ingress");
        }
        
        /// <summary>
        /// Test ReadNamespacedIngressStatus
        /// </summary>
        [Test]
        public void ReadNamespacedIngressStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //var response = instance.ReadNamespacedIngressStatus(name, _namespace, pretty);
            //Assert.IsInstanceOf<V1beta1Ingress> (response, "response is V1beta1Ingress");
        }
        
        /// <summary>
        /// Test ReadNamespacedNetworkPolicy
        /// </summary>
        [Test]
        public void ReadNamespacedNetworkPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //bool? exact = null;
            //bool? export = null;
            //var response = instance.ReadNamespacedNetworkPolicy(name, _namespace, pretty, exact, export);
            //Assert.IsInstanceOf<V1beta1NetworkPolicy> (response, "response is V1beta1NetworkPolicy");
        }
        
        /// <summary>
        /// Test ReadNamespacedReplicaSet
        /// </summary>
        [Test]
        public void ReadNamespacedReplicaSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //bool? exact = null;
            //bool? export = null;
            //var response = instance.ReadNamespacedReplicaSet(name, _namespace, pretty, exact, export);
            //Assert.IsInstanceOf<V1beta1ReplicaSet> (response, "response is V1beta1ReplicaSet");
        }
        
        /// <summary>
        /// Test ReadNamespacedReplicaSetScale
        /// </summary>
        [Test]
        public void ReadNamespacedReplicaSetScaleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //var response = instance.ReadNamespacedReplicaSetScale(name, _namespace, pretty);
            //Assert.IsInstanceOf<ExtensionsV1beta1Scale> (response, "response is ExtensionsV1beta1Scale");
        }
        
        /// <summary>
        /// Test ReadNamespacedReplicaSetStatus
        /// </summary>
        [Test]
        public void ReadNamespacedReplicaSetStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //var response = instance.ReadNamespacedReplicaSetStatus(name, _namespace, pretty);
            //Assert.IsInstanceOf<V1beta1ReplicaSet> (response, "response is V1beta1ReplicaSet");
        }
        
        /// <summary>
        /// Test ReadNamespacedReplicationControllerDummyScale
        /// </summary>
        [Test]
        public void ReadNamespacedReplicationControllerDummyScaleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //var response = instance.ReadNamespacedReplicationControllerDummyScale(name, _namespace, pretty);
            //Assert.IsInstanceOf<ExtensionsV1beta1Scale> (response, "response is ExtensionsV1beta1Scale");
        }
        
        /// <summary>
        /// Test ReadPodSecurityPolicy
        /// </summary>
        [Test]
        public void ReadPodSecurityPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string pretty = null;
            //bool? exact = null;
            //bool? export = null;
            //var response = instance.ReadPodSecurityPolicy(name, pretty, exact, export);
            //Assert.IsInstanceOf<V1beta1PodSecurityPolicy> (response, "response is V1beta1PodSecurityPolicy");
        }
        
        /// <summary>
        /// Test ReadThirdPartyResource
        /// </summary>
        [Test]
        public void ReadThirdPartyResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string pretty = null;
            //bool? exact = null;
            //bool? export = null;
            //var response = instance.ReadThirdPartyResource(name, pretty, exact, export);
            //Assert.IsInstanceOf<V1beta1ThirdPartyResource> (response, "response is V1beta1ThirdPartyResource");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedDaemonSet
        /// </summary>
        [Test]
        public void ReplaceNamespacedDaemonSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1beta1DaemonSet body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedDaemonSet(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1beta1DaemonSet> (response, "response is V1beta1DaemonSet");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedDaemonSetStatus
        /// </summary>
        [Test]
        public void ReplaceNamespacedDaemonSetStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1beta1DaemonSet body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedDaemonSetStatus(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1beta1DaemonSet> (response, "response is V1beta1DaemonSet");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedDeployment
        /// </summary>
        [Test]
        public void ReplaceNamespacedDeploymentTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //ExtensionsV1beta1Deployment body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedDeployment(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<ExtensionsV1beta1Deployment> (response, "response is ExtensionsV1beta1Deployment");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedDeploymentScale
        /// </summary>
        [Test]
        public void ReplaceNamespacedDeploymentScaleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //ExtensionsV1beta1Scale body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedDeploymentScale(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<ExtensionsV1beta1Scale> (response, "response is ExtensionsV1beta1Scale");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedDeploymentStatus
        /// </summary>
        [Test]
        public void ReplaceNamespacedDeploymentStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //ExtensionsV1beta1Deployment body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedDeploymentStatus(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<ExtensionsV1beta1Deployment> (response, "response is ExtensionsV1beta1Deployment");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedIngress
        /// </summary>
        [Test]
        public void ReplaceNamespacedIngressTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1beta1Ingress body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedIngress(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1beta1Ingress> (response, "response is V1beta1Ingress");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedIngressStatus
        /// </summary>
        [Test]
        public void ReplaceNamespacedIngressStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1beta1Ingress body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedIngressStatus(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1beta1Ingress> (response, "response is V1beta1Ingress");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedNetworkPolicy
        /// </summary>
        [Test]
        public void ReplaceNamespacedNetworkPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1beta1NetworkPolicy body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedNetworkPolicy(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1beta1NetworkPolicy> (response, "response is V1beta1NetworkPolicy");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedReplicaSet
        /// </summary>
        [Test]
        public void ReplaceNamespacedReplicaSetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1beta1ReplicaSet body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedReplicaSet(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1beta1ReplicaSet> (response, "response is V1beta1ReplicaSet");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedReplicaSetScale
        /// </summary>
        [Test]
        public void ReplaceNamespacedReplicaSetScaleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //ExtensionsV1beta1Scale body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedReplicaSetScale(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<ExtensionsV1beta1Scale> (response, "response is ExtensionsV1beta1Scale");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedReplicaSetStatus
        /// </summary>
        [Test]
        public void ReplaceNamespacedReplicaSetStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1beta1ReplicaSet body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedReplicaSetStatus(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1beta1ReplicaSet> (response, "response is V1beta1ReplicaSet");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedReplicationControllerDummyScale
        /// </summary>
        [Test]
        public void ReplaceNamespacedReplicationControllerDummyScaleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //ExtensionsV1beta1Scale body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedReplicationControllerDummyScale(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<ExtensionsV1beta1Scale> (response, "response is ExtensionsV1beta1Scale");
        }
        
        /// <summary>
        /// Test ReplacePodSecurityPolicy
        /// </summary>
        [Test]
        public void ReplacePodSecurityPolicyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //V1beta1PodSecurityPolicy body = null;
            //string pretty = null;
            //var response = instance.ReplacePodSecurityPolicy(name, body, pretty);
            //Assert.IsInstanceOf<V1beta1PodSecurityPolicy> (response, "response is V1beta1PodSecurityPolicy");
        }
        
        /// <summary>
        /// Test ReplaceThirdPartyResource
        /// </summary>
        [Test]
        public void ReplaceThirdPartyResourceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //V1beta1ThirdPartyResource body = null;
            //string pretty = null;
            //var response = instance.ReplaceThirdPartyResource(name, body, pretty);
            //Assert.IsInstanceOf<V1beta1ThirdPartyResource> (response, "response is V1beta1ThirdPartyResource");
        }
        
    }

}
