/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Kubernetes.DotNet.Client;
using Kubernetes.DotNet.Api;
using Kubernetes.DotNet.Model;

namespace Kubernetes.DotNet.Test
{
    /// <summary>
    ///  Class for testing Storage_v1Api
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class Storage_v1ApiTests
    {
        private Storage_v1Api instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new Storage_v1Api();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of Storage_v1Api
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' Storage_v1Api
            //Assert.IsInstanceOfType(typeof(Storage_v1Api), instance, "instance is a Storage_v1Api");
        }

        
        /// <summary>
        /// Test CreateStorageClass
        /// </summary>
        [Test]
        public void CreateStorageClassTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //V1StorageClass body = null;
            //string pretty = null;
            //var response = instance.CreateStorageClass(body, pretty);
            //Assert.IsInstanceOf<V1StorageClass> (response, "response is V1StorageClass");
        }
        
        /// <summary>
        /// Test DeleteCollectionStorageClass
        /// </summary>
        [Test]
        public void DeleteCollectionStorageClassTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.DeleteCollectionStorageClass(pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteStorageClass
        /// </summary>
        [Test]
        public void DeleteStorageClassTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //V1DeleteOptions body = null;
            //string pretty = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //var response = instance.DeleteStorageClass(name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test GetAPIResources
        /// </summary>
        [Test]
        public void GetAPIResourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAPIResources();
            //Assert.IsInstanceOf<V1APIResourceList> (response, "response is V1APIResourceList");
        }
        
        /// <summary>
        /// Test ListStorageClass
        /// </summary>
        [Test]
        public void ListStorageClassTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListStorageClass(pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1StorageClassList> (response, "response is V1StorageClassList");
        }
        
        /// <summary>
        /// Test PatchStorageClass
        /// </summary>
        [Test]
        public void PatchStorageClassTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchStorageClass(name, body, pretty);
            //Assert.IsInstanceOf<V1StorageClass> (response, "response is V1StorageClass");
        }
        
        /// <summary>
        /// Test ReadStorageClass
        /// </summary>
        [Test]
        public void ReadStorageClassTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string pretty = null;
            //bool? exact = null;
            //bool? export = null;
            //var response = instance.ReadStorageClass(name, pretty, exact, export);
            //Assert.IsInstanceOf<V1StorageClass> (response, "response is V1StorageClass");
        }
        
        /// <summary>
        /// Test ReplaceStorageClass
        /// </summary>
        [Test]
        public void ReplaceStorageClassTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //V1StorageClass body = null;
            //string pretty = null;
            //var response = instance.ReplaceStorageClass(name, body, pretty);
            //Assert.IsInstanceOf<V1StorageClass> (response, "response is V1StorageClass");
        }
        
    }

}
