/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using Kubernetes.DotNet.Client;
using Kubernetes.DotNet.Api;
using Kubernetes.DotNet.Model;

namespace Kubernetes.DotNet.Test
{
    /// <summary>
    ///  Class for testing Core_v1Api
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class Core_v1ApiTests
    {
        private Core_v1Api instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new Core_v1Api();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of Core_v1Api
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' Core_v1Api
            //Assert.IsInstanceOfType(typeof(Core_v1Api), instance, "instance is a Core_v1Api");
        }

        
        /// <summary>
        /// Test ConnectDeleteNamespacedPodProxy
        /// </summary>
        [Test]
        public void ConnectDeleteNamespacedPodProxyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ConnectDeleteNamespacedPodProxy(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectDeleteNamespacedPodProxyWithPath
        /// </summary>
        [Test]
        public void ConnectDeleteNamespacedPodProxyWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //string path2 = null;
            //var response = instance.ConnectDeleteNamespacedPodProxyWithPath(name, _namespace, path, path2);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectDeleteNamespacedServiceProxy
        /// </summary>
        [Test]
        public void ConnectDeleteNamespacedServiceProxyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ConnectDeleteNamespacedServiceProxy(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectDeleteNamespacedServiceProxyWithPath
        /// </summary>
        [Test]
        public void ConnectDeleteNamespacedServiceProxyWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //string path2 = null;
            //var response = instance.ConnectDeleteNamespacedServiceProxyWithPath(name, _namespace, path, path2);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectDeleteNodeProxy
        /// </summary>
        [Test]
        public void ConnectDeleteNodeProxyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string path = null;
            //var response = instance.ConnectDeleteNodeProxy(name, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectDeleteNodeProxyWithPath
        /// </summary>
        [Test]
        public void ConnectDeleteNodeProxyWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string path = null;
            //string path2 = null;
            //var response = instance.ConnectDeleteNodeProxyWithPath(name, path, path2);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectGetNamespacedPodAttach
        /// </summary>
        [Test]
        public void ConnectGetNamespacedPodAttachTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string container = null;
            //bool? stderr = null;
            //bool? stdin = null;
            //bool? stdout = null;
            //bool? tty = null;
            //var response = instance.ConnectGetNamespacedPodAttach(name, _namespace, container, stderr, stdin, stdout, tty);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectGetNamespacedPodExec
        /// </summary>
        [Test]
        public void ConnectGetNamespacedPodExecTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string command = null;
            //string container = null;
            //bool? stderr = null;
            //bool? stdin = null;
            //bool? stdout = null;
            //bool? tty = null;
            //var response = instance.ConnectGetNamespacedPodExec(name, _namespace, command, container, stderr, stdin, stdout, tty);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectGetNamespacedPodPortforward
        /// </summary>
        [Test]
        public void ConnectGetNamespacedPodPortforwardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //int? ports = null;
            //var response = instance.ConnectGetNamespacedPodPortforward(name, _namespace, ports);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectGetNamespacedPodProxy
        /// </summary>
        [Test]
        public void ConnectGetNamespacedPodProxyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ConnectGetNamespacedPodProxy(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectGetNamespacedPodProxyWithPath
        /// </summary>
        [Test]
        public void ConnectGetNamespacedPodProxyWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //string path2 = null;
            //var response = instance.ConnectGetNamespacedPodProxyWithPath(name, _namespace, path, path2);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectGetNamespacedServiceProxy
        /// </summary>
        [Test]
        public void ConnectGetNamespacedServiceProxyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ConnectGetNamespacedServiceProxy(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectGetNamespacedServiceProxyWithPath
        /// </summary>
        [Test]
        public void ConnectGetNamespacedServiceProxyWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //string path2 = null;
            //var response = instance.ConnectGetNamespacedServiceProxyWithPath(name, _namespace, path, path2);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectGetNodeProxy
        /// </summary>
        [Test]
        public void ConnectGetNodeProxyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string path = null;
            //var response = instance.ConnectGetNodeProxy(name, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectGetNodeProxyWithPath
        /// </summary>
        [Test]
        public void ConnectGetNodeProxyWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string path = null;
            //string path2 = null;
            //var response = instance.ConnectGetNodeProxyWithPath(name, path, path2);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectHeadNamespacedPodProxy
        /// </summary>
        [Test]
        public void ConnectHeadNamespacedPodProxyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ConnectHeadNamespacedPodProxy(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectHeadNamespacedPodProxyWithPath
        /// </summary>
        [Test]
        public void ConnectHeadNamespacedPodProxyWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //string path2 = null;
            //var response = instance.ConnectHeadNamespacedPodProxyWithPath(name, _namespace, path, path2);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectHeadNamespacedServiceProxy
        /// </summary>
        [Test]
        public void ConnectHeadNamespacedServiceProxyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ConnectHeadNamespacedServiceProxy(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectHeadNamespacedServiceProxyWithPath
        /// </summary>
        [Test]
        public void ConnectHeadNamespacedServiceProxyWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //string path2 = null;
            //var response = instance.ConnectHeadNamespacedServiceProxyWithPath(name, _namespace, path, path2);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectHeadNodeProxy
        /// </summary>
        [Test]
        public void ConnectHeadNodeProxyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string path = null;
            //var response = instance.ConnectHeadNodeProxy(name, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectHeadNodeProxyWithPath
        /// </summary>
        [Test]
        public void ConnectHeadNodeProxyWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string path = null;
            //string path2 = null;
            //var response = instance.ConnectHeadNodeProxyWithPath(name, path, path2);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectOptionsNamespacedPodProxy
        /// </summary>
        [Test]
        public void ConnectOptionsNamespacedPodProxyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ConnectOptionsNamespacedPodProxy(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectOptionsNamespacedPodProxyWithPath
        /// </summary>
        [Test]
        public void ConnectOptionsNamespacedPodProxyWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //string path2 = null;
            //var response = instance.ConnectOptionsNamespacedPodProxyWithPath(name, _namespace, path, path2);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectOptionsNamespacedServiceProxy
        /// </summary>
        [Test]
        public void ConnectOptionsNamespacedServiceProxyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ConnectOptionsNamespacedServiceProxy(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectOptionsNamespacedServiceProxyWithPath
        /// </summary>
        [Test]
        public void ConnectOptionsNamespacedServiceProxyWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //string path2 = null;
            //var response = instance.ConnectOptionsNamespacedServiceProxyWithPath(name, _namespace, path, path2);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectOptionsNodeProxy
        /// </summary>
        [Test]
        public void ConnectOptionsNodeProxyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string path = null;
            //var response = instance.ConnectOptionsNodeProxy(name, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectOptionsNodeProxyWithPath
        /// </summary>
        [Test]
        public void ConnectOptionsNodeProxyWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string path = null;
            //string path2 = null;
            //var response = instance.ConnectOptionsNodeProxyWithPath(name, path, path2);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectPatchNamespacedPodProxy
        /// </summary>
        [Test]
        public void ConnectPatchNamespacedPodProxyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ConnectPatchNamespacedPodProxy(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectPatchNamespacedPodProxyWithPath
        /// </summary>
        [Test]
        public void ConnectPatchNamespacedPodProxyWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //string path2 = null;
            //var response = instance.ConnectPatchNamespacedPodProxyWithPath(name, _namespace, path, path2);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectPatchNamespacedServiceProxy
        /// </summary>
        [Test]
        public void ConnectPatchNamespacedServiceProxyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ConnectPatchNamespacedServiceProxy(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectPatchNamespacedServiceProxyWithPath
        /// </summary>
        [Test]
        public void ConnectPatchNamespacedServiceProxyWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //string path2 = null;
            //var response = instance.ConnectPatchNamespacedServiceProxyWithPath(name, _namespace, path, path2);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectPatchNodeProxy
        /// </summary>
        [Test]
        public void ConnectPatchNodeProxyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string path = null;
            //var response = instance.ConnectPatchNodeProxy(name, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectPatchNodeProxyWithPath
        /// </summary>
        [Test]
        public void ConnectPatchNodeProxyWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string path = null;
            //string path2 = null;
            //var response = instance.ConnectPatchNodeProxyWithPath(name, path, path2);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectPostNamespacedPodAttach
        /// </summary>
        [Test]
        public void ConnectPostNamespacedPodAttachTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string container = null;
            //bool? stderr = null;
            //bool? stdin = null;
            //bool? stdout = null;
            //bool? tty = null;
            //var response = instance.ConnectPostNamespacedPodAttach(name, _namespace, container, stderr, stdin, stdout, tty);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectPostNamespacedPodExec
        /// </summary>
        [Test]
        public void ConnectPostNamespacedPodExecTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string command = null;
            //string container = null;
            //bool? stderr = null;
            //bool? stdin = null;
            //bool? stdout = null;
            //bool? tty = null;
            //var response = instance.ConnectPostNamespacedPodExec(name, _namespace, command, container, stderr, stdin, stdout, tty);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectPostNamespacedPodPortforward
        /// </summary>
        [Test]
        public void ConnectPostNamespacedPodPortforwardTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //int? ports = null;
            //var response = instance.ConnectPostNamespacedPodPortforward(name, _namespace, ports);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectPostNamespacedPodProxy
        /// </summary>
        [Test]
        public void ConnectPostNamespacedPodProxyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ConnectPostNamespacedPodProxy(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectPostNamespacedPodProxyWithPath
        /// </summary>
        [Test]
        public void ConnectPostNamespacedPodProxyWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //string path2 = null;
            //var response = instance.ConnectPostNamespacedPodProxyWithPath(name, _namespace, path, path2);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectPostNamespacedServiceProxy
        /// </summary>
        [Test]
        public void ConnectPostNamespacedServiceProxyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ConnectPostNamespacedServiceProxy(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectPostNamespacedServiceProxyWithPath
        /// </summary>
        [Test]
        public void ConnectPostNamespacedServiceProxyWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //string path2 = null;
            //var response = instance.ConnectPostNamespacedServiceProxyWithPath(name, _namespace, path, path2);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectPostNodeProxy
        /// </summary>
        [Test]
        public void ConnectPostNodeProxyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string path = null;
            //var response = instance.ConnectPostNodeProxy(name, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectPostNodeProxyWithPath
        /// </summary>
        [Test]
        public void ConnectPostNodeProxyWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string path = null;
            //string path2 = null;
            //var response = instance.ConnectPostNodeProxyWithPath(name, path, path2);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectPutNamespacedPodProxy
        /// </summary>
        [Test]
        public void ConnectPutNamespacedPodProxyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ConnectPutNamespacedPodProxy(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectPutNamespacedPodProxyWithPath
        /// </summary>
        [Test]
        public void ConnectPutNamespacedPodProxyWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //string path2 = null;
            //var response = instance.ConnectPutNamespacedPodProxyWithPath(name, _namespace, path, path2);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectPutNamespacedServiceProxy
        /// </summary>
        [Test]
        public void ConnectPutNamespacedServiceProxyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ConnectPutNamespacedServiceProxy(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectPutNamespacedServiceProxyWithPath
        /// </summary>
        [Test]
        public void ConnectPutNamespacedServiceProxyWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //string path2 = null;
            //var response = instance.ConnectPutNamespacedServiceProxyWithPath(name, _namespace, path, path2);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectPutNodeProxy
        /// </summary>
        [Test]
        public void ConnectPutNodeProxyTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string path = null;
            //var response = instance.ConnectPutNodeProxy(name, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ConnectPutNodeProxyWithPath
        /// </summary>
        [Test]
        public void ConnectPutNodeProxyWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string path = null;
            //string path2 = null;
            //var response = instance.ConnectPutNodeProxyWithPath(name, path, path2);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test CreateNamespace
        /// </summary>
        [Test]
        public void CreateNamespaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //V1Namespace body = null;
            //string pretty = null;
            //var response = instance.CreateNamespace(body, pretty);
            //Assert.IsInstanceOf<V1Namespace> (response, "response is V1Namespace");
        }
        
        /// <summary>
        /// Test CreateNamespacedBinding
        /// </summary>
        [Test]
        public void CreateNamespacedBindingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //V1Binding body = null;
            //string pretty = null;
            //var response = instance.CreateNamespacedBinding(_namespace, body, pretty);
            //Assert.IsInstanceOf<V1Binding> (response, "response is V1Binding");
        }
        
        /// <summary>
        /// Test CreateNamespacedConfigMap
        /// </summary>
        [Test]
        public void CreateNamespacedConfigMapTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //V1ConfigMap body = null;
            //string pretty = null;
            //var response = instance.CreateNamespacedConfigMap(_namespace, body, pretty);
            //Assert.IsInstanceOf<V1ConfigMap> (response, "response is V1ConfigMap");
        }
        
        /// <summary>
        /// Test CreateNamespacedEndpoints
        /// </summary>
        [Test]
        public void CreateNamespacedEndpointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //V1Endpoints body = null;
            //string pretty = null;
            //var response = instance.CreateNamespacedEndpoints(_namespace, body, pretty);
            //Assert.IsInstanceOf<V1Endpoints> (response, "response is V1Endpoints");
        }
        
        /// <summary>
        /// Test CreateNamespacedEvent
        /// </summary>
        [Test]
        public void CreateNamespacedEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //V1Event body = null;
            //string pretty = null;
            //var response = instance.CreateNamespacedEvent(_namespace, body, pretty);
            //Assert.IsInstanceOf<V1Event> (response, "response is V1Event");
        }
        
        /// <summary>
        /// Test CreateNamespacedLimitRange
        /// </summary>
        [Test]
        public void CreateNamespacedLimitRangeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //V1LimitRange body = null;
            //string pretty = null;
            //var response = instance.CreateNamespacedLimitRange(_namespace, body, pretty);
            //Assert.IsInstanceOf<V1LimitRange> (response, "response is V1LimitRange");
        }
        
        /// <summary>
        /// Test CreateNamespacedPersistentVolumeClaim
        /// </summary>
        [Test]
        public void CreateNamespacedPersistentVolumeClaimTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //V1PersistentVolumeClaim body = null;
            //string pretty = null;
            //var response = instance.CreateNamespacedPersistentVolumeClaim(_namespace, body, pretty);
            //Assert.IsInstanceOf<V1PersistentVolumeClaim> (response, "response is V1PersistentVolumeClaim");
        }
        
        /// <summary>
        /// Test CreateNamespacedPod
        /// </summary>
        [Test]
        public void CreateNamespacedPodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //V1Pod body = null;
            //string pretty = null;
            //var response = instance.CreateNamespacedPod(_namespace, body, pretty);
            //Assert.IsInstanceOf<V1Pod> (response, "response is V1Pod");
        }
        
        /// <summary>
        /// Test CreateNamespacedPodBinding
        /// </summary>
        [Test]
        public void CreateNamespacedPodBindingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1Binding body = null;
            //string pretty = null;
            //var response = instance.CreateNamespacedPodBinding(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1Binding> (response, "response is V1Binding");
        }
        
        /// <summary>
        /// Test CreateNamespacedPodEviction
        /// </summary>
        [Test]
        public void CreateNamespacedPodEvictionTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1beta1Eviction body = null;
            //string pretty = null;
            //var response = instance.CreateNamespacedPodEviction(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1beta1Eviction> (response, "response is V1beta1Eviction");
        }
        
        /// <summary>
        /// Test CreateNamespacedPodTemplate
        /// </summary>
        [Test]
        public void CreateNamespacedPodTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //V1PodTemplate body = null;
            //string pretty = null;
            //var response = instance.CreateNamespacedPodTemplate(_namespace, body, pretty);
            //Assert.IsInstanceOf<V1PodTemplate> (response, "response is V1PodTemplate");
        }
        
        /// <summary>
        /// Test CreateNamespacedReplicationController
        /// </summary>
        [Test]
        public void CreateNamespacedReplicationControllerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //V1ReplicationController body = null;
            //string pretty = null;
            //var response = instance.CreateNamespacedReplicationController(_namespace, body, pretty);
            //Assert.IsInstanceOf<V1ReplicationController> (response, "response is V1ReplicationController");
        }
        
        /// <summary>
        /// Test CreateNamespacedResourceQuota
        /// </summary>
        [Test]
        public void CreateNamespacedResourceQuotaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //V1ResourceQuota body = null;
            //string pretty = null;
            //var response = instance.CreateNamespacedResourceQuota(_namespace, body, pretty);
            //Assert.IsInstanceOf<V1ResourceQuota> (response, "response is V1ResourceQuota");
        }
        
        /// <summary>
        /// Test CreateNamespacedSecret
        /// </summary>
        [Test]
        public void CreateNamespacedSecretTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //V1Secret body = null;
            //string pretty = null;
            //var response = instance.CreateNamespacedSecret(_namespace, body, pretty);
            //Assert.IsInstanceOf<V1Secret> (response, "response is V1Secret");
        }
        
        /// <summary>
        /// Test CreateNamespacedService
        /// </summary>
        [Test]
        public void CreateNamespacedServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //V1Service body = null;
            //string pretty = null;
            //var response = instance.CreateNamespacedService(_namespace, body, pretty);
            //Assert.IsInstanceOf<V1Service> (response, "response is V1Service");
        }
        
        /// <summary>
        /// Test CreateNamespacedServiceAccount
        /// </summary>
        [Test]
        public void CreateNamespacedServiceAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //V1ServiceAccount body = null;
            //string pretty = null;
            //var response = instance.CreateNamespacedServiceAccount(_namespace, body, pretty);
            //Assert.IsInstanceOf<V1ServiceAccount> (response, "response is V1ServiceAccount");
        }
        
        /// <summary>
        /// Test CreateNode
        /// </summary>
        [Test]
        public void CreateNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //V1Node body = null;
            //string pretty = null;
            //var response = instance.CreateNode(body, pretty);
            //Assert.IsInstanceOf<V1Node> (response, "response is V1Node");
        }
        
        /// <summary>
        /// Test CreatePersistentVolume
        /// </summary>
        [Test]
        public void CreatePersistentVolumeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //V1PersistentVolume body = null;
            //string pretty = null;
            //var response = instance.CreatePersistentVolume(body, pretty);
            //Assert.IsInstanceOf<V1PersistentVolume> (response, "response is V1PersistentVolume");
        }
        
        /// <summary>
        /// Test DeleteCollectionNamespacedConfigMap
        /// </summary>
        [Test]
        public void DeleteCollectionNamespacedConfigMapTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.DeleteCollectionNamespacedConfigMap(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteCollectionNamespacedEndpoints
        /// </summary>
        [Test]
        public void DeleteCollectionNamespacedEndpointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.DeleteCollectionNamespacedEndpoints(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteCollectionNamespacedEvent
        /// </summary>
        [Test]
        public void DeleteCollectionNamespacedEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.DeleteCollectionNamespacedEvent(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteCollectionNamespacedLimitRange
        /// </summary>
        [Test]
        public void DeleteCollectionNamespacedLimitRangeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.DeleteCollectionNamespacedLimitRange(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteCollectionNamespacedPersistentVolumeClaim
        /// </summary>
        [Test]
        public void DeleteCollectionNamespacedPersistentVolumeClaimTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.DeleteCollectionNamespacedPersistentVolumeClaim(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteCollectionNamespacedPod
        /// </summary>
        [Test]
        public void DeleteCollectionNamespacedPodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.DeleteCollectionNamespacedPod(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteCollectionNamespacedPodTemplate
        /// </summary>
        [Test]
        public void DeleteCollectionNamespacedPodTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.DeleteCollectionNamespacedPodTemplate(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteCollectionNamespacedReplicationController
        /// </summary>
        [Test]
        public void DeleteCollectionNamespacedReplicationControllerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.DeleteCollectionNamespacedReplicationController(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteCollectionNamespacedResourceQuota
        /// </summary>
        [Test]
        public void DeleteCollectionNamespacedResourceQuotaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.DeleteCollectionNamespacedResourceQuota(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteCollectionNamespacedSecret
        /// </summary>
        [Test]
        public void DeleteCollectionNamespacedSecretTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.DeleteCollectionNamespacedSecret(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteCollectionNamespacedServiceAccount
        /// </summary>
        [Test]
        public void DeleteCollectionNamespacedServiceAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.DeleteCollectionNamespacedServiceAccount(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteCollectionNode
        /// </summary>
        [Test]
        public void DeleteCollectionNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.DeleteCollectionNode(pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteCollectionPersistentVolume
        /// </summary>
        [Test]
        public void DeleteCollectionPersistentVolumeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.DeleteCollectionPersistentVolume(pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteNamespace
        /// </summary>
        [Test]
        public void DeleteNamespaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //V1DeleteOptions body = null;
            //string pretty = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //var response = instance.DeleteNamespace(name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteNamespacedConfigMap
        /// </summary>
        [Test]
        public void DeleteNamespacedConfigMapTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1DeleteOptions body = null;
            //string pretty = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //var response = instance.DeleteNamespacedConfigMap(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteNamespacedEndpoints
        /// </summary>
        [Test]
        public void DeleteNamespacedEndpointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1DeleteOptions body = null;
            //string pretty = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //var response = instance.DeleteNamespacedEndpoints(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteNamespacedEvent
        /// </summary>
        [Test]
        public void DeleteNamespacedEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1DeleteOptions body = null;
            //string pretty = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //var response = instance.DeleteNamespacedEvent(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteNamespacedLimitRange
        /// </summary>
        [Test]
        public void DeleteNamespacedLimitRangeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1DeleteOptions body = null;
            //string pretty = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //var response = instance.DeleteNamespacedLimitRange(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteNamespacedPersistentVolumeClaim
        /// </summary>
        [Test]
        public void DeleteNamespacedPersistentVolumeClaimTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1DeleteOptions body = null;
            //string pretty = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //var response = instance.DeleteNamespacedPersistentVolumeClaim(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteNamespacedPod
        /// </summary>
        [Test]
        public void DeleteNamespacedPodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1DeleteOptions body = null;
            //string pretty = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //var response = instance.DeleteNamespacedPod(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteNamespacedPodTemplate
        /// </summary>
        [Test]
        public void DeleteNamespacedPodTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1DeleteOptions body = null;
            //string pretty = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //var response = instance.DeleteNamespacedPodTemplate(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteNamespacedReplicationController
        /// </summary>
        [Test]
        public void DeleteNamespacedReplicationControllerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1DeleteOptions body = null;
            //string pretty = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //var response = instance.DeleteNamespacedReplicationController(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteNamespacedResourceQuota
        /// </summary>
        [Test]
        public void DeleteNamespacedResourceQuotaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1DeleteOptions body = null;
            //string pretty = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //var response = instance.DeleteNamespacedResourceQuota(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteNamespacedSecret
        /// </summary>
        [Test]
        public void DeleteNamespacedSecretTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1DeleteOptions body = null;
            //string pretty = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //var response = instance.DeleteNamespacedSecret(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteNamespacedService
        /// </summary>
        [Test]
        public void DeleteNamespacedServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //var response = instance.DeleteNamespacedService(name, _namespace, pretty);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteNamespacedServiceAccount
        /// </summary>
        [Test]
        public void DeleteNamespacedServiceAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1DeleteOptions body = null;
            //string pretty = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //var response = instance.DeleteNamespacedServiceAccount(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeleteNode
        /// </summary>
        [Test]
        public void DeleteNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //V1DeleteOptions body = null;
            //string pretty = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //var response = instance.DeleteNode(name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test DeletePersistentVolume
        /// </summary>
        [Test]
        public void DeletePersistentVolumeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //V1DeleteOptions body = null;
            //string pretty = null;
            //int? gracePeriodSeconds = null;
            //bool? orphanDependents = null;
            //string propagationPolicy = null;
            //var response = instance.DeletePersistentVolume(name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
            //Assert.IsInstanceOf<V1Status> (response, "response is V1Status");
        }
        
        /// <summary>
        /// Test GetAPIResources
        /// </summary>
        [Test]
        public void GetAPIResourcesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.GetAPIResources();
            //Assert.IsInstanceOf<V1APIResourceList> (response, "response is V1APIResourceList");
        }
        
        /// <summary>
        /// Test ListComponentStatus
        /// </summary>
        [Test]
        public void ListComponentStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string pretty = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListComponentStatus(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1ComponentStatusList> (response, "response is V1ComponentStatusList");
        }
        
        /// <summary>
        /// Test ListConfigMapForAllNamespaces
        /// </summary>
        [Test]
        public void ListConfigMapForAllNamespacesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string pretty = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListConfigMapForAllNamespaces(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1ConfigMapList> (response, "response is V1ConfigMapList");
        }
        
        /// <summary>
        /// Test ListEndpointsForAllNamespaces
        /// </summary>
        [Test]
        public void ListEndpointsForAllNamespacesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string pretty = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListEndpointsForAllNamespaces(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1EndpointsList> (response, "response is V1EndpointsList");
        }
        
        /// <summary>
        /// Test ListEventForAllNamespaces
        /// </summary>
        [Test]
        public void ListEventForAllNamespacesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string pretty = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListEventForAllNamespaces(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1EventList> (response, "response is V1EventList");
        }
        
        /// <summary>
        /// Test ListLimitRangeForAllNamespaces
        /// </summary>
        [Test]
        public void ListLimitRangeForAllNamespacesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string pretty = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListLimitRangeForAllNamespaces(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1LimitRangeList> (response, "response is V1LimitRangeList");
        }
        
        /// <summary>
        /// Test ListNamespace
        /// </summary>
        [Test]
        public void ListNamespaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListNamespace(pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1NamespaceList> (response, "response is V1NamespaceList");
        }
        
        /// <summary>
        /// Test ListNamespacedConfigMap
        /// </summary>
        [Test]
        public void ListNamespacedConfigMapTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListNamespacedConfigMap(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1ConfigMapList> (response, "response is V1ConfigMapList");
        }
        
        /// <summary>
        /// Test ListNamespacedEndpoints
        /// </summary>
        [Test]
        public void ListNamespacedEndpointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListNamespacedEndpoints(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1EndpointsList> (response, "response is V1EndpointsList");
        }
        
        /// <summary>
        /// Test ListNamespacedEvent
        /// </summary>
        [Test]
        public void ListNamespacedEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListNamespacedEvent(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1EventList> (response, "response is V1EventList");
        }
        
        /// <summary>
        /// Test ListNamespacedLimitRange
        /// </summary>
        [Test]
        public void ListNamespacedLimitRangeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListNamespacedLimitRange(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1LimitRangeList> (response, "response is V1LimitRangeList");
        }
        
        /// <summary>
        /// Test ListNamespacedPersistentVolumeClaim
        /// </summary>
        [Test]
        public void ListNamespacedPersistentVolumeClaimTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListNamespacedPersistentVolumeClaim(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1PersistentVolumeClaimList> (response, "response is V1PersistentVolumeClaimList");
        }
        
        /// <summary>
        /// Test ListNamespacedPod
        /// </summary>
        [Test]
        public void ListNamespacedPodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListNamespacedPod(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1PodList> (response, "response is V1PodList");
        }
        
        /// <summary>
        /// Test ListNamespacedPodTemplate
        /// </summary>
        [Test]
        public void ListNamespacedPodTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListNamespacedPodTemplate(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1PodTemplateList> (response, "response is V1PodTemplateList");
        }
        
        /// <summary>
        /// Test ListNamespacedReplicationController
        /// </summary>
        [Test]
        public void ListNamespacedReplicationControllerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListNamespacedReplicationController(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1ReplicationControllerList> (response, "response is V1ReplicationControllerList");
        }
        
        /// <summary>
        /// Test ListNamespacedResourceQuota
        /// </summary>
        [Test]
        public void ListNamespacedResourceQuotaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListNamespacedResourceQuota(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1ResourceQuotaList> (response, "response is V1ResourceQuotaList");
        }
        
        /// <summary>
        /// Test ListNamespacedSecret
        /// </summary>
        [Test]
        public void ListNamespacedSecretTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListNamespacedSecret(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1SecretList> (response, "response is V1SecretList");
        }
        
        /// <summary>
        /// Test ListNamespacedService
        /// </summary>
        [Test]
        public void ListNamespacedServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListNamespacedService(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1ServiceList> (response, "response is V1ServiceList");
        }
        
        /// <summary>
        /// Test ListNamespacedServiceAccount
        /// </summary>
        [Test]
        public void ListNamespacedServiceAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string _namespace = null;
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListNamespacedServiceAccount(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1ServiceAccountList> (response, "response is V1ServiceAccountList");
        }
        
        /// <summary>
        /// Test ListNode
        /// </summary>
        [Test]
        public void ListNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListNode(pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1NodeList> (response, "response is V1NodeList");
        }
        
        /// <summary>
        /// Test ListPersistentVolume
        /// </summary>
        [Test]
        public void ListPersistentVolumeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string pretty = null;
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListPersistentVolume(pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1PersistentVolumeList> (response, "response is V1PersistentVolumeList");
        }
        
        /// <summary>
        /// Test ListPersistentVolumeClaimForAllNamespaces
        /// </summary>
        [Test]
        public void ListPersistentVolumeClaimForAllNamespacesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string pretty = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListPersistentVolumeClaimForAllNamespaces(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1PersistentVolumeClaimList> (response, "response is V1PersistentVolumeClaimList");
        }
        
        /// <summary>
        /// Test ListPodForAllNamespaces
        /// </summary>
        [Test]
        public void ListPodForAllNamespacesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string pretty = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListPodForAllNamespaces(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1PodList> (response, "response is V1PodList");
        }
        
        /// <summary>
        /// Test ListPodTemplateForAllNamespaces
        /// </summary>
        [Test]
        public void ListPodTemplateForAllNamespacesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string pretty = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListPodTemplateForAllNamespaces(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1PodTemplateList> (response, "response is V1PodTemplateList");
        }
        
        /// <summary>
        /// Test ListReplicationControllerForAllNamespaces
        /// </summary>
        [Test]
        public void ListReplicationControllerForAllNamespacesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string pretty = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListReplicationControllerForAllNamespaces(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1ReplicationControllerList> (response, "response is V1ReplicationControllerList");
        }
        
        /// <summary>
        /// Test ListResourceQuotaForAllNamespaces
        /// </summary>
        [Test]
        public void ListResourceQuotaForAllNamespacesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string pretty = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListResourceQuotaForAllNamespaces(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1ResourceQuotaList> (response, "response is V1ResourceQuotaList");
        }
        
        /// <summary>
        /// Test ListSecretForAllNamespaces
        /// </summary>
        [Test]
        public void ListSecretForAllNamespacesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string pretty = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListSecretForAllNamespaces(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1SecretList> (response, "response is V1SecretList");
        }
        
        /// <summary>
        /// Test ListServiceAccountForAllNamespaces
        /// </summary>
        [Test]
        public void ListServiceAccountForAllNamespacesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string pretty = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListServiceAccountForAllNamespaces(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1ServiceAccountList> (response, "response is V1ServiceAccountList");
        }
        
        /// <summary>
        /// Test ListServiceForAllNamespaces
        /// </summary>
        [Test]
        public void ListServiceForAllNamespacesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string fieldSelector = null;
            //bool? includeUninitialized = null;
            //string labelSelector = null;
            //string pretty = null;
            //string resourceVersion = null;
            //int? timeoutSeconds = null;
            //bool? watch = null;
            //var response = instance.ListServiceForAllNamespaces(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
            //Assert.IsInstanceOf<V1ServiceList> (response, "response is V1ServiceList");
        }
        
        /// <summary>
        /// Test PatchNamespace
        /// </summary>
        [Test]
        public void PatchNamespaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespace(name, body, pretty);
            //Assert.IsInstanceOf<V1Namespace> (response, "response is V1Namespace");
        }
        
        /// <summary>
        /// Test PatchNamespaceStatus
        /// </summary>
        [Test]
        public void PatchNamespaceStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespaceStatus(name, body, pretty);
            //Assert.IsInstanceOf<V1Namespace> (response, "response is V1Namespace");
        }
        
        /// <summary>
        /// Test PatchNamespacedConfigMap
        /// </summary>
        [Test]
        public void PatchNamespacedConfigMapTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedConfigMap(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1ConfigMap> (response, "response is V1ConfigMap");
        }
        
        /// <summary>
        /// Test PatchNamespacedEndpoints
        /// </summary>
        [Test]
        public void PatchNamespacedEndpointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedEndpoints(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1Endpoints> (response, "response is V1Endpoints");
        }
        
        /// <summary>
        /// Test PatchNamespacedEvent
        /// </summary>
        [Test]
        public void PatchNamespacedEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedEvent(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1Event> (response, "response is V1Event");
        }
        
        /// <summary>
        /// Test PatchNamespacedLimitRange
        /// </summary>
        [Test]
        public void PatchNamespacedLimitRangeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedLimitRange(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1LimitRange> (response, "response is V1LimitRange");
        }
        
        /// <summary>
        /// Test PatchNamespacedPersistentVolumeClaim
        /// </summary>
        [Test]
        public void PatchNamespacedPersistentVolumeClaimTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedPersistentVolumeClaim(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1PersistentVolumeClaim> (response, "response is V1PersistentVolumeClaim");
        }
        
        /// <summary>
        /// Test PatchNamespacedPersistentVolumeClaimStatus
        /// </summary>
        [Test]
        public void PatchNamespacedPersistentVolumeClaimStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedPersistentVolumeClaimStatus(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1PersistentVolumeClaim> (response, "response is V1PersistentVolumeClaim");
        }
        
        /// <summary>
        /// Test PatchNamespacedPod
        /// </summary>
        [Test]
        public void PatchNamespacedPodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedPod(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1Pod> (response, "response is V1Pod");
        }
        
        /// <summary>
        /// Test PatchNamespacedPodStatus
        /// </summary>
        [Test]
        public void PatchNamespacedPodStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedPodStatus(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1Pod> (response, "response is V1Pod");
        }
        
        /// <summary>
        /// Test PatchNamespacedPodTemplate
        /// </summary>
        [Test]
        public void PatchNamespacedPodTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedPodTemplate(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1PodTemplate> (response, "response is V1PodTemplate");
        }
        
        /// <summary>
        /// Test PatchNamespacedReplicationController
        /// </summary>
        [Test]
        public void PatchNamespacedReplicationControllerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedReplicationController(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1ReplicationController> (response, "response is V1ReplicationController");
        }
        
        /// <summary>
        /// Test PatchNamespacedReplicationControllerScale
        /// </summary>
        [Test]
        public void PatchNamespacedReplicationControllerScaleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedReplicationControllerScale(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1Scale> (response, "response is V1Scale");
        }
        
        /// <summary>
        /// Test PatchNamespacedReplicationControllerStatus
        /// </summary>
        [Test]
        public void PatchNamespacedReplicationControllerStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedReplicationControllerStatus(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1ReplicationController> (response, "response is V1ReplicationController");
        }
        
        /// <summary>
        /// Test PatchNamespacedResourceQuota
        /// </summary>
        [Test]
        public void PatchNamespacedResourceQuotaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedResourceQuota(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1ResourceQuota> (response, "response is V1ResourceQuota");
        }
        
        /// <summary>
        /// Test PatchNamespacedResourceQuotaStatus
        /// </summary>
        [Test]
        public void PatchNamespacedResourceQuotaStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedResourceQuotaStatus(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1ResourceQuota> (response, "response is V1ResourceQuota");
        }
        
        /// <summary>
        /// Test PatchNamespacedSecret
        /// </summary>
        [Test]
        public void PatchNamespacedSecretTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedSecret(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1Secret> (response, "response is V1Secret");
        }
        
        /// <summary>
        /// Test PatchNamespacedService
        /// </summary>
        [Test]
        public void PatchNamespacedServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedService(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1Service> (response, "response is V1Service");
        }
        
        /// <summary>
        /// Test PatchNamespacedServiceAccount
        /// </summary>
        [Test]
        public void PatchNamespacedServiceAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedServiceAccount(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1ServiceAccount> (response, "response is V1ServiceAccount");
        }
        
        /// <summary>
        /// Test PatchNamespacedServiceStatus
        /// </summary>
        [Test]
        public void PatchNamespacedServiceStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNamespacedServiceStatus(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1Service> (response, "response is V1Service");
        }
        
        /// <summary>
        /// Test PatchNode
        /// </summary>
        [Test]
        public void PatchNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNode(name, body, pretty);
            //Assert.IsInstanceOf<V1Node> (response, "response is V1Node");
        }
        
        /// <summary>
        /// Test PatchNodeStatus
        /// </summary>
        [Test]
        public void PatchNodeStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchNodeStatus(name, body, pretty);
            //Assert.IsInstanceOf<V1Node> (response, "response is V1Node");
        }
        
        /// <summary>
        /// Test PatchPersistentVolume
        /// </summary>
        [Test]
        public void PatchPersistentVolumeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchPersistentVolume(name, body, pretty);
            //Assert.IsInstanceOf<V1PersistentVolume> (response, "response is V1PersistentVolume");
        }
        
        /// <summary>
        /// Test PatchPersistentVolumeStatus
        /// </summary>
        [Test]
        public void PatchPersistentVolumeStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //Object body = null;
            //string pretty = null;
            //var response = instance.PatchPersistentVolumeStatus(name, body, pretty);
            //Assert.IsInstanceOf<V1PersistentVolume> (response, "response is V1PersistentVolume");
        }
        
        /// <summary>
        /// Test ProxyDELETENamespacedPod
        /// </summary>
        [Test]
        public void ProxyDELETENamespacedPodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //var response = instance.ProxyDELETENamespacedPod(name, _namespace);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyDELETENamespacedPodWithPath
        /// </summary>
        [Test]
        public void ProxyDELETENamespacedPodWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ProxyDELETENamespacedPodWithPath(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyDELETENamespacedService
        /// </summary>
        [Test]
        public void ProxyDELETENamespacedServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //var response = instance.ProxyDELETENamespacedService(name, _namespace);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyDELETENamespacedServiceWithPath
        /// </summary>
        [Test]
        public void ProxyDELETENamespacedServiceWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ProxyDELETENamespacedServiceWithPath(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyDELETENode
        /// </summary>
        [Test]
        public void ProxyDELETENodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.ProxyDELETENode(name);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyDELETENodeWithPath
        /// </summary>
        [Test]
        public void ProxyDELETENodeWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string path = null;
            //var response = instance.ProxyDELETENodeWithPath(name, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyGETNamespacedPod
        /// </summary>
        [Test]
        public void ProxyGETNamespacedPodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //var response = instance.ProxyGETNamespacedPod(name, _namespace);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyGETNamespacedPodWithPath
        /// </summary>
        [Test]
        public void ProxyGETNamespacedPodWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ProxyGETNamespacedPodWithPath(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyGETNamespacedService
        /// </summary>
        [Test]
        public void ProxyGETNamespacedServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //var response = instance.ProxyGETNamespacedService(name, _namespace);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyGETNamespacedServiceWithPath
        /// </summary>
        [Test]
        public void ProxyGETNamespacedServiceWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ProxyGETNamespacedServiceWithPath(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyGETNode
        /// </summary>
        [Test]
        public void ProxyGETNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.ProxyGETNode(name);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyGETNodeWithPath
        /// </summary>
        [Test]
        public void ProxyGETNodeWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string path = null;
            //var response = instance.ProxyGETNodeWithPath(name, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyHEADNamespacedPod
        /// </summary>
        [Test]
        public void ProxyHEADNamespacedPodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //var response = instance.ProxyHEADNamespacedPod(name, _namespace);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyHEADNamespacedPodWithPath
        /// </summary>
        [Test]
        public void ProxyHEADNamespacedPodWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ProxyHEADNamespacedPodWithPath(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyHEADNamespacedService
        /// </summary>
        [Test]
        public void ProxyHEADNamespacedServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //var response = instance.ProxyHEADNamespacedService(name, _namespace);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyHEADNamespacedServiceWithPath
        /// </summary>
        [Test]
        public void ProxyHEADNamespacedServiceWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ProxyHEADNamespacedServiceWithPath(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyHEADNode
        /// </summary>
        [Test]
        public void ProxyHEADNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.ProxyHEADNode(name);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyHEADNodeWithPath
        /// </summary>
        [Test]
        public void ProxyHEADNodeWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string path = null;
            //var response = instance.ProxyHEADNodeWithPath(name, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyOPTIONSNamespacedPod
        /// </summary>
        [Test]
        public void ProxyOPTIONSNamespacedPodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //var response = instance.ProxyOPTIONSNamespacedPod(name, _namespace);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyOPTIONSNamespacedPodWithPath
        /// </summary>
        [Test]
        public void ProxyOPTIONSNamespacedPodWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ProxyOPTIONSNamespacedPodWithPath(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyOPTIONSNamespacedService
        /// </summary>
        [Test]
        public void ProxyOPTIONSNamespacedServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //var response = instance.ProxyOPTIONSNamespacedService(name, _namespace);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyOPTIONSNamespacedServiceWithPath
        /// </summary>
        [Test]
        public void ProxyOPTIONSNamespacedServiceWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ProxyOPTIONSNamespacedServiceWithPath(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyOPTIONSNode
        /// </summary>
        [Test]
        public void ProxyOPTIONSNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.ProxyOPTIONSNode(name);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyOPTIONSNodeWithPath
        /// </summary>
        [Test]
        public void ProxyOPTIONSNodeWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string path = null;
            //var response = instance.ProxyOPTIONSNodeWithPath(name, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyPATCHNamespacedPod
        /// </summary>
        [Test]
        public void ProxyPATCHNamespacedPodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //var response = instance.ProxyPATCHNamespacedPod(name, _namespace);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyPATCHNamespacedPodWithPath
        /// </summary>
        [Test]
        public void ProxyPATCHNamespacedPodWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ProxyPATCHNamespacedPodWithPath(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyPATCHNamespacedService
        /// </summary>
        [Test]
        public void ProxyPATCHNamespacedServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //var response = instance.ProxyPATCHNamespacedService(name, _namespace);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyPATCHNamespacedServiceWithPath
        /// </summary>
        [Test]
        public void ProxyPATCHNamespacedServiceWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ProxyPATCHNamespacedServiceWithPath(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyPATCHNode
        /// </summary>
        [Test]
        public void ProxyPATCHNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.ProxyPATCHNode(name);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyPATCHNodeWithPath
        /// </summary>
        [Test]
        public void ProxyPATCHNodeWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string path = null;
            //var response = instance.ProxyPATCHNodeWithPath(name, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyPOSTNamespacedPod
        /// </summary>
        [Test]
        public void ProxyPOSTNamespacedPodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //var response = instance.ProxyPOSTNamespacedPod(name, _namespace);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyPOSTNamespacedPodWithPath
        /// </summary>
        [Test]
        public void ProxyPOSTNamespacedPodWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ProxyPOSTNamespacedPodWithPath(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyPOSTNamespacedService
        /// </summary>
        [Test]
        public void ProxyPOSTNamespacedServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //var response = instance.ProxyPOSTNamespacedService(name, _namespace);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyPOSTNamespacedServiceWithPath
        /// </summary>
        [Test]
        public void ProxyPOSTNamespacedServiceWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ProxyPOSTNamespacedServiceWithPath(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyPOSTNode
        /// </summary>
        [Test]
        public void ProxyPOSTNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.ProxyPOSTNode(name);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyPOSTNodeWithPath
        /// </summary>
        [Test]
        public void ProxyPOSTNodeWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string path = null;
            //var response = instance.ProxyPOSTNodeWithPath(name, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyPUTNamespacedPod
        /// </summary>
        [Test]
        public void ProxyPUTNamespacedPodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //var response = instance.ProxyPUTNamespacedPod(name, _namespace);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyPUTNamespacedPodWithPath
        /// </summary>
        [Test]
        public void ProxyPUTNamespacedPodWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ProxyPUTNamespacedPodWithPath(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyPUTNamespacedService
        /// </summary>
        [Test]
        public void ProxyPUTNamespacedServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //var response = instance.ProxyPUTNamespacedService(name, _namespace);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyPUTNamespacedServiceWithPath
        /// </summary>
        [Test]
        public void ProxyPUTNamespacedServiceWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string path = null;
            //var response = instance.ProxyPUTNamespacedServiceWithPath(name, _namespace, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyPUTNode
        /// </summary>
        [Test]
        public void ProxyPUTNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //var response = instance.ProxyPUTNode(name);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ProxyPUTNodeWithPath
        /// </summary>
        [Test]
        public void ProxyPUTNodeWithPathTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string path = null;
            //var response = instance.ProxyPUTNodeWithPath(name, path);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ReadComponentStatus
        /// </summary>
        [Test]
        public void ReadComponentStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string pretty = null;
            //var response = instance.ReadComponentStatus(name, pretty);
            //Assert.IsInstanceOf<V1ComponentStatus> (response, "response is V1ComponentStatus");
        }
        
        /// <summary>
        /// Test ReadNamespace
        /// </summary>
        [Test]
        public void ReadNamespaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string pretty = null;
            //bool? exact = null;
            //bool? export = null;
            //var response = instance.ReadNamespace(name, pretty, exact, export);
            //Assert.IsInstanceOf<V1Namespace> (response, "response is V1Namespace");
        }
        
        /// <summary>
        /// Test ReadNamespaceStatus
        /// </summary>
        [Test]
        public void ReadNamespaceStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string pretty = null;
            //var response = instance.ReadNamespaceStatus(name, pretty);
            //Assert.IsInstanceOf<V1Namespace> (response, "response is V1Namespace");
        }
        
        /// <summary>
        /// Test ReadNamespacedConfigMap
        /// </summary>
        [Test]
        public void ReadNamespacedConfigMapTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //bool? exact = null;
            //bool? export = null;
            //var response = instance.ReadNamespacedConfigMap(name, _namespace, pretty, exact, export);
            //Assert.IsInstanceOf<V1ConfigMap> (response, "response is V1ConfigMap");
        }
        
        /// <summary>
        /// Test ReadNamespacedEndpoints
        /// </summary>
        [Test]
        public void ReadNamespacedEndpointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //bool? exact = null;
            //bool? export = null;
            //var response = instance.ReadNamespacedEndpoints(name, _namespace, pretty, exact, export);
            //Assert.IsInstanceOf<V1Endpoints> (response, "response is V1Endpoints");
        }
        
        /// <summary>
        /// Test ReadNamespacedEvent
        /// </summary>
        [Test]
        public void ReadNamespacedEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //bool? exact = null;
            //bool? export = null;
            //var response = instance.ReadNamespacedEvent(name, _namespace, pretty, exact, export);
            //Assert.IsInstanceOf<V1Event> (response, "response is V1Event");
        }
        
        /// <summary>
        /// Test ReadNamespacedLimitRange
        /// </summary>
        [Test]
        public void ReadNamespacedLimitRangeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //bool? exact = null;
            //bool? export = null;
            //var response = instance.ReadNamespacedLimitRange(name, _namespace, pretty, exact, export);
            //Assert.IsInstanceOf<V1LimitRange> (response, "response is V1LimitRange");
        }
        
        /// <summary>
        /// Test ReadNamespacedPersistentVolumeClaim
        /// </summary>
        [Test]
        public void ReadNamespacedPersistentVolumeClaimTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //bool? exact = null;
            //bool? export = null;
            //var response = instance.ReadNamespacedPersistentVolumeClaim(name, _namespace, pretty, exact, export);
            //Assert.IsInstanceOf<V1PersistentVolumeClaim> (response, "response is V1PersistentVolumeClaim");
        }
        
        /// <summary>
        /// Test ReadNamespacedPersistentVolumeClaimStatus
        /// </summary>
        [Test]
        public void ReadNamespacedPersistentVolumeClaimStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //var response = instance.ReadNamespacedPersistentVolumeClaimStatus(name, _namespace, pretty);
            //Assert.IsInstanceOf<V1PersistentVolumeClaim> (response, "response is V1PersistentVolumeClaim");
        }
        
        /// <summary>
        /// Test ReadNamespacedPod
        /// </summary>
        [Test]
        public void ReadNamespacedPodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //bool? exact = null;
            //bool? export = null;
            //var response = instance.ReadNamespacedPod(name, _namespace, pretty, exact, export);
            //Assert.IsInstanceOf<V1Pod> (response, "response is V1Pod");
        }
        
        /// <summary>
        /// Test ReadNamespacedPodLog
        /// </summary>
        [Test]
        public void ReadNamespacedPodLogTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string container = null;
            //bool? follow = null;
            //int? limitBytes = null;
            //string pretty = null;
            //bool? previous = null;
            //int? sinceSeconds = null;
            //int? tailLines = null;
            //bool? timestamps = null;
            //var response = instance.ReadNamespacedPodLog(name, _namespace, container, follow, limitBytes, pretty, previous, sinceSeconds, tailLines, timestamps);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ReadNamespacedPodStatus
        /// </summary>
        [Test]
        public void ReadNamespacedPodStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //var response = instance.ReadNamespacedPodStatus(name, _namespace, pretty);
            //Assert.IsInstanceOf<V1Pod> (response, "response is V1Pod");
        }
        
        /// <summary>
        /// Test ReadNamespacedPodTemplate
        /// </summary>
        [Test]
        public void ReadNamespacedPodTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //bool? exact = null;
            //bool? export = null;
            //var response = instance.ReadNamespacedPodTemplate(name, _namespace, pretty, exact, export);
            //Assert.IsInstanceOf<V1PodTemplate> (response, "response is V1PodTemplate");
        }
        
        /// <summary>
        /// Test ReadNamespacedReplicationController
        /// </summary>
        [Test]
        public void ReadNamespacedReplicationControllerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //bool? exact = null;
            //bool? export = null;
            //var response = instance.ReadNamespacedReplicationController(name, _namespace, pretty, exact, export);
            //Assert.IsInstanceOf<V1ReplicationController> (response, "response is V1ReplicationController");
        }
        
        /// <summary>
        /// Test ReadNamespacedReplicationControllerScale
        /// </summary>
        [Test]
        public void ReadNamespacedReplicationControllerScaleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //var response = instance.ReadNamespacedReplicationControllerScale(name, _namespace, pretty);
            //Assert.IsInstanceOf<V1Scale> (response, "response is V1Scale");
        }
        
        /// <summary>
        /// Test ReadNamespacedReplicationControllerStatus
        /// </summary>
        [Test]
        public void ReadNamespacedReplicationControllerStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //var response = instance.ReadNamespacedReplicationControllerStatus(name, _namespace, pretty);
            //Assert.IsInstanceOf<V1ReplicationController> (response, "response is V1ReplicationController");
        }
        
        /// <summary>
        /// Test ReadNamespacedResourceQuota
        /// </summary>
        [Test]
        public void ReadNamespacedResourceQuotaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //bool? exact = null;
            //bool? export = null;
            //var response = instance.ReadNamespacedResourceQuota(name, _namespace, pretty, exact, export);
            //Assert.IsInstanceOf<V1ResourceQuota> (response, "response is V1ResourceQuota");
        }
        
        /// <summary>
        /// Test ReadNamespacedResourceQuotaStatus
        /// </summary>
        [Test]
        public void ReadNamespacedResourceQuotaStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //var response = instance.ReadNamespacedResourceQuotaStatus(name, _namespace, pretty);
            //Assert.IsInstanceOf<V1ResourceQuota> (response, "response is V1ResourceQuota");
        }
        
        /// <summary>
        /// Test ReadNamespacedSecret
        /// </summary>
        [Test]
        public void ReadNamespacedSecretTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //bool? exact = null;
            //bool? export = null;
            //var response = instance.ReadNamespacedSecret(name, _namespace, pretty, exact, export);
            //Assert.IsInstanceOf<V1Secret> (response, "response is V1Secret");
        }
        
        /// <summary>
        /// Test ReadNamespacedService
        /// </summary>
        [Test]
        public void ReadNamespacedServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //bool? exact = null;
            //bool? export = null;
            //var response = instance.ReadNamespacedService(name, _namespace, pretty, exact, export);
            //Assert.IsInstanceOf<V1Service> (response, "response is V1Service");
        }
        
        /// <summary>
        /// Test ReadNamespacedServiceAccount
        /// </summary>
        [Test]
        public void ReadNamespacedServiceAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //bool? exact = null;
            //bool? export = null;
            //var response = instance.ReadNamespacedServiceAccount(name, _namespace, pretty, exact, export);
            //Assert.IsInstanceOf<V1ServiceAccount> (response, "response is V1ServiceAccount");
        }
        
        /// <summary>
        /// Test ReadNamespacedServiceStatus
        /// </summary>
        [Test]
        public void ReadNamespacedServiceStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //string pretty = null;
            //var response = instance.ReadNamespacedServiceStatus(name, _namespace, pretty);
            //Assert.IsInstanceOf<V1Service> (response, "response is V1Service");
        }
        
        /// <summary>
        /// Test ReadNode
        /// </summary>
        [Test]
        public void ReadNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string pretty = null;
            //bool? exact = null;
            //bool? export = null;
            //var response = instance.ReadNode(name, pretty, exact, export);
            //Assert.IsInstanceOf<V1Node> (response, "response is V1Node");
        }
        
        /// <summary>
        /// Test ReadNodeStatus
        /// </summary>
        [Test]
        public void ReadNodeStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string pretty = null;
            //var response = instance.ReadNodeStatus(name, pretty);
            //Assert.IsInstanceOf<V1Node> (response, "response is V1Node");
        }
        
        /// <summary>
        /// Test ReadPersistentVolume
        /// </summary>
        [Test]
        public void ReadPersistentVolumeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string pretty = null;
            //bool? exact = null;
            //bool? export = null;
            //var response = instance.ReadPersistentVolume(name, pretty, exact, export);
            //Assert.IsInstanceOf<V1PersistentVolume> (response, "response is V1PersistentVolume");
        }
        
        /// <summary>
        /// Test ReadPersistentVolumeStatus
        /// </summary>
        [Test]
        public void ReadPersistentVolumeStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string pretty = null;
            //var response = instance.ReadPersistentVolumeStatus(name, pretty);
            //Assert.IsInstanceOf<V1PersistentVolume> (response, "response is V1PersistentVolume");
        }
        
        /// <summary>
        /// Test ReplaceNamespace
        /// </summary>
        [Test]
        public void ReplaceNamespaceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //V1Namespace body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespace(name, body, pretty);
            //Assert.IsInstanceOf<V1Namespace> (response, "response is V1Namespace");
        }
        
        /// <summary>
        /// Test ReplaceNamespaceFinalize
        /// </summary>
        [Test]
        public void ReplaceNamespaceFinalizeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //V1Namespace body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespaceFinalize(name, body, pretty);
            //Assert.IsInstanceOf<V1Namespace> (response, "response is V1Namespace");
        }
        
        /// <summary>
        /// Test ReplaceNamespaceStatus
        /// </summary>
        [Test]
        public void ReplaceNamespaceStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //V1Namespace body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespaceStatus(name, body, pretty);
            //Assert.IsInstanceOf<V1Namespace> (response, "response is V1Namespace");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedConfigMap
        /// </summary>
        [Test]
        public void ReplaceNamespacedConfigMapTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1ConfigMap body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedConfigMap(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1ConfigMap> (response, "response is V1ConfigMap");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedEndpoints
        /// </summary>
        [Test]
        public void ReplaceNamespacedEndpointsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1Endpoints body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedEndpoints(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1Endpoints> (response, "response is V1Endpoints");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedEvent
        /// </summary>
        [Test]
        public void ReplaceNamespacedEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1Event body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedEvent(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1Event> (response, "response is V1Event");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedLimitRange
        /// </summary>
        [Test]
        public void ReplaceNamespacedLimitRangeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1LimitRange body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedLimitRange(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1LimitRange> (response, "response is V1LimitRange");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedPersistentVolumeClaim
        /// </summary>
        [Test]
        public void ReplaceNamespacedPersistentVolumeClaimTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1PersistentVolumeClaim body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedPersistentVolumeClaim(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1PersistentVolumeClaim> (response, "response is V1PersistentVolumeClaim");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedPersistentVolumeClaimStatus
        /// </summary>
        [Test]
        public void ReplaceNamespacedPersistentVolumeClaimStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1PersistentVolumeClaim body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedPersistentVolumeClaimStatus(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1PersistentVolumeClaim> (response, "response is V1PersistentVolumeClaim");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedPod
        /// </summary>
        [Test]
        public void ReplaceNamespacedPodTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1Pod body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedPod(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1Pod> (response, "response is V1Pod");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedPodStatus
        /// </summary>
        [Test]
        public void ReplaceNamespacedPodStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1Pod body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedPodStatus(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1Pod> (response, "response is V1Pod");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedPodTemplate
        /// </summary>
        [Test]
        public void ReplaceNamespacedPodTemplateTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1PodTemplate body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedPodTemplate(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1PodTemplate> (response, "response is V1PodTemplate");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedReplicationController
        /// </summary>
        [Test]
        public void ReplaceNamespacedReplicationControllerTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1ReplicationController body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedReplicationController(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1ReplicationController> (response, "response is V1ReplicationController");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedReplicationControllerScale
        /// </summary>
        [Test]
        public void ReplaceNamespacedReplicationControllerScaleTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1Scale body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedReplicationControllerScale(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1Scale> (response, "response is V1Scale");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedReplicationControllerStatus
        /// </summary>
        [Test]
        public void ReplaceNamespacedReplicationControllerStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1ReplicationController body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedReplicationControllerStatus(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1ReplicationController> (response, "response is V1ReplicationController");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedResourceQuota
        /// </summary>
        [Test]
        public void ReplaceNamespacedResourceQuotaTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1ResourceQuota body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedResourceQuota(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1ResourceQuota> (response, "response is V1ResourceQuota");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedResourceQuotaStatus
        /// </summary>
        [Test]
        public void ReplaceNamespacedResourceQuotaStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1ResourceQuota body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedResourceQuotaStatus(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1ResourceQuota> (response, "response is V1ResourceQuota");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedSecret
        /// </summary>
        [Test]
        public void ReplaceNamespacedSecretTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1Secret body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedSecret(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1Secret> (response, "response is V1Secret");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedService
        /// </summary>
        [Test]
        public void ReplaceNamespacedServiceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1Service body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedService(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1Service> (response, "response is V1Service");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedServiceAccount
        /// </summary>
        [Test]
        public void ReplaceNamespacedServiceAccountTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1ServiceAccount body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedServiceAccount(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1ServiceAccount> (response, "response is V1ServiceAccount");
        }
        
        /// <summary>
        /// Test ReplaceNamespacedServiceStatus
        /// </summary>
        [Test]
        public void ReplaceNamespacedServiceStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //string _namespace = null;
            //V1Service body = null;
            //string pretty = null;
            //var response = instance.ReplaceNamespacedServiceStatus(name, _namespace, body, pretty);
            //Assert.IsInstanceOf<V1Service> (response, "response is V1Service");
        }
        
        /// <summary>
        /// Test ReplaceNode
        /// </summary>
        [Test]
        public void ReplaceNodeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //V1Node body = null;
            //string pretty = null;
            //var response = instance.ReplaceNode(name, body, pretty);
            //Assert.IsInstanceOf<V1Node> (response, "response is V1Node");
        }
        
        /// <summary>
        /// Test ReplaceNodeStatus
        /// </summary>
        [Test]
        public void ReplaceNodeStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //V1Node body = null;
            //string pretty = null;
            //var response = instance.ReplaceNodeStatus(name, body, pretty);
            //Assert.IsInstanceOf<V1Node> (response, "response is V1Node");
        }
        
        /// <summary>
        /// Test ReplacePersistentVolume
        /// </summary>
        [Test]
        public void ReplacePersistentVolumeTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //V1PersistentVolume body = null;
            //string pretty = null;
            //var response = instance.ReplacePersistentVolume(name, body, pretty);
            //Assert.IsInstanceOf<V1PersistentVolume> (response, "response is V1PersistentVolume");
        }
        
        /// <summary>
        /// Test ReplacePersistentVolumeStatus
        /// </summary>
        [Test]
        public void ReplacePersistentVolumeStatusTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string name = null;
            //V1PersistentVolume body = null;
            //string pretty = null;
            //var response = instance.ReplacePersistentVolumeStatus(name, body, pretty);
            //Assert.IsInstanceOf<V1PersistentVolume> (response, "response is V1PersistentVolume");
        }
        
    }

}
