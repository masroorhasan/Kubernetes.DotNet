/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
    /// </summary>
    [DataContract]
    public partial class V1FlockerVolumeSource :  IEquatable<V1FlockerVolumeSource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1FlockerVolumeSource" /> class.
        /// </summary>
        /// <param name="DatasetName">Name of the dataset stored as metadata -&gt; name on the dataset for Flocker should be considered as deprecated.</param>
        /// <param name="DatasetUUID">UUID of the dataset. This is unique identifier of a Flocker dataset.</param>
        public V1FlockerVolumeSource(string DatasetName = default(string), string DatasetUUID = default(string))
        {
            this.DatasetName = DatasetName;
            this.DatasetUUID = DatasetUUID;
        }
        
        /// <summary>
        /// Name of the dataset stored as metadata -&gt; name on the dataset for Flocker should be considered as deprecated
        /// </summary>
        /// <value>Name of the dataset stored as metadata -&gt; name on the dataset for Flocker should be considered as deprecated</value>
        [DataMember(Name="datasetName", EmitDefaultValue=false)]
        public string DatasetName { get; set; }

        /// <summary>
        /// UUID of the dataset. This is unique identifier of a Flocker dataset
        /// </summary>
        /// <value>UUID of the dataset. This is unique identifier of a Flocker dataset</value>
        [DataMember(Name="datasetUUID", EmitDefaultValue=false)]
        public string DatasetUUID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1FlockerVolumeSource {\n");
            sb.Append("  DatasetName: ").Append(DatasetName).Append("\n");
            sb.Append("  DatasetUUID: ").Append(DatasetUUID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1FlockerVolumeSource);
        }

        /// <summary>
        /// Returns true if V1FlockerVolumeSource instances are equal
        /// </summary>
        /// <param name="other">Instance of V1FlockerVolumeSource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1FlockerVolumeSource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DatasetName == other.DatasetName ||
                    this.DatasetName != null &&
                    this.DatasetName.Equals(other.DatasetName)
                ) && 
                (
                    this.DatasetUUID == other.DatasetUUID ||
                    this.DatasetUUID != null &&
                    this.DatasetUUID.Equals(other.DatasetUUID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DatasetName != null)
                    hash = hash * 59 + this.DatasetName.GetHashCode();
                if (this.DatasetUUID != null)
                    hash = hash * 59 + this.DatasetUUID.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
