/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// CronJobStatus represents the current state of a cron job.
    /// </summary>
    [DataContract]
    public partial class V2alpha1CronJobStatus :  IEquatable<V2alpha1CronJobStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V2alpha1CronJobStatus" /> class.
        /// </summary>
        /// <param name="Active">A list of pointers to currently running jobs..</param>
        /// <param name="LastScheduleTime">Information when was the last time the job was successfully scheduled..</param>
        public V2alpha1CronJobStatus(List<V1ObjectReference> Active = default(List<V1ObjectReference>), DateTime? LastScheduleTime = default(DateTime?))
        {
            this.Active = Active;
            this.LastScheduleTime = LastScheduleTime;
        }
        
        /// <summary>
        /// A list of pointers to currently running jobs.
        /// </summary>
        /// <value>A list of pointers to currently running jobs.</value>
        [DataMember(Name="active", EmitDefaultValue=false)]
        public List<V1ObjectReference> Active { get; set; }

        /// <summary>
        /// Information when was the last time the job was successfully scheduled.
        /// </summary>
        /// <value>Information when was the last time the job was successfully scheduled.</value>
        [DataMember(Name="lastScheduleTime", EmitDefaultValue=false)]
        public DateTime? LastScheduleTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V2alpha1CronJobStatus {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  LastScheduleTime: ").Append(LastScheduleTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V2alpha1CronJobStatus);
        }

        /// <summary>
        /// Returns true if V2alpha1CronJobStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of V2alpha1CronJobStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V2alpha1CronJobStatus other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Active == other.Active ||
                    this.Active != null &&
                    this.Active.SequenceEqual(other.Active)
                ) && 
                (
                    this.LastScheduleTime == other.LastScheduleTime ||
                    this.LastScheduleTime != null &&
                    this.LastScheduleTime.Equals(other.LastScheduleTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Active != null)
                    hash = hash * 59 + this.Active.GetHashCode();
                if (this.LastScheduleTime != null)
                    hash = hash * 59 + this.LastScheduleTime.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
