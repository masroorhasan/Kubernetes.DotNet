/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// DownwardAPIVolumeFile represents information to create the file containing the pod field
    /// </summary>
    [DataContract]
    public partial class V1DownwardAPIVolumeFile :  IEquatable<V1DownwardAPIVolumeFile>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1DownwardAPIVolumeFile" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1DownwardAPIVolumeFile() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1DownwardAPIVolumeFile" /> class.
        /// </summary>
        /// <param name="FieldRef">Required: Selects a field of the pod: only annotations, labels, name and namespace are supported..</param>
        /// <param name="Mode">Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set..</param>
        /// <param name="Path">Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the &#39;..&#39; path. Must be utf-8 encoded. The first item of the relative path must not start with &#39;..&#39; (required).</param>
        /// <param name="ResourceFieldRef">Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported..</param>
        public V1DownwardAPIVolumeFile(V1ObjectFieldSelector FieldRef = default(V1ObjectFieldSelector), int? Mode = default(int?), string Path = default(string), V1ResourceFieldSelector ResourceFieldRef = default(V1ResourceFieldSelector))
        {
            // to ensure "Path" is required (not null)
            if (Path == null)
            {
                throw new InvalidDataException("Path is a required property for V1DownwardAPIVolumeFile and cannot be null");
            }
            else
            {
                this.Path = Path;
            }
            this.FieldRef = FieldRef;
            this.Mode = Mode;
            this.ResourceFieldRef = ResourceFieldRef;
        }
        
        /// <summary>
        /// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
        /// </summary>
        /// <value>Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.</value>
        [DataMember(Name="fieldRef", EmitDefaultValue=false)]
        public V1ObjectFieldSelector FieldRef { get; set; }

        /// <summary>
        /// Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        /// </summary>
        /// <value>Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.</value>
        [DataMember(Name="mode", EmitDefaultValue=false)]
        public int? Mode { get; set; }

        /// <summary>
        /// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the &#39;..&#39; path. Must be utf-8 encoded. The first item of the relative path must not start with &#39;..&#39;
        /// </summary>
        /// <value>Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the &#39;..&#39; path. Must be utf-8 encoded. The first item of the relative path must not start with &#39;..&#39;</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        /// </summary>
        /// <value>Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.</value>
        [DataMember(Name="resourceFieldRef", EmitDefaultValue=false)]
        public V1ResourceFieldSelector ResourceFieldRef { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1DownwardAPIVolumeFile {\n");
            sb.Append("  FieldRef: ").Append(FieldRef).Append("\n");
            sb.Append("  Mode: ").Append(Mode).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  ResourceFieldRef: ").Append(ResourceFieldRef).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1DownwardAPIVolumeFile);
        }

        /// <summary>
        /// Returns true if V1DownwardAPIVolumeFile instances are equal
        /// </summary>
        /// <param name="other">Instance of V1DownwardAPIVolumeFile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1DownwardAPIVolumeFile other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FieldRef == other.FieldRef ||
                    this.FieldRef != null &&
                    this.FieldRef.Equals(other.FieldRef)
                ) && 
                (
                    this.Mode == other.Mode ||
                    this.Mode != null &&
                    this.Mode.Equals(other.Mode)
                ) && 
                (
                    this.Path == other.Path ||
                    this.Path != null &&
                    this.Path.Equals(other.Path)
                ) && 
                (
                    this.ResourceFieldRef == other.ResourceFieldRef ||
                    this.ResourceFieldRef != null &&
                    this.ResourceFieldRef.Equals(other.ResourceFieldRef)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FieldRef != null)
                    hash = hash * 59 + this.FieldRef.GetHashCode();
                if (this.Mode != null)
                    hash = hash * 59 + this.Mode.GetHashCode();
                if (this.Path != null)
                    hash = hash * 59 + this.Path.GetHashCode();
                if (this.ResourceFieldRef != null)
                    hash = hash * 59 + this.ResourceFieldRef.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
