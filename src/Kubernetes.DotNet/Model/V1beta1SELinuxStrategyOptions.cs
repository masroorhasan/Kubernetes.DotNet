/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// SELinux  Strategy Options defines the strategy type and any options used to create the strategy.
    /// </summary>
    [DataContract]
    public partial class V1beta1SELinuxStrategyOptions :  IEquatable<V1beta1SELinuxStrategyOptions>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1beta1SELinuxStrategyOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1beta1SELinuxStrategyOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1beta1SELinuxStrategyOptions" /> class.
        /// </summary>
        /// <param name="Rule">type is the strategy that will dictate the allowable labels that may be set. (required).</param>
        /// <param name="SeLinuxOptions">seLinuxOptions required to run as; required for MustRunAs More info: https://git.k8s.io/community/contributors/design-proposals/security_context.md.</param>
        public V1beta1SELinuxStrategyOptions(string Rule = default(string), V1SELinuxOptions SeLinuxOptions = default(V1SELinuxOptions))
        {
            // to ensure "Rule" is required (not null)
            if (Rule == null)
            {
                throw new InvalidDataException("Rule is a required property for V1beta1SELinuxStrategyOptions and cannot be null");
            }
            else
            {
                this.Rule = Rule;
            }
            this.SeLinuxOptions = SeLinuxOptions;
        }
        
        /// <summary>
        /// type is the strategy that will dictate the allowable labels that may be set.
        /// </summary>
        /// <value>type is the strategy that will dictate the allowable labels that may be set.</value>
        [DataMember(Name="rule", EmitDefaultValue=false)]
        public string Rule { get; set; }

        /// <summary>
        /// seLinuxOptions required to run as; required for MustRunAs More info: https://git.k8s.io/community/contributors/design-proposals/security_context.md
        /// </summary>
        /// <value>seLinuxOptions required to run as; required for MustRunAs More info: https://git.k8s.io/community/contributors/design-proposals/security_context.md</value>
        [DataMember(Name="seLinuxOptions", EmitDefaultValue=false)]
        public V1SELinuxOptions SeLinuxOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1beta1SELinuxStrategyOptions {\n");
            sb.Append("  Rule: ").Append(Rule).Append("\n");
            sb.Append("  SeLinuxOptions: ").Append(SeLinuxOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1beta1SELinuxStrategyOptions);
        }

        /// <summary>
        /// Returns true if V1beta1SELinuxStrategyOptions instances are equal
        /// </summary>
        /// <param name="other">Instance of V1beta1SELinuxStrategyOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1beta1SELinuxStrategyOptions other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Rule == other.Rule ||
                    this.Rule != null &&
                    this.Rule.Equals(other.Rule)
                ) && 
                (
                    this.SeLinuxOptions == other.SeLinuxOptions ||
                    this.SeLinuxOptions != null &&
                    this.SeLinuxOptions.Equals(other.SeLinuxOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Rule != null)
                    hash = hash * 59 + this.Rule.GetHashCode();
                if (this.SeLinuxOptions != null)
                    hash = hash * 59 + this.SeLinuxOptions.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
