/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// This information is immutable after the request is created. Only the Request and Usages fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.
    /// </summary>
    [DataContract]
    public partial class V1beta1CertificateSigningRequestSpec :  IEquatable<V1beta1CertificateSigningRequestSpec>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1beta1CertificateSigningRequestSpec" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1beta1CertificateSigningRequestSpec() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1beta1CertificateSigningRequestSpec" /> class.
        /// </summary>
        /// <param name="Extra">Extra information about the requesting user. See user.Info interface for details..</param>
        /// <param name="Groups">Group information about the requesting user. See user.Info interface for details..</param>
        /// <param name="Request">Base64-encoded PKCS#10 CSR data (required).</param>
        /// <param name="Uid">UID information about the requesting user. See user.Info interface for details..</param>
        /// <param name="Usages">allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12.</param>
        /// <param name="Username">Information about the requesting user. See user.Info interface for details..</param>
        public V1beta1CertificateSigningRequestSpec(Dictionary<string, List<string>> Extra = default(Dictionary<string, List<string>>), List<string> Groups = default(List<string>), byte[] Request = default(byte[]), string Uid = default(string), List<string> Usages = default(List<string>), string Username = default(string))
        {
            // to ensure "Request" is required (not null)
            if (Request == null)
            {
                throw new InvalidDataException("Request is a required property for V1beta1CertificateSigningRequestSpec and cannot be null");
            }
            else
            {
                this.Request = Request;
            }
            this.Extra = Extra;
            this.Groups = Groups;
            this.Uid = Uid;
            this.Usages = Usages;
            this.Username = Username;
        }
        
        /// <summary>
        /// Extra information about the requesting user. See user.Info interface for details.
        /// </summary>
        /// <value>Extra information about the requesting user. See user.Info interface for details.</value>
        [DataMember(Name="extra", EmitDefaultValue=false)]
        public Dictionary<string, List<string>> Extra { get; set; }

        /// <summary>
        /// Group information about the requesting user. See user.Info interface for details.
        /// </summary>
        /// <value>Group information about the requesting user. See user.Info interface for details.</value>
        [DataMember(Name="groups", EmitDefaultValue=false)]
        public List<string> Groups { get; set; }

        /// <summary>
        /// Base64-encoded PKCS#10 CSR data
        /// </summary>
        /// <value>Base64-encoded PKCS#10 CSR data</value>
        [DataMember(Name="request", EmitDefaultValue=false)]
        public byte[] Request { get; set; }

        /// <summary>
        /// UID information about the requesting user. See user.Info interface for details.
        /// </summary>
        /// <value>UID information about the requesting user. See user.Info interface for details.</value>
        [DataMember(Name="uid", EmitDefaultValue=false)]
        public string Uid { get; set; }

        /// <summary>
        /// allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12
        /// </summary>
        /// <value>allowedUsages specifies a set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3      https://tools.ietf.org/html/rfc5280#section-4.2.1.12</value>
        [DataMember(Name="usages", EmitDefaultValue=false)]
        public List<string> Usages { get; set; }

        /// <summary>
        /// Information about the requesting user. See user.Info interface for details.
        /// </summary>
        /// <value>Information about the requesting user. See user.Info interface for details.</value>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1beta1CertificateSigningRequestSpec {\n");
            sb.Append("  Extra: ").Append(Extra).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  Request: ").Append(Request).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  Usages: ").Append(Usages).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1beta1CertificateSigningRequestSpec);
        }

        /// <summary>
        /// Returns true if V1beta1CertificateSigningRequestSpec instances are equal
        /// </summary>
        /// <param name="other">Instance of V1beta1CertificateSigningRequestSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1beta1CertificateSigningRequestSpec other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Extra == other.Extra ||
                    this.Extra != null &&
                    this.Extra.SequenceEqual(other.Extra)
                ) && 
                (
                    this.Groups == other.Groups ||
                    this.Groups != null &&
                    this.Groups.SequenceEqual(other.Groups)
                ) && 
                (
                    this.Request == other.Request ||
                    this.Request != null &&
                    this.Request.Equals(other.Request)
                ) && 
                (
                    this.Uid == other.Uid ||
                    this.Uid != null &&
                    this.Uid.Equals(other.Uid)
                ) && 
                (
                    this.Usages == other.Usages ||
                    this.Usages != null &&
                    this.Usages.SequenceEqual(other.Usages)
                ) && 
                (
                    this.Username == other.Username ||
                    this.Username != null &&
                    this.Username.Equals(other.Username)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Extra != null)
                    hash = hash * 59 + this.Extra.GetHashCode();
                if (this.Groups != null)
                    hash = hash * 59 + this.Groups.GetHashCode();
                if (this.Request != null)
                    hash = hash * 59 + this.Request.GetHashCode();
                if (this.Uid != null)
                    hash = hash * 59 + this.Uid.GetHashCode();
                if (this.Usages != null)
                    hash = hash * 59 + this.Usages.GetHashCode();
                if (this.Username != null)
                    hash = hash * 59 + this.Username.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
