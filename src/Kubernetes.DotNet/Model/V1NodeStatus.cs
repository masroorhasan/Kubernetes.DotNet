/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// NodeStatus is information about the current status of a node.
    /// </summary>
    [DataContract]
    public partial class V1NodeStatus :  IEquatable<V1NodeStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1NodeStatus" /> class.
        /// </summary>
        /// <param name="Addresses">List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses.</param>
        /// <param name="Allocatable">Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity..</param>
        /// <param name="Capacity">Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity.</param>
        /// <param name="Conditions">Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition.</param>
        /// <param name="DaemonEndpoints">Endpoints of daemons running on the Node..</param>
        /// <param name="Images">List of container images on this node.</param>
        /// <param name="NodeInfo">Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info.</param>
        /// <param name="Phase">NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated..</param>
        /// <param name="VolumesAttached">List of volumes that are attached to the node..</param>
        /// <param name="VolumesInUse">List of attachable volumes in use (mounted) by the node..</param>
        public V1NodeStatus(List<V1NodeAddress> Addresses = default(List<V1NodeAddress>), Dictionary<string, string> Allocatable = default(Dictionary<string, string>), Dictionary<string, string> Capacity = default(Dictionary<string, string>), List<V1NodeCondition> Conditions = default(List<V1NodeCondition>), V1NodeDaemonEndpoints DaemonEndpoints = default(V1NodeDaemonEndpoints), List<V1ContainerImage> Images = default(List<V1ContainerImage>), V1NodeSystemInfo NodeInfo = default(V1NodeSystemInfo), string Phase = default(string), List<V1AttachedVolume> VolumesAttached = default(List<V1AttachedVolume>), List<string> VolumesInUse = default(List<string>))
        {
            this.Addresses = Addresses;
            this.Allocatable = Allocatable;
            this.Capacity = Capacity;
            this.Conditions = Conditions;
            this.DaemonEndpoints = DaemonEndpoints;
            this.Images = Images;
            this.NodeInfo = NodeInfo;
            this.Phase = Phase;
            this.VolumesAttached = VolumesAttached;
            this.VolumesInUse = VolumesInUse;
        }
        
        /// <summary>
        /// List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses
        /// </summary>
        /// <value>List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses</value>
        [DataMember(Name="addresses", EmitDefaultValue=false)]
        public List<V1NodeAddress> Addresses { get; set; }

        /// <summary>
        /// Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
        /// </summary>
        /// <value>Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.</value>
        [DataMember(Name="allocatable", EmitDefaultValue=false)]
        public Dictionary<string, string> Allocatable { get; set; }

        /// <summary>
        /// Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
        /// </summary>
        /// <value>Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity</value>
        [DataMember(Name="capacity", EmitDefaultValue=false)]
        public Dictionary<string, string> Capacity { get; set; }

        /// <summary>
        /// Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
        /// </summary>
        /// <value>Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition</value>
        [DataMember(Name="conditions", EmitDefaultValue=false)]
        public List<V1NodeCondition> Conditions { get; set; }

        /// <summary>
        /// Endpoints of daemons running on the Node.
        /// </summary>
        /// <value>Endpoints of daemons running on the Node.</value>
        [DataMember(Name="daemonEndpoints", EmitDefaultValue=false)]
        public V1NodeDaemonEndpoints DaemonEndpoints { get; set; }

        /// <summary>
        /// List of container images on this node
        /// </summary>
        /// <value>List of container images on this node</value>
        [DataMember(Name="images", EmitDefaultValue=false)]
        public List<V1ContainerImage> Images { get; set; }

        /// <summary>
        /// Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
        /// </summary>
        /// <value>Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info</value>
        [DataMember(Name="nodeInfo", EmitDefaultValue=false)]
        public V1NodeSystemInfo NodeInfo { get; set; }

        /// <summary>
        /// NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.
        /// </summary>
        /// <value>NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.</value>
        [DataMember(Name="phase", EmitDefaultValue=false)]
        public string Phase { get; set; }

        /// <summary>
        /// List of volumes that are attached to the node.
        /// </summary>
        /// <value>List of volumes that are attached to the node.</value>
        [DataMember(Name="volumesAttached", EmitDefaultValue=false)]
        public List<V1AttachedVolume> VolumesAttached { get; set; }

        /// <summary>
        /// List of attachable volumes in use (mounted) by the node.
        /// </summary>
        /// <value>List of attachable volumes in use (mounted) by the node.</value>
        [DataMember(Name="volumesInUse", EmitDefaultValue=false)]
        public List<string> VolumesInUse { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1NodeStatus {\n");
            sb.Append("  Addresses: ").Append(Addresses).Append("\n");
            sb.Append("  Allocatable: ").Append(Allocatable).Append("\n");
            sb.Append("  Capacity: ").Append(Capacity).Append("\n");
            sb.Append("  Conditions: ").Append(Conditions).Append("\n");
            sb.Append("  DaemonEndpoints: ").Append(DaemonEndpoints).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  NodeInfo: ").Append(NodeInfo).Append("\n");
            sb.Append("  Phase: ").Append(Phase).Append("\n");
            sb.Append("  VolumesAttached: ").Append(VolumesAttached).Append("\n");
            sb.Append("  VolumesInUse: ").Append(VolumesInUse).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1NodeStatus);
        }

        /// <summary>
        /// Returns true if V1NodeStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of V1NodeStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1NodeStatus other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Addresses == other.Addresses ||
                    this.Addresses != null &&
                    this.Addresses.SequenceEqual(other.Addresses)
                ) && 
                (
                    this.Allocatable == other.Allocatable ||
                    this.Allocatable != null &&
                    this.Allocatable.SequenceEqual(other.Allocatable)
                ) && 
                (
                    this.Capacity == other.Capacity ||
                    this.Capacity != null &&
                    this.Capacity.SequenceEqual(other.Capacity)
                ) && 
                (
                    this.Conditions == other.Conditions ||
                    this.Conditions != null &&
                    this.Conditions.SequenceEqual(other.Conditions)
                ) && 
                (
                    this.DaemonEndpoints == other.DaemonEndpoints ||
                    this.DaemonEndpoints != null &&
                    this.DaemonEndpoints.Equals(other.DaemonEndpoints)
                ) && 
                (
                    this.Images == other.Images ||
                    this.Images != null &&
                    this.Images.SequenceEqual(other.Images)
                ) && 
                (
                    this.NodeInfo == other.NodeInfo ||
                    this.NodeInfo != null &&
                    this.NodeInfo.Equals(other.NodeInfo)
                ) && 
                (
                    this.Phase == other.Phase ||
                    this.Phase != null &&
                    this.Phase.Equals(other.Phase)
                ) && 
                (
                    this.VolumesAttached == other.VolumesAttached ||
                    this.VolumesAttached != null &&
                    this.VolumesAttached.SequenceEqual(other.VolumesAttached)
                ) && 
                (
                    this.VolumesInUse == other.VolumesInUse ||
                    this.VolumesInUse != null &&
                    this.VolumesInUse.SequenceEqual(other.VolumesInUse)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Addresses != null)
                    hash = hash * 59 + this.Addresses.GetHashCode();
                if (this.Allocatable != null)
                    hash = hash * 59 + this.Allocatable.GetHashCode();
                if (this.Capacity != null)
                    hash = hash * 59 + this.Capacity.GetHashCode();
                if (this.Conditions != null)
                    hash = hash * 59 + this.Conditions.GetHashCode();
                if (this.DaemonEndpoints != null)
                    hash = hash * 59 + this.DaemonEndpoints.GetHashCode();
                if (this.Images != null)
                    hash = hash * 59 + this.Images.GetHashCode();
                if (this.NodeInfo != null)
                    hash = hash * 59 + this.NodeInfo.GetHashCode();
                if (this.Phase != null)
                    hash = hash * 59 + this.Phase.GetHashCode();
                if (this.VolumesAttached != null)
                    hash = hash * 59 + this.VolumesAttached.GetHashCode();
                if (this.VolumesInUse != null)
                    hash = hash * 59 + this.VolumesInUse.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
