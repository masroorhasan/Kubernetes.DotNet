/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// The node this Taint is attached to has the effect \&quot;effect\&quot; on any pod that that does not tolerate the Taint.
    /// </summary>
    [DataContract]
    public partial class V1Taint :  IEquatable<V1Taint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1Taint" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1Taint() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1Taint" /> class.
        /// </summary>
        /// <param name="Effect">Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute. (required).</param>
        /// <param name="Key">Required. The taint key to be applied to a node. (required).</param>
        /// <param name="TimeAdded">TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints..</param>
        /// <param name="Value">Required. The taint value corresponding to the taint key..</param>
        public V1Taint(string Effect = default(string), string Key = default(string), DateTime? TimeAdded = default(DateTime?), string Value = default(string))
        {
            // to ensure "Effect" is required (not null)
            if (Effect == null)
            {
                throw new InvalidDataException("Effect is a required property for V1Taint and cannot be null");
            }
            else
            {
                this.Effect = Effect;
            }
            // to ensure "Key" is required (not null)
            if (Key == null)
            {
                throw new InvalidDataException("Key is a required property for V1Taint and cannot be null");
            }
            else
            {
                this.Key = Key;
            }
            this.TimeAdded = TimeAdded;
            this.Value = Value;
        }
        
        /// <summary>
        /// Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
        /// </summary>
        /// <value>Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.</value>
        [DataMember(Name="effect", EmitDefaultValue=false)]
        public string Effect { get; set; }

        /// <summary>
        /// Required. The taint key to be applied to a node.
        /// </summary>
        /// <value>Required. The taint key to be applied to a node.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
        /// </summary>
        /// <value>TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.</value>
        [DataMember(Name="timeAdded", EmitDefaultValue=false)]
        public DateTime? TimeAdded { get; set; }

        /// <summary>
        /// Required. The taint value corresponding to the taint key.
        /// </summary>
        /// <value>Required. The taint value corresponding to the taint key.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1Taint {\n");
            sb.Append("  Effect: ").Append(Effect).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  TimeAdded: ").Append(TimeAdded).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1Taint);
        }

        /// <summary>
        /// Returns true if V1Taint instances are equal
        /// </summary>
        /// <param name="other">Instance of V1Taint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1Taint other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Effect == other.Effect ||
                    this.Effect != null &&
                    this.Effect.Equals(other.Effect)
                ) && 
                (
                    this.Key == other.Key ||
                    this.Key != null &&
                    this.Key.Equals(other.Key)
                ) && 
                (
                    this.TimeAdded == other.TimeAdded ||
                    this.TimeAdded != null &&
                    this.TimeAdded.Equals(other.TimeAdded)
                ) && 
                (
                    this.Value == other.Value ||
                    this.Value != null &&
                    this.Value.Equals(other.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Effect != null)
                    hash = hash * 59 + this.Effect.GetHashCode();
                if (this.Key != null)
                    hash = hash * 59 + this.Key.GetHashCode();
                if (this.TimeAdded != null)
                    hash = hash * 59 + this.TimeAdded.GetHashCode();
                if (this.Value != null)
                    hash = hash * 59 + this.Value.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
