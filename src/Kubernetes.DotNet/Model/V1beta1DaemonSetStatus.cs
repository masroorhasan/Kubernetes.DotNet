/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// DaemonSetStatus represents the current status of a daemon set.
    /// </summary>
    [DataContract]
    public partial class V1beta1DaemonSetStatus :  IEquatable<V1beta1DaemonSetStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1beta1DaemonSetStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1beta1DaemonSetStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1beta1DaemonSetStatus" /> class.
        /// </summary>
        /// <param name="CollisionCount">Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision..</param>
        /// <param name="CurrentNumberScheduled">The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/ (required).</param>
        /// <param name="DesiredNumberScheduled">The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/ (required).</param>
        /// <param name="NumberAvailable">The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds).</param>
        /// <param name="NumberMisscheduled">The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/ (required).</param>
        /// <param name="NumberReady">The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready. (required).</param>
        /// <param name="NumberUnavailable">The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds).</param>
        /// <param name="ObservedGeneration">The most recent generation observed by the daemon set controller..</param>
        /// <param name="UpdatedNumberScheduled">The total number of nodes that are running updated daemon pod.</param>
        public V1beta1DaemonSetStatus(long? CollisionCount = default(long?), int? CurrentNumberScheduled = default(int?), int? DesiredNumberScheduled = default(int?), int? NumberAvailable = default(int?), int? NumberMisscheduled = default(int?), int? NumberReady = default(int?), int? NumberUnavailable = default(int?), long? ObservedGeneration = default(long?), int? UpdatedNumberScheduled = default(int?))
        {
            // to ensure "CurrentNumberScheduled" is required (not null)
            if (CurrentNumberScheduled == null)
            {
                throw new InvalidDataException("CurrentNumberScheduled is a required property for V1beta1DaemonSetStatus and cannot be null");
            }
            else
            {
                this.CurrentNumberScheduled = CurrentNumberScheduled;
            }
            // to ensure "DesiredNumberScheduled" is required (not null)
            if (DesiredNumberScheduled == null)
            {
                throw new InvalidDataException("DesiredNumberScheduled is a required property for V1beta1DaemonSetStatus and cannot be null");
            }
            else
            {
                this.DesiredNumberScheduled = DesiredNumberScheduled;
            }
            // to ensure "NumberMisscheduled" is required (not null)
            if (NumberMisscheduled == null)
            {
                throw new InvalidDataException("NumberMisscheduled is a required property for V1beta1DaemonSetStatus and cannot be null");
            }
            else
            {
                this.NumberMisscheduled = NumberMisscheduled;
            }
            // to ensure "NumberReady" is required (not null)
            if (NumberReady == null)
            {
                throw new InvalidDataException("NumberReady is a required property for V1beta1DaemonSetStatus and cannot be null");
            }
            else
            {
                this.NumberReady = NumberReady;
            }
            this.CollisionCount = CollisionCount;
            this.NumberAvailable = NumberAvailable;
            this.NumberUnavailable = NumberUnavailable;
            this.ObservedGeneration = ObservedGeneration;
            this.UpdatedNumberScheduled = UpdatedNumberScheduled;
        }
        
        /// <summary>
        /// Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.
        /// </summary>
        /// <value>Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.</value>
        [DataMember(Name="collisionCount", EmitDefaultValue=false)]
        public long? CollisionCount { get; set; }

        /// <summary>
        /// The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        /// </summary>
        /// <value>The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/</value>
        [DataMember(Name="currentNumberScheduled", EmitDefaultValue=false)]
        public int? CurrentNumberScheduled { get; set; }

        /// <summary>
        /// The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        /// </summary>
        /// <value>The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod). More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/</value>
        [DataMember(Name="desiredNumberScheduled", EmitDefaultValue=false)]
        public int? DesiredNumberScheduled { get; set; }

        /// <summary>
        /// The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)
        /// </summary>
        /// <value>The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)</value>
        [DataMember(Name="numberAvailable", EmitDefaultValue=false)]
        public int? NumberAvailable { get; set; }

        /// <summary>
        /// The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/
        /// </summary>
        /// <value>The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/</value>
        [DataMember(Name="numberMisscheduled", EmitDefaultValue=false)]
        public int? NumberMisscheduled { get; set; }

        /// <summary>
        /// The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.
        /// </summary>
        /// <value>The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.</value>
        [DataMember(Name="numberReady", EmitDefaultValue=false)]
        public int? NumberReady { get; set; }

        /// <summary>
        /// The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)
        /// </summary>
        /// <value>The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)</value>
        [DataMember(Name="numberUnavailable", EmitDefaultValue=false)]
        public int? NumberUnavailable { get; set; }

        /// <summary>
        /// The most recent generation observed by the daemon set controller.
        /// </summary>
        /// <value>The most recent generation observed by the daemon set controller.</value>
        [DataMember(Name="observedGeneration", EmitDefaultValue=false)]
        public long? ObservedGeneration { get; set; }

        /// <summary>
        /// The total number of nodes that are running updated daemon pod
        /// </summary>
        /// <value>The total number of nodes that are running updated daemon pod</value>
        [DataMember(Name="updatedNumberScheduled", EmitDefaultValue=false)]
        public int? UpdatedNumberScheduled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1beta1DaemonSetStatus {\n");
            sb.Append("  CollisionCount: ").Append(CollisionCount).Append("\n");
            sb.Append("  CurrentNumberScheduled: ").Append(CurrentNumberScheduled).Append("\n");
            sb.Append("  DesiredNumberScheduled: ").Append(DesiredNumberScheduled).Append("\n");
            sb.Append("  NumberAvailable: ").Append(NumberAvailable).Append("\n");
            sb.Append("  NumberMisscheduled: ").Append(NumberMisscheduled).Append("\n");
            sb.Append("  NumberReady: ").Append(NumberReady).Append("\n");
            sb.Append("  NumberUnavailable: ").Append(NumberUnavailable).Append("\n");
            sb.Append("  ObservedGeneration: ").Append(ObservedGeneration).Append("\n");
            sb.Append("  UpdatedNumberScheduled: ").Append(UpdatedNumberScheduled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1beta1DaemonSetStatus);
        }

        /// <summary>
        /// Returns true if V1beta1DaemonSetStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of V1beta1DaemonSetStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1beta1DaemonSetStatus other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CollisionCount == other.CollisionCount ||
                    this.CollisionCount != null &&
                    this.CollisionCount.Equals(other.CollisionCount)
                ) && 
                (
                    this.CurrentNumberScheduled == other.CurrentNumberScheduled ||
                    this.CurrentNumberScheduled != null &&
                    this.CurrentNumberScheduled.Equals(other.CurrentNumberScheduled)
                ) && 
                (
                    this.DesiredNumberScheduled == other.DesiredNumberScheduled ||
                    this.DesiredNumberScheduled != null &&
                    this.DesiredNumberScheduled.Equals(other.DesiredNumberScheduled)
                ) && 
                (
                    this.NumberAvailable == other.NumberAvailable ||
                    this.NumberAvailable != null &&
                    this.NumberAvailable.Equals(other.NumberAvailable)
                ) && 
                (
                    this.NumberMisscheduled == other.NumberMisscheduled ||
                    this.NumberMisscheduled != null &&
                    this.NumberMisscheduled.Equals(other.NumberMisscheduled)
                ) && 
                (
                    this.NumberReady == other.NumberReady ||
                    this.NumberReady != null &&
                    this.NumberReady.Equals(other.NumberReady)
                ) && 
                (
                    this.NumberUnavailable == other.NumberUnavailable ||
                    this.NumberUnavailable != null &&
                    this.NumberUnavailable.Equals(other.NumberUnavailable)
                ) && 
                (
                    this.ObservedGeneration == other.ObservedGeneration ||
                    this.ObservedGeneration != null &&
                    this.ObservedGeneration.Equals(other.ObservedGeneration)
                ) && 
                (
                    this.UpdatedNumberScheduled == other.UpdatedNumberScheduled ||
                    this.UpdatedNumberScheduled != null &&
                    this.UpdatedNumberScheduled.Equals(other.UpdatedNumberScheduled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CollisionCount != null)
                    hash = hash * 59 + this.CollisionCount.GetHashCode();
                if (this.CurrentNumberScheduled != null)
                    hash = hash * 59 + this.CurrentNumberScheduled.GetHashCode();
                if (this.DesiredNumberScheduled != null)
                    hash = hash * 59 + this.DesiredNumberScheduled.GetHashCode();
                if (this.NumberAvailable != null)
                    hash = hash * 59 + this.NumberAvailable.GetHashCode();
                if (this.NumberMisscheduled != null)
                    hash = hash * 59 + this.NumberMisscheduled.GetHashCode();
                if (this.NumberReady != null)
                    hash = hash * 59 + this.NumberReady.GetHashCode();
                if (this.NumberUnavailable != null)
                    hash = hash * 59 + this.NumberUnavailable.GetHashCode();
                if (this.ObservedGeneration != null)
                    hash = hash * 59 + this.ObservedGeneration.GetHashCode();
                if (this.UpdatedNumberScheduled != null)
                    hash = hash * 59 + this.UpdatedNumberScheduled.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
