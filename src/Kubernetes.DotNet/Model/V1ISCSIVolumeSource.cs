/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
    /// </summary>
    [DataContract]
    public partial class V1ISCSIVolumeSource :  IEquatable<V1ISCSIVolumeSource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1ISCSIVolumeSource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1ISCSIVolumeSource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1ISCSIVolumeSource" /> class.
        /// </summary>
        /// <param name="ChapAuthDiscovery">whether support iSCSI Discovery CHAP authentication.</param>
        /// <param name="ChapAuthSession">whether support iSCSI Session CHAP authentication.</param>
        /// <param name="FsType">Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. Implicitly inferred to be \&quot;ext4\&quot; if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi.</param>
        /// <param name="Iqn">Target iSCSI Qualified Name. (required).</param>
        /// <param name="IscsiInterface">Optional: Defaults to &#39;default&#39; (tcp). iSCSI interface name that uses an iSCSI transport..</param>
        /// <param name="Lun">iSCSI target lun number. (required).</param>
        /// <param name="Portals">iSCSI target portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260)..</param>
        /// <param name="_ReadOnly">ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false..</param>
        /// <param name="SecretRef">CHAP secret for iSCSI target and initiator authentication.</param>
        /// <param name="TargetPortal">iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260). (required).</param>
        public V1ISCSIVolumeSource(bool? ChapAuthDiscovery = default(bool?), bool? ChapAuthSession = default(bool?), string FsType = default(string), string Iqn = default(string), string IscsiInterface = default(string), int? Lun = default(int?), List<string> Portals = default(List<string>), bool? _ReadOnly = default(bool?), V1LocalObjectReference SecretRef = default(V1LocalObjectReference), string TargetPortal = default(string))
        {
            // to ensure "Iqn" is required (not null)
            if (Iqn == null)
            {
                throw new InvalidDataException("Iqn is a required property for V1ISCSIVolumeSource and cannot be null");
            }
            else
            {
                this.Iqn = Iqn;
            }
            // to ensure "Lun" is required (not null)
            if (Lun == null)
            {
                throw new InvalidDataException("Lun is a required property for V1ISCSIVolumeSource and cannot be null");
            }
            else
            {
                this.Lun = Lun;
            }
            // to ensure "TargetPortal" is required (not null)
            if (TargetPortal == null)
            {
                throw new InvalidDataException("TargetPortal is a required property for V1ISCSIVolumeSource and cannot be null");
            }
            else
            {
                this.TargetPortal = TargetPortal;
            }
            this.ChapAuthDiscovery = ChapAuthDiscovery;
            this.ChapAuthSession = ChapAuthSession;
            this.FsType = FsType;
            this.IscsiInterface = IscsiInterface;
            this.Portals = Portals;
            this._ReadOnly = _ReadOnly;
            this.SecretRef = SecretRef;
        }
        
        /// <summary>
        /// whether support iSCSI Discovery CHAP authentication
        /// </summary>
        /// <value>whether support iSCSI Discovery CHAP authentication</value>
        [DataMember(Name="chapAuthDiscovery", EmitDefaultValue=false)]
        public bool? ChapAuthDiscovery { get; set; }

        /// <summary>
        /// whether support iSCSI Session CHAP authentication
        /// </summary>
        /// <value>whether support iSCSI Session CHAP authentication</value>
        [DataMember(Name="chapAuthSession", EmitDefaultValue=false)]
        public bool? ChapAuthSession { get; set; }

        /// <summary>
        /// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. Implicitly inferred to be \&quot;ext4\&quot; if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
        /// </summary>
        /// <value>Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. Implicitly inferred to be \&quot;ext4\&quot; if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi</value>
        [DataMember(Name="fsType", EmitDefaultValue=false)]
        public string FsType { get; set; }

        /// <summary>
        /// Target iSCSI Qualified Name.
        /// </summary>
        /// <value>Target iSCSI Qualified Name.</value>
        [DataMember(Name="iqn", EmitDefaultValue=false)]
        public string Iqn { get; set; }

        /// <summary>
        /// Optional: Defaults to &#39;default&#39; (tcp). iSCSI interface name that uses an iSCSI transport.
        /// </summary>
        /// <value>Optional: Defaults to &#39;default&#39; (tcp). iSCSI interface name that uses an iSCSI transport.</value>
        [DataMember(Name="iscsiInterface", EmitDefaultValue=false)]
        public string IscsiInterface { get; set; }

        /// <summary>
        /// iSCSI target lun number.
        /// </summary>
        /// <value>iSCSI target lun number.</value>
        [DataMember(Name="lun", EmitDefaultValue=false)]
        public int? Lun { get; set; }

        /// <summary>
        /// iSCSI target portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        /// </summary>
        /// <value>iSCSI target portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).</value>
        [DataMember(Name="portals", EmitDefaultValue=false)]
        public List<string> Portals { get; set; }

        /// <summary>
        /// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
        /// </summary>
        /// <value>ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.</value>
        [DataMember(Name="readOnly", EmitDefaultValue=false)]
        public bool? _ReadOnly { get; set; }

        /// <summary>
        /// CHAP secret for iSCSI target and initiator authentication
        /// </summary>
        /// <value>CHAP secret for iSCSI target and initiator authentication</value>
        [DataMember(Name="secretRef", EmitDefaultValue=false)]
        public V1LocalObjectReference SecretRef { get; set; }

        /// <summary>
        /// iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
        /// </summary>
        /// <value>iSCSI target portal. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).</value>
        [DataMember(Name="targetPortal", EmitDefaultValue=false)]
        public string TargetPortal { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1ISCSIVolumeSource {\n");
            sb.Append("  ChapAuthDiscovery: ").Append(ChapAuthDiscovery).Append("\n");
            sb.Append("  ChapAuthSession: ").Append(ChapAuthSession).Append("\n");
            sb.Append("  FsType: ").Append(FsType).Append("\n");
            sb.Append("  Iqn: ").Append(Iqn).Append("\n");
            sb.Append("  IscsiInterface: ").Append(IscsiInterface).Append("\n");
            sb.Append("  Lun: ").Append(Lun).Append("\n");
            sb.Append("  Portals: ").Append(Portals).Append("\n");
            sb.Append("  _ReadOnly: ").Append(_ReadOnly).Append("\n");
            sb.Append("  SecretRef: ").Append(SecretRef).Append("\n");
            sb.Append("  TargetPortal: ").Append(TargetPortal).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1ISCSIVolumeSource);
        }

        /// <summary>
        /// Returns true if V1ISCSIVolumeSource instances are equal
        /// </summary>
        /// <param name="other">Instance of V1ISCSIVolumeSource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1ISCSIVolumeSource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ChapAuthDiscovery == other.ChapAuthDiscovery ||
                    this.ChapAuthDiscovery != null &&
                    this.ChapAuthDiscovery.Equals(other.ChapAuthDiscovery)
                ) && 
                (
                    this.ChapAuthSession == other.ChapAuthSession ||
                    this.ChapAuthSession != null &&
                    this.ChapAuthSession.Equals(other.ChapAuthSession)
                ) && 
                (
                    this.FsType == other.FsType ||
                    this.FsType != null &&
                    this.FsType.Equals(other.FsType)
                ) && 
                (
                    this.Iqn == other.Iqn ||
                    this.Iqn != null &&
                    this.Iqn.Equals(other.Iqn)
                ) && 
                (
                    this.IscsiInterface == other.IscsiInterface ||
                    this.IscsiInterface != null &&
                    this.IscsiInterface.Equals(other.IscsiInterface)
                ) && 
                (
                    this.Lun == other.Lun ||
                    this.Lun != null &&
                    this.Lun.Equals(other.Lun)
                ) && 
                (
                    this.Portals == other.Portals ||
                    this.Portals != null &&
                    this.Portals.SequenceEqual(other.Portals)
                ) && 
                (
                    this._ReadOnly == other._ReadOnly ||
                    this._ReadOnly != null &&
                    this._ReadOnly.Equals(other._ReadOnly)
                ) && 
                (
                    this.SecretRef == other.SecretRef ||
                    this.SecretRef != null &&
                    this.SecretRef.Equals(other.SecretRef)
                ) && 
                (
                    this.TargetPortal == other.TargetPortal ||
                    this.TargetPortal != null &&
                    this.TargetPortal.Equals(other.TargetPortal)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ChapAuthDiscovery != null)
                    hash = hash * 59 + this.ChapAuthDiscovery.GetHashCode();
                if (this.ChapAuthSession != null)
                    hash = hash * 59 + this.ChapAuthSession.GetHashCode();
                if (this.FsType != null)
                    hash = hash * 59 + this.FsType.GetHashCode();
                if (this.Iqn != null)
                    hash = hash * 59 + this.Iqn.GetHashCode();
                if (this.IscsiInterface != null)
                    hash = hash * 59 + this.IscsiInterface.GetHashCode();
                if (this.Lun != null)
                    hash = hash * 59 + this.Lun.GetHashCode();
                if (this.Portals != null)
                    hash = hash * 59 + this.Portals.GetHashCode();
                if (this._ReadOnly != null)
                    hash = hash * 59 + this._ReadOnly.GetHashCode();
                if (this.SecretRef != null)
                    hash = hash * 59 + this.SecretRef.GetHashCode();
                if (this.TargetPortal != null)
                    hash = hash * 59 + this.TargetPortal.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
