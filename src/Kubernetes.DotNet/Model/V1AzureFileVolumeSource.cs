/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
    /// </summary>
    [DataContract]
    public partial class V1AzureFileVolumeSource :  IEquatable<V1AzureFileVolumeSource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1AzureFileVolumeSource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1AzureFileVolumeSource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1AzureFileVolumeSource" /> class.
        /// </summary>
        /// <param name="_ReadOnly">Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts..</param>
        /// <param name="SecretName">the name of secret that contains Azure Storage Account Name and Key (required).</param>
        /// <param name="ShareName">Share Name (required).</param>
        public V1AzureFileVolumeSource(bool? _ReadOnly = default(bool?), string SecretName = default(string), string ShareName = default(string))
        {
            // to ensure "SecretName" is required (not null)
            if (SecretName == null)
            {
                throw new InvalidDataException("SecretName is a required property for V1AzureFileVolumeSource and cannot be null");
            }
            else
            {
                this.SecretName = SecretName;
            }
            // to ensure "ShareName" is required (not null)
            if (ShareName == null)
            {
                throw new InvalidDataException("ShareName is a required property for V1AzureFileVolumeSource and cannot be null");
            }
            else
            {
                this.ShareName = ShareName;
            }
            this._ReadOnly = _ReadOnly;
        }
        
        /// <summary>
        /// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        /// </summary>
        /// <value>Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.</value>
        [DataMember(Name="readOnly", EmitDefaultValue=false)]
        public bool? _ReadOnly { get; set; }

        /// <summary>
        /// the name of secret that contains Azure Storage Account Name and Key
        /// </summary>
        /// <value>the name of secret that contains Azure Storage Account Name and Key</value>
        [DataMember(Name="secretName", EmitDefaultValue=false)]
        public string SecretName { get; set; }

        /// <summary>
        /// Share Name
        /// </summary>
        /// <value>Share Name</value>
        [DataMember(Name="shareName", EmitDefaultValue=false)]
        public string ShareName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1AzureFileVolumeSource {\n");
            sb.Append("  _ReadOnly: ").Append(_ReadOnly).Append("\n");
            sb.Append("  SecretName: ").Append(SecretName).Append("\n");
            sb.Append("  ShareName: ").Append(ShareName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1AzureFileVolumeSource);
        }

        /// <summary>
        /// Returns true if V1AzureFileVolumeSource instances are equal
        /// </summary>
        /// <param name="other">Instance of V1AzureFileVolumeSource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1AzureFileVolumeSource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this._ReadOnly == other._ReadOnly ||
                    this._ReadOnly != null &&
                    this._ReadOnly.Equals(other._ReadOnly)
                ) && 
                (
                    this.SecretName == other.SecretName ||
                    this.SecretName != null &&
                    this.SecretName.Equals(other.SecretName)
                ) && 
                (
                    this.ShareName == other.ShareName ||
                    this.ShareName != null &&
                    this.ShareName.Equals(other.ShareName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this._ReadOnly != null)
                    hash = hash * 59 + this._ReadOnly.GetHashCode();
                if (this.SecretName != null)
                    hash = hash * 59 + this.SecretName.GetHashCode();
                if (this.ShareName != null)
                    hash = hash * 59 + this.ShareName.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
