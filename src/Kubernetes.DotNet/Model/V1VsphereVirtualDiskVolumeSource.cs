/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// Represents a vSphere volume resource.
    /// </summary>
    [DataContract]
    public partial class V1VsphereVirtualDiskVolumeSource :  IEquatable<V1VsphereVirtualDiskVolumeSource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1VsphereVirtualDiskVolumeSource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1VsphereVirtualDiskVolumeSource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1VsphereVirtualDiskVolumeSource" /> class.
        /// </summary>
        /// <param name="FsType">Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. Implicitly inferred to be \&quot;ext4\&quot; if unspecified..</param>
        /// <param name="StoragePolicyID">Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName..</param>
        /// <param name="StoragePolicyName">Storage Policy Based Management (SPBM) profile name..</param>
        /// <param name="VolumePath">Path that identifies vSphere volume vmdk (required).</param>
        public V1VsphereVirtualDiskVolumeSource(string FsType = default(string), string StoragePolicyID = default(string), string StoragePolicyName = default(string), string VolumePath = default(string))
        {
            // to ensure "VolumePath" is required (not null)
            if (VolumePath == null)
            {
                throw new InvalidDataException("VolumePath is a required property for V1VsphereVirtualDiskVolumeSource and cannot be null");
            }
            else
            {
                this.VolumePath = VolumePath;
            }
            this.FsType = FsType;
            this.StoragePolicyID = StoragePolicyID;
            this.StoragePolicyName = StoragePolicyName;
        }
        
        /// <summary>
        /// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. Implicitly inferred to be \&quot;ext4\&quot; if unspecified.
        /// </summary>
        /// <value>Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. Implicitly inferred to be \&quot;ext4\&quot; if unspecified.</value>
        [DataMember(Name="fsType", EmitDefaultValue=false)]
        public string FsType { get; set; }

        /// <summary>
        /// Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
        /// </summary>
        /// <value>Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.</value>
        [DataMember(Name="storagePolicyID", EmitDefaultValue=false)]
        public string StoragePolicyID { get; set; }

        /// <summary>
        /// Storage Policy Based Management (SPBM) profile name.
        /// </summary>
        /// <value>Storage Policy Based Management (SPBM) profile name.</value>
        [DataMember(Name="storagePolicyName", EmitDefaultValue=false)]
        public string StoragePolicyName { get; set; }

        /// <summary>
        /// Path that identifies vSphere volume vmdk
        /// </summary>
        /// <value>Path that identifies vSphere volume vmdk</value>
        [DataMember(Name="volumePath", EmitDefaultValue=false)]
        public string VolumePath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1VsphereVirtualDiskVolumeSource {\n");
            sb.Append("  FsType: ").Append(FsType).Append("\n");
            sb.Append("  StoragePolicyID: ").Append(StoragePolicyID).Append("\n");
            sb.Append("  StoragePolicyName: ").Append(StoragePolicyName).Append("\n");
            sb.Append("  VolumePath: ").Append(VolumePath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1VsphereVirtualDiskVolumeSource);
        }

        /// <summary>
        /// Returns true if V1VsphereVirtualDiskVolumeSource instances are equal
        /// </summary>
        /// <param name="other">Instance of V1VsphereVirtualDiskVolumeSource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1VsphereVirtualDiskVolumeSource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FsType == other.FsType ||
                    this.FsType != null &&
                    this.FsType.Equals(other.FsType)
                ) && 
                (
                    this.StoragePolicyID == other.StoragePolicyID ||
                    this.StoragePolicyID != null &&
                    this.StoragePolicyID.Equals(other.StoragePolicyID)
                ) && 
                (
                    this.StoragePolicyName == other.StoragePolicyName ||
                    this.StoragePolicyName != null &&
                    this.StoragePolicyName.Equals(other.StoragePolicyName)
                ) && 
                (
                    this.VolumePath == other.VolumePath ||
                    this.VolumePath != null &&
                    this.VolumePath.Equals(other.VolumePath)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FsType != null)
                    hash = hash * 59 + this.FsType.GetHashCode();
                if (this.StoragePolicyID != null)
                    hash = hash * 59 + this.StoragePolicyID.GetHashCode();
                if (this.StoragePolicyName != null)
                    hash = hash * 59 + this.StoragePolicyName.GetHashCode();
                if (this.VolumePath != null)
                    hash = hash * 59 + this.VolumePath.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
