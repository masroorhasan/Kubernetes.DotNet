/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// ResourceAttributes includes the authorization attributes available for resource requests to the Authorizer interface
    /// </summary>
    [DataContract]
    public partial class V1ResourceAttributes :  IEquatable<V1ResourceAttributes>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1ResourceAttributes" /> class.
        /// </summary>
        /// <param name="Group">Group is the API Group of the Resource.  \&quot;*\&quot; means all..</param>
        /// <param name="Name">Name is the name of the resource being requested for a \&quot;get\&quot; or deleted for a \&quot;delete\&quot;. \&quot;\&quot; (empty) means all..</param>
        /// <param name="_Namespace">Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \&quot;\&quot; (empty) is defaulted for LocalSubjectAccessReviews \&quot;\&quot; (empty) is empty for cluster-scoped resources \&quot;\&quot; (empty) means \&quot;all\&quot; for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview.</param>
        /// <param name="Resource">Resource is one of the existing resource types.  \&quot;*\&quot; means all..</param>
        /// <param name="Subresource">Subresource is one of the existing resource types.  \&quot;\&quot; means none..</param>
        /// <param name="Verb">Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \&quot;*\&quot; means all..</param>
        /// <param name="Version">Version is the API Version of the Resource.  \&quot;*\&quot; means all..</param>
        public V1ResourceAttributes(string Group = default(string), string Name = default(string), string _Namespace = default(string), string Resource = default(string), string Subresource = default(string), string Verb = default(string), string Version = default(string))
        {
            this.Group = Group;
            this.Name = Name;
            this._Namespace = _Namespace;
            this.Resource = Resource;
            this.Subresource = Subresource;
            this.Verb = Verb;
            this.Version = Version;
        }
        
        /// <summary>
        /// Group is the API Group of the Resource.  \&quot;*\&quot; means all.
        /// </summary>
        /// <value>Group is the API Group of the Resource.  \&quot;*\&quot; means all.</value>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public string Group { get; set; }

        /// <summary>
        /// Name is the name of the resource being requested for a \&quot;get\&quot; or deleted for a \&quot;delete\&quot;. \&quot;\&quot; (empty) means all.
        /// </summary>
        /// <value>Name is the name of the resource being requested for a \&quot;get\&quot; or deleted for a \&quot;delete\&quot;. \&quot;\&quot; (empty) means all.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \&quot;\&quot; (empty) is defaulted for LocalSubjectAccessReviews \&quot;\&quot; (empty) is empty for cluster-scoped resources \&quot;\&quot; (empty) means \&quot;all\&quot; for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview
        /// </summary>
        /// <value>Namespace is the namespace of the action being requested.  Currently, there is no distinction between no namespace and all namespaces \&quot;\&quot; (empty) is defaulted for LocalSubjectAccessReviews \&quot;\&quot; (empty) is empty for cluster-scoped resources \&quot;\&quot; (empty) means \&quot;all\&quot; for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview</value>
        [DataMember(Name="namespace", EmitDefaultValue=false)]
        public string _Namespace { get; set; }

        /// <summary>
        /// Resource is one of the existing resource types.  \&quot;*\&quot; means all.
        /// </summary>
        /// <value>Resource is one of the existing resource types.  \&quot;*\&quot; means all.</value>
        [DataMember(Name="resource", EmitDefaultValue=false)]
        public string Resource { get; set; }

        /// <summary>
        /// Subresource is one of the existing resource types.  \&quot;\&quot; means none.
        /// </summary>
        /// <value>Subresource is one of the existing resource types.  \&quot;\&quot; means none.</value>
        [DataMember(Name="subresource", EmitDefaultValue=false)]
        public string Subresource { get; set; }

        /// <summary>
        /// Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \&quot;*\&quot; means all.
        /// </summary>
        /// <value>Verb is a kubernetes resource API verb, like: get, list, watch, create, update, delete, proxy.  \&quot;*\&quot; means all.</value>
        [DataMember(Name="verb", EmitDefaultValue=false)]
        public string Verb { get; set; }

        /// <summary>
        /// Version is the API Version of the Resource.  \&quot;*\&quot; means all.
        /// </summary>
        /// <value>Version is the API Version of the Resource.  \&quot;*\&quot; means all.</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1ResourceAttributes {\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  _Namespace: ").Append(_Namespace).Append("\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("  Subresource: ").Append(Subresource).Append("\n");
            sb.Append("  Verb: ").Append(Verb).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1ResourceAttributes);
        }

        /// <summary>
        /// Returns true if V1ResourceAttributes instances are equal
        /// </summary>
        /// <param name="other">Instance of V1ResourceAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1ResourceAttributes other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Group == other.Group ||
                    this.Group != null &&
                    this.Group.Equals(other.Group)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this._Namespace == other._Namespace ||
                    this._Namespace != null &&
                    this._Namespace.Equals(other._Namespace)
                ) && 
                (
                    this.Resource == other.Resource ||
                    this.Resource != null &&
                    this.Resource.Equals(other.Resource)
                ) && 
                (
                    this.Subresource == other.Subresource ||
                    this.Subresource != null &&
                    this.Subresource.Equals(other.Subresource)
                ) && 
                (
                    this.Verb == other.Verb ||
                    this.Verb != null &&
                    this.Verb.Equals(other.Verb)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Group != null)
                    hash = hash * 59 + this.Group.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this._Namespace != null)
                    hash = hash * 59 + this._Namespace.GetHashCode();
                if (this.Resource != null)
                    hash = hash * 59 + this.Resource.GetHashCode();
                if (this.Subresource != null)
                    hash = hash * 59 + this.Subresource.GetHashCode();
                if (this.Verb != null)
                    hash = hash * 59 + this.Verb.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
