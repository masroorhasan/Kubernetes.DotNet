/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, hits-per-second on an Ingress object).
    /// </summary>
    [DataContract]
    public partial class V2alpha1ObjectMetricSource :  IEquatable<V2alpha1ObjectMetricSource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V2alpha1ObjectMetricSource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V2alpha1ObjectMetricSource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V2alpha1ObjectMetricSource" /> class.
        /// </summary>
        /// <param name="MetricName">metricName is the name of the metric in question. (required).</param>
        /// <param name="Target">target is the described Kubernetes object. (required).</param>
        /// <param name="TargetValue">targetValue is the target value of the metric (as a quantity). (required).</param>
        public V2alpha1ObjectMetricSource(string MetricName = default(string), V2alpha1CrossVersionObjectReference Target = default(V2alpha1CrossVersionObjectReference), string TargetValue = default(string))
        {
            // to ensure "MetricName" is required (not null)
            if (MetricName == null)
            {
                throw new InvalidDataException("MetricName is a required property for V2alpha1ObjectMetricSource and cannot be null");
            }
            else
            {
                this.MetricName = MetricName;
            }
            // to ensure "Target" is required (not null)
            if (Target == null)
            {
                throw new InvalidDataException("Target is a required property for V2alpha1ObjectMetricSource and cannot be null");
            }
            else
            {
                this.Target = Target;
            }
            // to ensure "TargetValue" is required (not null)
            if (TargetValue == null)
            {
                throw new InvalidDataException("TargetValue is a required property for V2alpha1ObjectMetricSource and cannot be null");
            }
            else
            {
                this.TargetValue = TargetValue;
            }
        }
        
        /// <summary>
        /// metricName is the name of the metric in question.
        /// </summary>
        /// <value>metricName is the name of the metric in question.</value>
        [DataMember(Name="metricName", EmitDefaultValue=false)]
        public string MetricName { get; set; }

        /// <summary>
        /// target is the described Kubernetes object.
        /// </summary>
        /// <value>target is the described Kubernetes object.</value>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public V2alpha1CrossVersionObjectReference Target { get; set; }

        /// <summary>
        /// targetValue is the target value of the metric (as a quantity).
        /// </summary>
        /// <value>targetValue is the target value of the metric (as a quantity).</value>
        [DataMember(Name="targetValue", EmitDefaultValue=false)]
        public string TargetValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V2alpha1ObjectMetricSource {\n");
            sb.Append("  MetricName: ").Append(MetricName).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  TargetValue: ").Append(TargetValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V2alpha1ObjectMetricSource);
        }

        /// <summary>
        /// Returns true if V2alpha1ObjectMetricSource instances are equal
        /// </summary>
        /// <param name="other">Instance of V2alpha1ObjectMetricSource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V2alpha1ObjectMetricSource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MetricName == other.MetricName ||
                    this.MetricName != null &&
                    this.MetricName.Equals(other.MetricName)
                ) && 
                (
                    this.Target == other.Target ||
                    this.Target != null &&
                    this.Target.Equals(other.Target)
                ) && 
                (
                    this.TargetValue == other.TargetValue ||
                    this.TargetValue != null &&
                    this.TargetValue.Equals(other.TargetValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MetricName != null)
                    hash = hash * 59 + this.MetricName.GetHashCode();
                if (this.Target != null)
                    hash = hash * 59 + this.Target.GetHashCode();
                if (this.TargetValue != null)
                    hash = hash * 59 + this.TargetValue.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
