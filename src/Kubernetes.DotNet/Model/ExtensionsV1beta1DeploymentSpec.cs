/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// DeploymentSpec is the specification of the desired behavior of the Deployment.
    /// </summary>
    [DataContract]
    public partial class ExtensionsV1beta1DeploymentSpec :  IEquatable<ExtensionsV1beta1DeploymentSpec>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtensionsV1beta1DeploymentSpec" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ExtensionsV1beta1DeploymentSpec() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ExtensionsV1beta1DeploymentSpec" /> class.
        /// </summary>
        /// <param name="MinReadySeconds">Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).</param>
        /// <param name="Paused">Indicates that the deployment is paused and will not be processed by the deployment controller..</param>
        /// <param name="ProgressDeadlineSeconds">The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Once autoRollback is implemented, the deployment controller will automatically rollback failed deployments. Note that progress will not be estimated during the time a deployment is paused. This is not set by default..</param>
        /// <param name="Replicas">Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1..</param>
        /// <param name="RevisionHistoryLimit">The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified..</param>
        /// <param name="RollbackTo">The config this deployment is rolling back to. Will be cleared after rollback is done..</param>
        /// <param name="Selector">Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment..</param>
        /// <param name="Strategy">The deployment strategy to use to replace existing pods with new ones..</param>
        /// <param name="Template">Template describes the pods that will be created. (required).</param>
        public ExtensionsV1beta1DeploymentSpec(int? MinReadySeconds = default(int?), bool? Paused = default(bool?), int? ProgressDeadlineSeconds = default(int?), int? Replicas = default(int?), int? RevisionHistoryLimit = default(int?), ExtensionsV1beta1RollbackConfig RollbackTo = default(ExtensionsV1beta1RollbackConfig), V1LabelSelector Selector = default(V1LabelSelector), ExtensionsV1beta1DeploymentStrategy Strategy = default(ExtensionsV1beta1DeploymentStrategy), V1PodTemplateSpec Template = default(V1PodTemplateSpec))
        {
            // to ensure "Template" is required (not null)
            if (Template == null)
            {
                throw new InvalidDataException("Template is a required property for ExtensionsV1beta1DeploymentSpec and cannot be null");
            }
            else
            {
                this.Template = Template;
            }
            this.MinReadySeconds = MinReadySeconds;
            this.Paused = Paused;
            this.ProgressDeadlineSeconds = ProgressDeadlineSeconds;
            this.Replicas = Replicas;
            this.RevisionHistoryLimit = RevisionHistoryLimit;
            this.RollbackTo = RollbackTo;
            this.Selector = Selector;
            this.Strategy = Strategy;
        }
        
        /// <summary>
        /// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
        /// </summary>
        /// <value>Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)</value>
        [DataMember(Name="minReadySeconds", EmitDefaultValue=false)]
        public int? MinReadySeconds { get; set; }

        /// <summary>
        /// Indicates that the deployment is paused and will not be processed by the deployment controller.
        /// </summary>
        /// <value>Indicates that the deployment is paused and will not be processed by the deployment controller.</value>
        [DataMember(Name="paused", EmitDefaultValue=false)]
        public bool? Paused { get; set; }

        /// <summary>
        /// The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Once autoRollback is implemented, the deployment controller will automatically rollback failed deployments. Note that progress will not be estimated during the time a deployment is paused. This is not set by default.
        /// </summary>
        /// <value>The maximum time in seconds for a deployment to make progress before it is considered to be failed. The deployment controller will continue to process failed deployments and a condition with a ProgressDeadlineExceeded reason will be surfaced in the deployment status. Once autoRollback is implemented, the deployment controller will automatically rollback failed deployments. Note that progress will not be estimated during the time a deployment is paused. This is not set by default.</value>
        [DataMember(Name="progressDeadlineSeconds", EmitDefaultValue=false)]
        public int? ProgressDeadlineSeconds { get; set; }

        /// <summary>
        /// Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.
        /// </summary>
        /// <value>Number of desired pods. This is a pointer to distinguish between explicit zero and not specified. Defaults to 1.</value>
        [DataMember(Name="replicas", EmitDefaultValue=false)]
        public int? Replicas { get; set; }

        /// <summary>
        /// The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified.
        /// </summary>
        /// <value>The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified.</value>
        [DataMember(Name="revisionHistoryLimit", EmitDefaultValue=false)]
        public int? RevisionHistoryLimit { get; set; }

        /// <summary>
        /// The config this deployment is rolling back to. Will be cleared after rollback is done.
        /// </summary>
        /// <value>The config this deployment is rolling back to. Will be cleared after rollback is done.</value>
        [DataMember(Name="rollbackTo", EmitDefaultValue=false)]
        public ExtensionsV1beta1RollbackConfig RollbackTo { get; set; }

        /// <summary>
        /// Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.
        /// </summary>
        /// <value>Label selector for pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this deployment.</value>
        [DataMember(Name="selector", EmitDefaultValue=false)]
        public V1LabelSelector Selector { get; set; }

        /// <summary>
        /// The deployment strategy to use to replace existing pods with new ones.
        /// </summary>
        /// <value>The deployment strategy to use to replace existing pods with new ones.</value>
        [DataMember(Name="strategy", EmitDefaultValue=false)]
        public ExtensionsV1beta1DeploymentStrategy Strategy { get; set; }

        /// <summary>
        /// Template describes the pods that will be created.
        /// </summary>
        /// <value>Template describes the pods that will be created.</value>
        [DataMember(Name="template", EmitDefaultValue=false)]
        public V1PodTemplateSpec Template { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ExtensionsV1beta1DeploymentSpec {\n");
            sb.Append("  MinReadySeconds: ").Append(MinReadySeconds).Append("\n");
            sb.Append("  Paused: ").Append(Paused).Append("\n");
            sb.Append("  ProgressDeadlineSeconds: ").Append(ProgressDeadlineSeconds).Append("\n");
            sb.Append("  Replicas: ").Append(Replicas).Append("\n");
            sb.Append("  RevisionHistoryLimit: ").Append(RevisionHistoryLimit).Append("\n");
            sb.Append("  RollbackTo: ").Append(RollbackTo).Append("\n");
            sb.Append("  Selector: ").Append(Selector).Append("\n");
            sb.Append("  Strategy: ").Append(Strategy).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ExtensionsV1beta1DeploymentSpec);
        }

        /// <summary>
        /// Returns true if ExtensionsV1beta1DeploymentSpec instances are equal
        /// </summary>
        /// <param name="other">Instance of ExtensionsV1beta1DeploymentSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ExtensionsV1beta1DeploymentSpec other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MinReadySeconds == other.MinReadySeconds ||
                    this.MinReadySeconds != null &&
                    this.MinReadySeconds.Equals(other.MinReadySeconds)
                ) && 
                (
                    this.Paused == other.Paused ||
                    this.Paused != null &&
                    this.Paused.Equals(other.Paused)
                ) && 
                (
                    this.ProgressDeadlineSeconds == other.ProgressDeadlineSeconds ||
                    this.ProgressDeadlineSeconds != null &&
                    this.ProgressDeadlineSeconds.Equals(other.ProgressDeadlineSeconds)
                ) && 
                (
                    this.Replicas == other.Replicas ||
                    this.Replicas != null &&
                    this.Replicas.Equals(other.Replicas)
                ) && 
                (
                    this.RevisionHistoryLimit == other.RevisionHistoryLimit ||
                    this.RevisionHistoryLimit != null &&
                    this.RevisionHistoryLimit.Equals(other.RevisionHistoryLimit)
                ) && 
                (
                    this.RollbackTo == other.RollbackTo ||
                    this.RollbackTo != null &&
                    this.RollbackTo.Equals(other.RollbackTo)
                ) && 
                (
                    this.Selector == other.Selector ||
                    this.Selector != null &&
                    this.Selector.Equals(other.Selector)
                ) && 
                (
                    this.Strategy == other.Strategy ||
                    this.Strategy != null &&
                    this.Strategy.Equals(other.Strategy)
                ) && 
                (
                    this.Template == other.Template ||
                    this.Template != null &&
                    this.Template.Equals(other.Template)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MinReadySeconds != null)
                    hash = hash * 59 + this.MinReadySeconds.GetHashCode();
                if (this.Paused != null)
                    hash = hash * 59 + this.Paused.GetHashCode();
                if (this.ProgressDeadlineSeconds != null)
                    hash = hash * 59 + this.ProgressDeadlineSeconds.GetHashCode();
                if (this.Replicas != null)
                    hash = hash * 59 + this.Replicas.GetHashCode();
                if (this.RevisionHistoryLimit != null)
                    hash = hash * 59 + this.RevisionHistoryLimit.GetHashCode();
                if (this.RollbackTo != null)
                    hash = hash * 59 + this.RollbackTo.GetHashCode();
                if (this.Selector != null)
                    hash = hash * 59 + this.Selector.GetHashCode();
                if (this.Strategy != null)
                    hash = hash * 59 + this.Strategy.GetHashCode();
                if (this.Template != null)
                    hash = hash * 59 + this.Template.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
