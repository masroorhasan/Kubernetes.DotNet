/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// ContainerStateTerminated is a terminated state of a container.
    /// </summary>
    [DataContract]
    public partial class V1ContainerStateTerminated :  IEquatable<V1ContainerStateTerminated>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1ContainerStateTerminated" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1ContainerStateTerminated() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1ContainerStateTerminated" /> class.
        /// </summary>
        /// <param name="ContainerID">Container&#39;s ID in the format &#39;docker://&lt;container_id&gt;&#39;.</param>
        /// <param name="ExitCode">Exit status from the last termination of the container (required).</param>
        /// <param name="FinishedAt">Time at which the container last terminated.</param>
        /// <param name="Message">Message regarding the last termination of the container.</param>
        /// <param name="Reason">(brief) reason from the last termination of the container.</param>
        /// <param name="Signal">Signal from the last termination of the container.</param>
        /// <param name="StartedAt">Time at which previous execution of the container started.</param>
        public V1ContainerStateTerminated(string ContainerID = default(string), int? ExitCode = default(int?), DateTime? FinishedAt = default(DateTime?), string Message = default(string), string Reason = default(string), int? Signal = default(int?), DateTime? StartedAt = default(DateTime?))
        {
            // to ensure "ExitCode" is required (not null)
            if (ExitCode == null)
            {
                throw new InvalidDataException("ExitCode is a required property for V1ContainerStateTerminated and cannot be null");
            }
            else
            {
                this.ExitCode = ExitCode;
            }
            this.ContainerID = ContainerID;
            this.FinishedAt = FinishedAt;
            this.Message = Message;
            this.Reason = Reason;
            this.Signal = Signal;
            this.StartedAt = StartedAt;
        }
        
        /// <summary>
        /// Container&#39;s ID in the format &#39;docker://&lt;container_id&gt;&#39;
        /// </summary>
        /// <value>Container&#39;s ID in the format &#39;docker://&lt;container_id&gt;&#39;</value>
        [DataMember(Name="containerID", EmitDefaultValue=false)]
        public string ContainerID { get; set; }

        /// <summary>
        /// Exit status from the last termination of the container
        /// </summary>
        /// <value>Exit status from the last termination of the container</value>
        [DataMember(Name="exitCode", EmitDefaultValue=false)]
        public int? ExitCode { get; set; }

        /// <summary>
        /// Time at which the container last terminated
        /// </summary>
        /// <value>Time at which the container last terminated</value>
        [DataMember(Name="finishedAt", EmitDefaultValue=false)]
        public DateTime? FinishedAt { get; set; }

        /// <summary>
        /// Message regarding the last termination of the container
        /// </summary>
        /// <value>Message regarding the last termination of the container</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// (brief) reason from the last termination of the container
        /// </summary>
        /// <value>(brief) reason from the last termination of the container</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// Signal from the last termination of the container
        /// </summary>
        /// <value>Signal from the last termination of the container</value>
        [DataMember(Name="signal", EmitDefaultValue=false)]
        public int? Signal { get; set; }

        /// <summary>
        /// Time at which previous execution of the container started
        /// </summary>
        /// <value>Time at which previous execution of the container started</value>
        [DataMember(Name="startedAt", EmitDefaultValue=false)]
        public DateTime? StartedAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1ContainerStateTerminated {\n");
            sb.Append("  ContainerID: ").Append(ContainerID).Append("\n");
            sb.Append("  ExitCode: ").Append(ExitCode).Append("\n");
            sb.Append("  FinishedAt: ").Append(FinishedAt).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Signal: ").Append(Signal).Append("\n");
            sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1ContainerStateTerminated);
        }

        /// <summary>
        /// Returns true if V1ContainerStateTerminated instances are equal
        /// </summary>
        /// <param name="other">Instance of V1ContainerStateTerminated to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1ContainerStateTerminated other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ContainerID == other.ContainerID ||
                    this.ContainerID != null &&
                    this.ContainerID.Equals(other.ContainerID)
                ) && 
                (
                    this.ExitCode == other.ExitCode ||
                    this.ExitCode != null &&
                    this.ExitCode.Equals(other.ExitCode)
                ) && 
                (
                    this.FinishedAt == other.FinishedAt ||
                    this.FinishedAt != null &&
                    this.FinishedAt.Equals(other.FinishedAt)
                ) && 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.Reason == other.Reason ||
                    this.Reason != null &&
                    this.Reason.Equals(other.Reason)
                ) && 
                (
                    this.Signal == other.Signal ||
                    this.Signal != null &&
                    this.Signal.Equals(other.Signal)
                ) && 
                (
                    this.StartedAt == other.StartedAt ||
                    this.StartedAt != null &&
                    this.StartedAt.Equals(other.StartedAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ContainerID != null)
                    hash = hash * 59 + this.ContainerID.GetHashCode();
                if (this.ExitCode != null)
                    hash = hash * 59 + this.ExitCode.GetHashCode();
                if (this.FinishedAt != null)
                    hash = hash * 59 + this.FinishedAt.GetHashCode();
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.Reason != null)
                    hash = hash * 59 + this.Reason.GetHashCode();
                if (this.Signal != null)
                    hash = hash * 59 + this.Signal.GetHashCode();
                if (this.StartedAt != null)
                    hash = hash * 59 + this.StartedAt.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
