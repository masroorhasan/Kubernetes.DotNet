/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// Volume represents a named volume in a pod that may be accessed by any container in the pod.
    /// </summary>
    [DataContract]
    public partial class V1Volume :  IEquatable<V1Volume>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1Volume" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1Volume() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1Volume" /> class.
        /// </summary>
        /// <param name="AwsElasticBlockStore">AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore.</param>
        /// <param name="AzureDisk">AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod..</param>
        /// <param name="AzureFile">AzureFile represents an Azure File Service mount on the host and bind mount to the pod..</param>
        /// <param name="Cephfs">CephFS represents a Ceph FS mount on the host that shares a pod&#39;s lifetime.</param>
        /// <param name="Cinder">Cinder represents a cinder volume attached and mounted on kubelets host machine More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md.</param>
        /// <param name="ConfigMap">ConfigMap represents a configMap that should populate this volume.</param>
        /// <param name="DownwardAPI">DownwardAPI represents downward API about the pod that should populate this volume.</param>
        /// <param name="EmptyDir">EmptyDir represents a temporary directory that shares a pod&#39;s lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir.</param>
        /// <param name="Fc">FC represents a Fibre Channel resource that is attached to a kubelet&#39;s host machine and then exposed to the pod..</param>
        /// <param name="FlexVolume">FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future..</param>
        /// <param name="Flocker">Flocker represents a Flocker volume attached to a kubelet&#39;s host machine. This depends on the Flocker control service being running.</param>
        /// <param name="GcePersistentDisk">GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk.</param>
        /// <param name="GitRepo">GitRepo represents a git repository at a particular revision..</param>
        /// <param name="Glusterfs">Glusterfs represents a Glusterfs mount on the host that shares a pod&#39;s lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md.</param>
        /// <param name="HostPath">HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath.</param>
        /// <param name="Iscsi">ISCSI represents an ISCSI Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://releases.k8s.io/HEAD/examples/volumes/iscsi/README.md.</param>
        /// <param name="Name">Volume&#39;s name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names (required).</param>
        /// <param name="Nfs">NFS represents an NFS mount on the host that shares a pod&#39;s lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs.</param>
        /// <param name="PersistentVolumeClaim">PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims.</param>
        /// <param name="PhotonPersistentDisk">PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine.</param>
        /// <param name="PortworxVolume">PortworxVolume represents a portworx volume attached and mounted on kubelets host machine.</param>
        /// <param name="Projected">Items for all in one resources secrets, configmaps, and downward API.</param>
        /// <param name="Quobyte">Quobyte represents a Quobyte mount on the host that shares a pod&#39;s lifetime.</param>
        /// <param name="Rbd">RBD represents a Rados Block Device mount on the host that shares a pod&#39;s lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md.</param>
        /// <param name="ScaleIO">ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes..</param>
        /// <param name="Secret">Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret.</param>
        /// <param name="Storageos">StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes..</param>
        /// <param name="VsphereVolume">VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine.</param>
        public V1Volume(V1AWSElasticBlockStoreVolumeSource AwsElasticBlockStore = default(V1AWSElasticBlockStoreVolumeSource), V1AzureDiskVolumeSource AzureDisk = default(V1AzureDiskVolumeSource), V1AzureFileVolumeSource AzureFile = default(V1AzureFileVolumeSource), V1CephFSVolumeSource Cephfs = default(V1CephFSVolumeSource), V1CinderVolumeSource Cinder = default(V1CinderVolumeSource), V1ConfigMapVolumeSource ConfigMap = default(V1ConfigMapVolumeSource), V1DownwardAPIVolumeSource DownwardAPI = default(V1DownwardAPIVolumeSource), V1EmptyDirVolumeSource EmptyDir = default(V1EmptyDirVolumeSource), V1FCVolumeSource Fc = default(V1FCVolumeSource), V1FlexVolumeSource FlexVolume = default(V1FlexVolumeSource), V1FlockerVolumeSource Flocker = default(V1FlockerVolumeSource), V1GCEPersistentDiskVolumeSource GcePersistentDisk = default(V1GCEPersistentDiskVolumeSource), V1GitRepoVolumeSource GitRepo = default(V1GitRepoVolumeSource), V1GlusterfsVolumeSource Glusterfs = default(V1GlusterfsVolumeSource), V1HostPathVolumeSource HostPath = default(V1HostPathVolumeSource), V1ISCSIVolumeSource Iscsi = default(V1ISCSIVolumeSource), string Name = default(string), V1NFSVolumeSource Nfs = default(V1NFSVolumeSource), V1PersistentVolumeClaimVolumeSource PersistentVolumeClaim = default(V1PersistentVolumeClaimVolumeSource), V1PhotonPersistentDiskVolumeSource PhotonPersistentDisk = default(V1PhotonPersistentDiskVolumeSource), V1PortworxVolumeSource PortworxVolume = default(V1PortworxVolumeSource), V1ProjectedVolumeSource Projected = default(V1ProjectedVolumeSource), V1QuobyteVolumeSource Quobyte = default(V1QuobyteVolumeSource), V1RBDVolumeSource Rbd = default(V1RBDVolumeSource), V1ScaleIOVolumeSource ScaleIO = default(V1ScaleIOVolumeSource), V1SecretVolumeSource Secret = default(V1SecretVolumeSource), V1StorageOSVolumeSource Storageos = default(V1StorageOSVolumeSource), V1VsphereVirtualDiskVolumeSource VsphereVolume = default(V1VsphereVirtualDiskVolumeSource))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for V1Volume and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.AwsElasticBlockStore = AwsElasticBlockStore;
            this.AzureDisk = AzureDisk;
            this.AzureFile = AzureFile;
            this.Cephfs = Cephfs;
            this.Cinder = Cinder;
            this.ConfigMap = ConfigMap;
            this.DownwardAPI = DownwardAPI;
            this.EmptyDir = EmptyDir;
            this.Fc = Fc;
            this.FlexVolume = FlexVolume;
            this.Flocker = Flocker;
            this.GcePersistentDisk = GcePersistentDisk;
            this.GitRepo = GitRepo;
            this.Glusterfs = Glusterfs;
            this.HostPath = HostPath;
            this.Iscsi = Iscsi;
            this.Nfs = Nfs;
            this.PersistentVolumeClaim = PersistentVolumeClaim;
            this.PhotonPersistentDisk = PhotonPersistentDisk;
            this.PortworxVolume = PortworxVolume;
            this.Projected = Projected;
            this.Quobyte = Quobyte;
            this.Rbd = Rbd;
            this.ScaleIO = ScaleIO;
            this.Secret = Secret;
            this.Storageos = Storageos;
            this.VsphereVolume = VsphereVolume;
        }
        
        /// <summary>
        /// AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        /// </summary>
        /// <value>AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore</value>
        [DataMember(Name="awsElasticBlockStore", EmitDefaultValue=false)]
        public V1AWSElasticBlockStoreVolumeSource AwsElasticBlockStore { get; set; }

        /// <summary>
        /// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
        /// </summary>
        /// <value>AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.</value>
        [DataMember(Name="azureDisk", EmitDefaultValue=false)]
        public V1AzureDiskVolumeSource AzureDisk { get; set; }

        /// <summary>
        /// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
        /// </summary>
        /// <value>AzureFile represents an Azure File Service mount on the host and bind mount to the pod.</value>
        [DataMember(Name="azureFile", EmitDefaultValue=false)]
        public V1AzureFileVolumeSource AzureFile { get; set; }

        /// <summary>
        /// CephFS represents a Ceph FS mount on the host that shares a pod&#39;s lifetime
        /// </summary>
        /// <value>CephFS represents a Ceph FS mount on the host that shares a pod&#39;s lifetime</value>
        [DataMember(Name="cephfs", EmitDefaultValue=false)]
        public V1CephFSVolumeSource Cephfs { get; set; }

        /// <summary>
        /// Cinder represents a cinder volume attached and mounted on kubelets host machine More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md
        /// </summary>
        /// <value>Cinder represents a cinder volume attached and mounted on kubelets host machine More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md</value>
        [DataMember(Name="cinder", EmitDefaultValue=false)]
        public V1CinderVolumeSource Cinder { get; set; }

        /// <summary>
        /// ConfigMap represents a configMap that should populate this volume
        /// </summary>
        /// <value>ConfigMap represents a configMap that should populate this volume</value>
        [DataMember(Name="configMap", EmitDefaultValue=false)]
        public V1ConfigMapVolumeSource ConfigMap { get; set; }

        /// <summary>
        /// DownwardAPI represents downward API about the pod that should populate this volume
        /// </summary>
        /// <value>DownwardAPI represents downward API about the pod that should populate this volume</value>
        [DataMember(Name="downwardAPI", EmitDefaultValue=false)]
        public V1DownwardAPIVolumeSource DownwardAPI { get; set; }

        /// <summary>
        /// EmptyDir represents a temporary directory that shares a pod&#39;s lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
        /// </summary>
        /// <value>EmptyDir represents a temporary directory that shares a pod&#39;s lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir</value>
        [DataMember(Name="emptyDir", EmitDefaultValue=false)]
        public V1EmptyDirVolumeSource EmptyDir { get; set; }

        /// <summary>
        /// FC represents a Fibre Channel resource that is attached to a kubelet&#39;s host machine and then exposed to the pod.
        /// </summary>
        /// <value>FC represents a Fibre Channel resource that is attached to a kubelet&#39;s host machine and then exposed to the pod.</value>
        [DataMember(Name="fc", EmitDefaultValue=false)]
        public V1FCVolumeSource Fc { get; set; }

        /// <summary>
        /// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
        /// </summary>
        /// <value>FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.</value>
        [DataMember(Name="flexVolume", EmitDefaultValue=false)]
        public V1FlexVolumeSource FlexVolume { get; set; }

        /// <summary>
        /// Flocker represents a Flocker volume attached to a kubelet&#39;s host machine. This depends on the Flocker control service being running
        /// </summary>
        /// <value>Flocker represents a Flocker volume attached to a kubelet&#39;s host machine. This depends on the Flocker control service being running</value>
        [DataMember(Name="flocker", EmitDefaultValue=false)]
        public V1FlockerVolumeSource Flocker { get; set; }

        /// <summary>
        /// GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        /// </summary>
        /// <value>GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk</value>
        [DataMember(Name="gcePersistentDisk", EmitDefaultValue=false)]
        public V1GCEPersistentDiskVolumeSource GcePersistentDisk { get; set; }

        /// <summary>
        /// GitRepo represents a git repository at a particular revision.
        /// </summary>
        /// <value>GitRepo represents a git repository at a particular revision.</value>
        [DataMember(Name="gitRepo", EmitDefaultValue=false)]
        public V1GitRepoVolumeSource GitRepo { get; set; }

        /// <summary>
        /// Glusterfs represents a Glusterfs mount on the host that shares a pod&#39;s lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md
        /// </summary>
        /// <value>Glusterfs represents a Glusterfs mount on the host that shares a pod&#39;s lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md</value>
        [DataMember(Name="glusterfs", EmitDefaultValue=false)]
        public V1GlusterfsVolumeSource Glusterfs { get; set; }

        /// <summary>
        /// HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        /// </summary>
        /// <value>HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath</value>
        [DataMember(Name="hostPath", EmitDefaultValue=false)]
        public V1HostPathVolumeSource HostPath { get; set; }

        /// <summary>
        /// ISCSI represents an ISCSI Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://releases.k8s.io/HEAD/examples/volumes/iscsi/README.md
        /// </summary>
        /// <value>ISCSI represents an ISCSI Disk resource that is attached to a kubelet&#39;s host machine and then exposed to the pod. More info: https://releases.k8s.io/HEAD/examples/volumes/iscsi/README.md</value>
        [DataMember(Name="iscsi", EmitDefaultValue=false)]
        public V1ISCSIVolumeSource Iscsi { get; set; }

        /// <summary>
        /// Volume&#39;s name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        /// </summary>
        /// <value>Volume&#39;s name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// NFS represents an NFS mount on the host that shares a pod&#39;s lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        /// </summary>
        /// <value>NFS represents an NFS mount on the host that shares a pod&#39;s lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs</value>
        [DataMember(Name="nfs", EmitDefaultValue=false)]
        public V1NFSVolumeSource Nfs { get; set; }

        /// <summary>
        /// PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        /// </summary>
        /// <value>PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims</value>
        [DataMember(Name="persistentVolumeClaim", EmitDefaultValue=false)]
        public V1PersistentVolumeClaimVolumeSource PersistentVolumeClaim { get; set; }

        /// <summary>
        /// PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
        /// </summary>
        /// <value>PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine</value>
        [DataMember(Name="photonPersistentDisk", EmitDefaultValue=false)]
        public V1PhotonPersistentDiskVolumeSource PhotonPersistentDisk { get; set; }

        /// <summary>
        /// PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
        /// </summary>
        /// <value>PortworxVolume represents a portworx volume attached and mounted on kubelets host machine</value>
        [DataMember(Name="portworxVolume", EmitDefaultValue=false)]
        public V1PortworxVolumeSource PortworxVolume { get; set; }

        /// <summary>
        /// Items for all in one resources secrets, configmaps, and downward API
        /// </summary>
        /// <value>Items for all in one resources secrets, configmaps, and downward API</value>
        [DataMember(Name="projected", EmitDefaultValue=false)]
        public V1ProjectedVolumeSource Projected { get; set; }

        /// <summary>
        /// Quobyte represents a Quobyte mount on the host that shares a pod&#39;s lifetime
        /// </summary>
        /// <value>Quobyte represents a Quobyte mount on the host that shares a pod&#39;s lifetime</value>
        [DataMember(Name="quobyte", EmitDefaultValue=false)]
        public V1QuobyteVolumeSource Quobyte { get; set; }

        /// <summary>
        /// RBD represents a Rados Block Device mount on the host that shares a pod&#39;s lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md
        /// </summary>
        /// <value>RBD represents a Rados Block Device mount on the host that shares a pod&#39;s lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md</value>
        [DataMember(Name="rbd", EmitDefaultValue=false)]
        public V1RBDVolumeSource Rbd { get; set; }

        /// <summary>
        /// ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
        /// </summary>
        /// <value>ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.</value>
        [DataMember(Name="scaleIO", EmitDefaultValue=false)]
        public V1ScaleIOVolumeSource ScaleIO { get; set; }

        /// <summary>
        /// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
        /// </summary>
        /// <value>Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret</value>
        [DataMember(Name="secret", EmitDefaultValue=false)]
        public V1SecretVolumeSource Secret { get; set; }

        /// <summary>
        /// StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
        /// </summary>
        /// <value>StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.</value>
        [DataMember(Name="storageos", EmitDefaultValue=false)]
        public V1StorageOSVolumeSource Storageos { get; set; }

        /// <summary>
        /// VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
        /// </summary>
        /// <value>VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine</value>
        [DataMember(Name="vsphereVolume", EmitDefaultValue=false)]
        public V1VsphereVirtualDiskVolumeSource VsphereVolume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1Volume {\n");
            sb.Append("  AwsElasticBlockStore: ").Append(AwsElasticBlockStore).Append("\n");
            sb.Append("  AzureDisk: ").Append(AzureDisk).Append("\n");
            sb.Append("  AzureFile: ").Append(AzureFile).Append("\n");
            sb.Append("  Cephfs: ").Append(Cephfs).Append("\n");
            sb.Append("  Cinder: ").Append(Cinder).Append("\n");
            sb.Append("  ConfigMap: ").Append(ConfigMap).Append("\n");
            sb.Append("  DownwardAPI: ").Append(DownwardAPI).Append("\n");
            sb.Append("  EmptyDir: ").Append(EmptyDir).Append("\n");
            sb.Append("  Fc: ").Append(Fc).Append("\n");
            sb.Append("  FlexVolume: ").Append(FlexVolume).Append("\n");
            sb.Append("  Flocker: ").Append(Flocker).Append("\n");
            sb.Append("  GcePersistentDisk: ").Append(GcePersistentDisk).Append("\n");
            sb.Append("  GitRepo: ").Append(GitRepo).Append("\n");
            sb.Append("  Glusterfs: ").Append(Glusterfs).Append("\n");
            sb.Append("  HostPath: ").Append(HostPath).Append("\n");
            sb.Append("  Iscsi: ").Append(Iscsi).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Nfs: ").Append(Nfs).Append("\n");
            sb.Append("  PersistentVolumeClaim: ").Append(PersistentVolumeClaim).Append("\n");
            sb.Append("  PhotonPersistentDisk: ").Append(PhotonPersistentDisk).Append("\n");
            sb.Append("  PortworxVolume: ").Append(PortworxVolume).Append("\n");
            sb.Append("  Projected: ").Append(Projected).Append("\n");
            sb.Append("  Quobyte: ").Append(Quobyte).Append("\n");
            sb.Append("  Rbd: ").Append(Rbd).Append("\n");
            sb.Append("  ScaleIO: ").Append(ScaleIO).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  Storageos: ").Append(Storageos).Append("\n");
            sb.Append("  VsphereVolume: ").Append(VsphereVolume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1Volume);
        }

        /// <summary>
        /// Returns true if V1Volume instances are equal
        /// </summary>
        /// <param name="other">Instance of V1Volume to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1Volume other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.AwsElasticBlockStore == other.AwsElasticBlockStore ||
                    this.AwsElasticBlockStore != null &&
                    this.AwsElasticBlockStore.Equals(other.AwsElasticBlockStore)
                ) && 
                (
                    this.AzureDisk == other.AzureDisk ||
                    this.AzureDisk != null &&
                    this.AzureDisk.Equals(other.AzureDisk)
                ) && 
                (
                    this.AzureFile == other.AzureFile ||
                    this.AzureFile != null &&
                    this.AzureFile.Equals(other.AzureFile)
                ) && 
                (
                    this.Cephfs == other.Cephfs ||
                    this.Cephfs != null &&
                    this.Cephfs.Equals(other.Cephfs)
                ) && 
                (
                    this.Cinder == other.Cinder ||
                    this.Cinder != null &&
                    this.Cinder.Equals(other.Cinder)
                ) && 
                (
                    this.ConfigMap == other.ConfigMap ||
                    this.ConfigMap != null &&
                    this.ConfigMap.Equals(other.ConfigMap)
                ) && 
                (
                    this.DownwardAPI == other.DownwardAPI ||
                    this.DownwardAPI != null &&
                    this.DownwardAPI.Equals(other.DownwardAPI)
                ) && 
                (
                    this.EmptyDir == other.EmptyDir ||
                    this.EmptyDir != null &&
                    this.EmptyDir.Equals(other.EmptyDir)
                ) && 
                (
                    this.Fc == other.Fc ||
                    this.Fc != null &&
                    this.Fc.Equals(other.Fc)
                ) && 
                (
                    this.FlexVolume == other.FlexVolume ||
                    this.FlexVolume != null &&
                    this.FlexVolume.Equals(other.FlexVolume)
                ) && 
                (
                    this.Flocker == other.Flocker ||
                    this.Flocker != null &&
                    this.Flocker.Equals(other.Flocker)
                ) && 
                (
                    this.GcePersistentDisk == other.GcePersistentDisk ||
                    this.GcePersistentDisk != null &&
                    this.GcePersistentDisk.Equals(other.GcePersistentDisk)
                ) && 
                (
                    this.GitRepo == other.GitRepo ||
                    this.GitRepo != null &&
                    this.GitRepo.Equals(other.GitRepo)
                ) && 
                (
                    this.Glusterfs == other.Glusterfs ||
                    this.Glusterfs != null &&
                    this.Glusterfs.Equals(other.Glusterfs)
                ) && 
                (
                    this.HostPath == other.HostPath ||
                    this.HostPath != null &&
                    this.HostPath.Equals(other.HostPath)
                ) && 
                (
                    this.Iscsi == other.Iscsi ||
                    this.Iscsi != null &&
                    this.Iscsi.Equals(other.Iscsi)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Nfs == other.Nfs ||
                    this.Nfs != null &&
                    this.Nfs.Equals(other.Nfs)
                ) && 
                (
                    this.PersistentVolumeClaim == other.PersistentVolumeClaim ||
                    this.PersistentVolumeClaim != null &&
                    this.PersistentVolumeClaim.Equals(other.PersistentVolumeClaim)
                ) && 
                (
                    this.PhotonPersistentDisk == other.PhotonPersistentDisk ||
                    this.PhotonPersistentDisk != null &&
                    this.PhotonPersistentDisk.Equals(other.PhotonPersistentDisk)
                ) && 
                (
                    this.PortworxVolume == other.PortworxVolume ||
                    this.PortworxVolume != null &&
                    this.PortworxVolume.Equals(other.PortworxVolume)
                ) && 
                (
                    this.Projected == other.Projected ||
                    this.Projected != null &&
                    this.Projected.Equals(other.Projected)
                ) && 
                (
                    this.Quobyte == other.Quobyte ||
                    this.Quobyte != null &&
                    this.Quobyte.Equals(other.Quobyte)
                ) && 
                (
                    this.Rbd == other.Rbd ||
                    this.Rbd != null &&
                    this.Rbd.Equals(other.Rbd)
                ) && 
                (
                    this.ScaleIO == other.ScaleIO ||
                    this.ScaleIO != null &&
                    this.ScaleIO.Equals(other.ScaleIO)
                ) && 
                (
                    this.Secret == other.Secret ||
                    this.Secret != null &&
                    this.Secret.Equals(other.Secret)
                ) && 
                (
                    this.Storageos == other.Storageos ||
                    this.Storageos != null &&
                    this.Storageos.Equals(other.Storageos)
                ) && 
                (
                    this.VsphereVolume == other.VsphereVolume ||
                    this.VsphereVolume != null &&
                    this.VsphereVolume.Equals(other.VsphereVolume)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.AwsElasticBlockStore != null)
                    hash = hash * 59 + this.AwsElasticBlockStore.GetHashCode();
                if (this.AzureDisk != null)
                    hash = hash * 59 + this.AzureDisk.GetHashCode();
                if (this.AzureFile != null)
                    hash = hash * 59 + this.AzureFile.GetHashCode();
                if (this.Cephfs != null)
                    hash = hash * 59 + this.Cephfs.GetHashCode();
                if (this.Cinder != null)
                    hash = hash * 59 + this.Cinder.GetHashCode();
                if (this.ConfigMap != null)
                    hash = hash * 59 + this.ConfigMap.GetHashCode();
                if (this.DownwardAPI != null)
                    hash = hash * 59 + this.DownwardAPI.GetHashCode();
                if (this.EmptyDir != null)
                    hash = hash * 59 + this.EmptyDir.GetHashCode();
                if (this.Fc != null)
                    hash = hash * 59 + this.Fc.GetHashCode();
                if (this.FlexVolume != null)
                    hash = hash * 59 + this.FlexVolume.GetHashCode();
                if (this.Flocker != null)
                    hash = hash * 59 + this.Flocker.GetHashCode();
                if (this.GcePersistentDisk != null)
                    hash = hash * 59 + this.GcePersistentDisk.GetHashCode();
                if (this.GitRepo != null)
                    hash = hash * 59 + this.GitRepo.GetHashCode();
                if (this.Glusterfs != null)
                    hash = hash * 59 + this.Glusterfs.GetHashCode();
                if (this.HostPath != null)
                    hash = hash * 59 + this.HostPath.GetHashCode();
                if (this.Iscsi != null)
                    hash = hash * 59 + this.Iscsi.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Nfs != null)
                    hash = hash * 59 + this.Nfs.GetHashCode();
                if (this.PersistentVolumeClaim != null)
                    hash = hash * 59 + this.PersistentVolumeClaim.GetHashCode();
                if (this.PhotonPersistentDisk != null)
                    hash = hash * 59 + this.PhotonPersistentDisk.GetHashCode();
                if (this.PortworxVolume != null)
                    hash = hash * 59 + this.PortworxVolume.GetHashCode();
                if (this.Projected != null)
                    hash = hash * 59 + this.Projected.GetHashCode();
                if (this.Quobyte != null)
                    hash = hash * 59 + this.Quobyte.GetHashCode();
                if (this.Rbd != null)
                    hash = hash * 59 + this.Rbd.GetHashCode();
                if (this.ScaleIO != null)
                    hash = hash * 59 + this.ScaleIO.GetHashCode();
                if (this.Secret != null)
                    hash = hash * 59 + this.Secret.GetHashCode();
                if (this.Storageos != null)
                    hash = hash * 59 + this.Storageos.GetHashCode();
                if (this.VsphereVolume != null)
                    hash = hash * 59 + this.VsphereVolume.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
