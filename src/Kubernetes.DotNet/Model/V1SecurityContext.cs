/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
    /// </summary>
    [DataContract]
    public partial class V1SecurityContext :  IEquatable<V1SecurityContext>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1SecurityContext" /> class.
        /// </summary>
        /// <param name="Capabilities">The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime..</param>
        /// <param name="Privileged">Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false..</param>
        /// <param name="ReadOnlyRootFilesystem">Whether this container has a read-only root filesystem. Default is false..</param>
        /// <param name="RunAsNonRoot">Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence..</param>
        /// <param name="RunAsUser">The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence..</param>
        /// <param name="SeLinuxOptions">The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence..</param>
        public V1SecurityContext(V1Capabilities Capabilities = default(V1Capabilities), bool? Privileged = default(bool?), bool? ReadOnlyRootFilesystem = default(bool?), bool? RunAsNonRoot = default(bool?), long? RunAsUser = default(long?), V1SELinuxOptions SeLinuxOptions = default(V1SELinuxOptions))
        {
            this.Capabilities = Capabilities;
            this.Privileged = Privileged;
            this.ReadOnlyRootFilesystem = ReadOnlyRootFilesystem;
            this.RunAsNonRoot = RunAsNonRoot;
            this.RunAsUser = RunAsUser;
            this.SeLinuxOptions = SeLinuxOptions;
        }
        
        /// <summary>
        /// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
        /// </summary>
        /// <value>The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.</value>
        [DataMember(Name="capabilities", EmitDefaultValue=false)]
        public V1Capabilities Capabilities { get; set; }

        /// <summary>
        /// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
        /// </summary>
        /// <value>Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.</value>
        [DataMember(Name="privileged", EmitDefaultValue=false)]
        public bool? Privileged { get; set; }

        /// <summary>
        /// Whether this container has a read-only root filesystem. Default is false.
        /// </summary>
        /// <value>Whether this container has a read-only root filesystem. Default is false.</value>
        [DataMember(Name="readOnlyRootFilesystem", EmitDefaultValue=false)]
        public bool? ReadOnlyRootFilesystem { get; set; }

        /// <summary>
        /// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        /// </summary>
        /// <value>Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.</value>
        [DataMember(Name="runAsNonRoot", EmitDefaultValue=false)]
        public bool? RunAsNonRoot { get; set; }

        /// <summary>
        /// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        /// </summary>
        /// <value>The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.</value>
        [DataMember(Name="runAsUser", EmitDefaultValue=false)]
        public long? RunAsUser { get; set; }

        /// <summary>
        /// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        /// </summary>
        /// <value>The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.</value>
        [DataMember(Name="seLinuxOptions", EmitDefaultValue=false)]
        public V1SELinuxOptions SeLinuxOptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1SecurityContext {\n");
            sb.Append("  Capabilities: ").Append(Capabilities).Append("\n");
            sb.Append("  Privileged: ").Append(Privileged).Append("\n");
            sb.Append("  ReadOnlyRootFilesystem: ").Append(ReadOnlyRootFilesystem).Append("\n");
            sb.Append("  RunAsNonRoot: ").Append(RunAsNonRoot).Append("\n");
            sb.Append("  RunAsUser: ").Append(RunAsUser).Append("\n");
            sb.Append("  SeLinuxOptions: ").Append(SeLinuxOptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1SecurityContext);
        }

        /// <summary>
        /// Returns true if V1SecurityContext instances are equal
        /// </summary>
        /// <param name="other">Instance of V1SecurityContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1SecurityContext other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Capabilities == other.Capabilities ||
                    this.Capabilities != null &&
                    this.Capabilities.Equals(other.Capabilities)
                ) && 
                (
                    this.Privileged == other.Privileged ||
                    this.Privileged != null &&
                    this.Privileged.Equals(other.Privileged)
                ) && 
                (
                    this.ReadOnlyRootFilesystem == other.ReadOnlyRootFilesystem ||
                    this.ReadOnlyRootFilesystem != null &&
                    this.ReadOnlyRootFilesystem.Equals(other.ReadOnlyRootFilesystem)
                ) && 
                (
                    this.RunAsNonRoot == other.RunAsNonRoot ||
                    this.RunAsNonRoot != null &&
                    this.RunAsNonRoot.Equals(other.RunAsNonRoot)
                ) && 
                (
                    this.RunAsUser == other.RunAsUser ||
                    this.RunAsUser != null &&
                    this.RunAsUser.Equals(other.RunAsUser)
                ) && 
                (
                    this.SeLinuxOptions == other.SeLinuxOptions ||
                    this.SeLinuxOptions != null &&
                    this.SeLinuxOptions.Equals(other.SeLinuxOptions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Capabilities != null)
                    hash = hash * 59 + this.Capabilities.GetHashCode();
                if (this.Privileged != null)
                    hash = hash * 59 + this.Privileged.GetHashCode();
                if (this.ReadOnlyRootFilesystem != null)
                    hash = hash * 59 + this.ReadOnlyRootFilesystem.GetHashCode();
                if (this.RunAsNonRoot != null)
                    hash = hash * 59 + this.RunAsNonRoot.GetHashCode();
                if (this.RunAsUser != null)
                    hash = hash * 59 + this.RunAsUser.GetHashCode();
                if (this.SeLinuxOptions != null)
                    hash = hash * 59 + this.SeLinuxOptions.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
