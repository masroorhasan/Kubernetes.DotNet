/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// PodDisruptionBudgetStatus represents information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.
    /// </summary>
    [DataContract]
    public partial class V1beta1PodDisruptionBudgetStatus :  IEquatable<V1beta1PodDisruptionBudgetStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1beta1PodDisruptionBudgetStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1beta1PodDisruptionBudgetStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1beta1PodDisruptionBudgetStatus" /> class.
        /// </summary>
        /// <param name="CurrentHealthy">current number of healthy pods (required).</param>
        /// <param name="DesiredHealthy">minimum desired number of healthy pods (required).</param>
        /// <param name="DisruptedPods">DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn&#39;t occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions. (required).</param>
        /// <param name="DisruptionsAllowed">Number of pod disruptions that are currently allowed. (required).</param>
        /// <param name="ExpectedPods">total number of pods counted by this disruption budget (required).</param>
        /// <param name="ObservedGeneration">Most recent generation observed when updating this PDB status. PodDisruptionsAllowed and other status informatio is valid only if observedGeneration equals to PDB&#39;s object generation..</param>
        public V1beta1PodDisruptionBudgetStatus(int? CurrentHealthy = default(int?), int? DesiredHealthy = default(int?), Dictionary<string, DateTime?> DisruptedPods = default(Dictionary<string, DateTime?>), int? DisruptionsAllowed = default(int?), int? ExpectedPods = default(int?), long? ObservedGeneration = default(long?))
        {
            // to ensure "CurrentHealthy" is required (not null)
            if (CurrentHealthy == null)
            {
                throw new InvalidDataException("CurrentHealthy is a required property for V1beta1PodDisruptionBudgetStatus and cannot be null");
            }
            else
            {
                this.CurrentHealthy = CurrentHealthy;
            }
            // to ensure "DesiredHealthy" is required (not null)
            if (DesiredHealthy == null)
            {
                throw new InvalidDataException("DesiredHealthy is a required property for V1beta1PodDisruptionBudgetStatus and cannot be null");
            }
            else
            {
                this.DesiredHealthy = DesiredHealthy;
            }
            // to ensure "DisruptedPods" is required (not null)
            if (DisruptedPods == null)
            {
                throw new InvalidDataException("DisruptedPods is a required property for V1beta1PodDisruptionBudgetStatus and cannot be null");
            }
            else
            {
                this.DisruptedPods = DisruptedPods;
            }
            // to ensure "DisruptionsAllowed" is required (not null)
            if (DisruptionsAllowed == null)
            {
                throw new InvalidDataException("DisruptionsAllowed is a required property for V1beta1PodDisruptionBudgetStatus and cannot be null");
            }
            else
            {
                this.DisruptionsAllowed = DisruptionsAllowed;
            }
            // to ensure "ExpectedPods" is required (not null)
            if (ExpectedPods == null)
            {
                throw new InvalidDataException("ExpectedPods is a required property for V1beta1PodDisruptionBudgetStatus and cannot be null");
            }
            else
            {
                this.ExpectedPods = ExpectedPods;
            }
            this.ObservedGeneration = ObservedGeneration;
        }
        
        /// <summary>
        /// current number of healthy pods
        /// </summary>
        /// <value>current number of healthy pods</value>
        [DataMember(Name="currentHealthy", EmitDefaultValue=false)]
        public int? CurrentHealthy { get; set; }

        /// <summary>
        /// minimum desired number of healthy pods
        /// </summary>
        /// <value>minimum desired number of healthy pods</value>
        [DataMember(Name="desiredHealthy", EmitDefaultValue=false)]
        public int? DesiredHealthy { get; set; }

        /// <summary>
        /// DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn&#39;t occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.
        /// </summary>
        /// <value>DisruptedPods contains information about pods whose eviction was processed by the API server eviction subresource handler but has not yet been observed by the PodDisruptionBudget controller. A pod will be in this map from the time when the API server processed the eviction request to the time when the pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the pod and the value is the time when the API server processed the eviction request. If the deletion didn&#39;t occur and a pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with pod deletions.</value>
        [DataMember(Name="disruptedPods", EmitDefaultValue=false)]
        public Dictionary<string, DateTime?> DisruptedPods { get; set; }

        /// <summary>
        /// Number of pod disruptions that are currently allowed.
        /// </summary>
        /// <value>Number of pod disruptions that are currently allowed.</value>
        [DataMember(Name="disruptionsAllowed", EmitDefaultValue=false)]
        public int? DisruptionsAllowed { get; set; }

        /// <summary>
        /// total number of pods counted by this disruption budget
        /// </summary>
        /// <value>total number of pods counted by this disruption budget</value>
        [DataMember(Name="expectedPods", EmitDefaultValue=false)]
        public int? ExpectedPods { get; set; }

        /// <summary>
        /// Most recent generation observed when updating this PDB status. PodDisruptionsAllowed and other status informatio is valid only if observedGeneration equals to PDB&#39;s object generation.
        /// </summary>
        /// <value>Most recent generation observed when updating this PDB status. PodDisruptionsAllowed and other status informatio is valid only if observedGeneration equals to PDB&#39;s object generation.</value>
        [DataMember(Name="observedGeneration", EmitDefaultValue=false)]
        public long? ObservedGeneration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1beta1PodDisruptionBudgetStatus {\n");
            sb.Append("  CurrentHealthy: ").Append(CurrentHealthy).Append("\n");
            sb.Append("  DesiredHealthy: ").Append(DesiredHealthy).Append("\n");
            sb.Append("  DisruptedPods: ").Append(DisruptedPods).Append("\n");
            sb.Append("  DisruptionsAllowed: ").Append(DisruptionsAllowed).Append("\n");
            sb.Append("  ExpectedPods: ").Append(ExpectedPods).Append("\n");
            sb.Append("  ObservedGeneration: ").Append(ObservedGeneration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1beta1PodDisruptionBudgetStatus);
        }

        /// <summary>
        /// Returns true if V1beta1PodDisruptionBudgetStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of V1beta1PodDisruptionBudgetStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1beta1PodDisruptionBudgetStatus other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CurrentHealthy == other.CurrentHealthy ||
                    this.CurrentHealthy != null &&
                    this.CurrentHealthy.Equals(other.CurrentHealthy)
                ) && 
                (
                    this.DesiredHealthy == other.DesiredHealthy ||
                    this.DesiredHealthy != null &&
                    this.DesiredHealthy.Equals(other.DesiredHealthy)
                ) && 
                (
                    this.DisruptedPods == other.DisruptedPods ||
                    this.DisruptedPods != null &&
                    this.DisruptedPods.SequenceEqual(other.DisruptedPods)
                ) && 
                (
                    this.DisruptionsAllowed == other.DisruptionsAllowed ||
                    this.DisruptionsAllowed != null &&
                    this.DisruptionsAllowed.Equals(other.DisruptionsAllowed)
                ) && 
                (
                    this.ExpectedPods == other.ExpectedPods ||
                    this.ExpectedPods != null &&
                    this.ExpectedPods.Equals(other.ExpectedPods)
                ) && 
                (
                    this.ObservedGeneration == other.ObservedGeneration ||
                    this.ObservedGeneration != null &&
                    this.ObservedGeneration.Equals(other.ObservedGeneration)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CurrentHealthy != null)
                    hash = hash * 59 + this.CurrentHealthy.GetHashCode();
                if (this.DesiredHealthy != null)
                    hash = hash * 59 + this.DesiredHealthy.GetHashCode();
                if (this.DisruptedPods != null)
                    hash = hash * 59 + this.DisruptedPods.GetHashCode();
                if (this.DisruptionsAllowed != null)
                    hash = hash * 59 + this.DisruptionsAllowed.GetHashCode();
                if (this.ExpectedPods != null)
                    hash = hash * 59 + this.ExpectedPods.GetHashCode();
                if (this.ObservedGeneration != null)
                    hash = hash * 59 + this.ObservedGeneration.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
