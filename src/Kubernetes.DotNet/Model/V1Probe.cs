/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
    /// </summary>
    [DataContract]
    public partial class V1Probe :  IEquatable<V1Probe>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1Probe" /> class.
        /// </summary>
        /// <param name="Exec">One and only one of the following should be specified. Exec specifies the action to take..</param>
        /// <param name="FailureThreshold">Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1..</param>
        /// <param name="HttpGet">HTTPGet specifies the http request to perform..</param>
        /// <param name="InitialDelaySeconds">Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes.</param>
        /// <param name="PeriodSeconds">How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1..</param>
        /// <param name="SuccessThreshold">Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1..</param>
        /// <param name="TcpSocket">TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported.</param>
        /// <param name="TimeoutSeconds">Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes.</param>
        public V1Probe(V1ExecAction Exec = default(V1ExecAction), int? FailureThreshold = default(int?), V1HTTPGetAction HttpGet = default(V1HTTPGetAction), int? InitialDelaySeconds = default(int?), int? PeriodSeconds = default(int?), int? SuccessThreshold = default(int?), V1TCPSocketAction TcpSocket = default(V1TCPSocketAction), int? TimeoutSeconds = default(int?))
        {
            this.Exec = Exec;
            this.FailureThreshold = FailureThreshold;
            this.HttpGet = HttpGet;
            this.InitialDelaySeconds = InitialDelaySeconds;
            this.PeriodSeconds = PeriodSeconds;
            this.SuccessThreshold = SuccessThreshold;
            this.TcpSocket = TcpSocket;
            this.TimeoutSeconds = TimeoutSeconds;
        }
        
        /// <summary>
        /// One and only one of the following should be specified. Exec specifies the action to take.
        /// </summary>
        /// <value>One and only one of the following should be specified. Exec specifies the action to take.</value>
        [DataMember(Name="exec", EmitDefaultValue=false)]
        public V1ExecAction Exec { get; set; }

        /// <summary>
        /// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
        /// </summary>
        /// <value>Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.</value>
        [DataMember(Name="failureThreshold", EmitDefaultValue=false)]
        public int? FailureThreshold { get; set; }

        /// <summary>
        /// HTTPGet specifies the http request to perform.
        /// </summary>
        /// <value>HTTPGet specifies the http request to perform.</value>
        [DataMember(Name="httpGet", EmitDefaultValue=false)]
        public V1HTTPGetAction HttpGet { get; set; }

        /// <summary>
        /// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        /// </summary>
        /// <value>Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes</value>
        [DataMember(Name="initialDelaySeconds", EmitDefaultValue=false)]
        public int? InitialDelaySeconds { get; set; }

        /// <summary>
        /// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
        /// </summary>
        /// <value>How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.</value>
        [DataMember(Name="periodSeconds", EmitDefaultValue=false)]
        public int? PeriodSeconds { get; set; }

        /// <summary>
        /// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.
        /// </summary>
        /// <value>Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness. Minimum value is 1.</value>
        [DataMember(Name="successThreshold", EmitDefaultValue=false)]
        public int? SuccessThreshold { get; set; }

        /// <summary>
        /// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported
        /// </summary>
        /// <value>TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported</value>
        [DataMember(Name="tcpSocket", EmitDefaultValue=false)]
        public V1TCPSocketAction TcpSocket { get; set; }

        /// <summary>
        /// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
        /// </summary>
        /// <value>Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes</value>
        [DataMember(Name="timeoutSeconds", EmitDefaultValue=false)]
        public int? TimeoutSeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1Probe {\n");
            sb.Append("  Exec: ").Append(Exec).Append("\n");
            sb.Append("  FailureThreshold: ").Append(FailureThreshold).Append("\n");
            sb.Append("  HttpGet: ").Append(HttpGet).Append("\n");
            sb.Append("  InitialDelaySeconds: ").Append(InitialDelaySeconds).Append("\n");
            sb.Append("  PeriodSeconds: ").Append(PeriodSeconds).Append("\n");
            sb.Append("  SuccessThreshold: ").Append(SuccessThreshold).Append("\n");
            sb.Append("  TcpSocket: ").Append(TcpSocket).Append("\n");
            sb.Append("  TimeoutSeconds: ").Append(TimeoutSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1Probe);
        }

        /// <summary>
        /// Returns true if V1Probe instances are equal
        /// </summary>
        /// <param name="other">Instance of V1Probe to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1Probe other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Exec == other.Exec ||
                    this.Exec != null &&
                    this.Exec.Equals(other.Exec)
                ) && 
                (
                    this.FailureThreshold == other.FailureThreshold ||
                    this.FailureThreshold != null &&
                    this.FailureThreshold.Equals(other.FailureThreshold)
                ) && 
                (
                    this.HttpGet == other.HttpGet ||
                    this.HttpGet != null &&
                    this.HttpGet.Equals(other.HttpGet)
                ) && 
                (
                    this.InitialDelaySeconds == other.InitialDelaySeconds ||
                    this.InitialDelaySeconds != null &&
                    this.InitialDelaySeconds.Equals(other.InitialDelaySeconds)
                ) && 
                (
                    this.PeriodSeconds == other.PeriodSeconds ||
                    this.PeriodSeconds != null &&
                    this.PeriodSeconds.Equals(other.PeriodSeconds)
                ) && 
                (
                    this.SuccessThreshold == other.SuccessThreshold ||
                    this.SuccessThreshold != null &&
                    this.SuccessThreshold.Equals(other.SuccessThreshold)
                ) && 
                (
                    this.TcpSocket == other.TcpSocket ||
                    this.TcpSocket != null &&
                    this.TcpSocket.Equals(other.TcpSocket)
                ) && 
                (
                    this.TimeoutSeconds == other.TimeoutSeconds ||
                    this.TimeoutSeconds != null &&
                    this.TimeoutSeconds.Equals(other.TimeoutSeconds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Exec != null)
                    hash = hash * 59 + this.Exec.GetHashCode();
                if (this.FailureThreshold != null)
                    hash = hash * 59 + this.FailureThreshold.GetHashCode();
                if (this.HttpGet != null)
                    hash = hash * 59 + this.HttpGet.GetHashCode();
                if (this.InitialDelaySeconds != null)
                    hash = hash * 59 + this.InitialDelaySeconds.GetHashCode();
                if (this.PeriodSeconds != null)
                    hash = hash * 59 + this.PeriodSeconds.GetHashCode();
                if (this.SuccessThreshold != null)
                    hash = hash * 59 + this.SuccessThreshold.GetHashCode();
                if (this.TcpSocket != null)
                    hash = hash * 59 + this.TcpSocket.GetHashCode();
                if (this.TimeoutSeconds != null)
                    hash = hash * 59 + this.TimeoutSeconds.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
