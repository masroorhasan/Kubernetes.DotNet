/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// Projection that may be projected along with other supported volume types
    /// </summary>
    [DataContract]
    public partial class V1VolumeProjection :  IEquatable<V1VolumeProjection>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1VolumeProjection" /> class.
        /// </summary>
        /// <param name="ConfigMap">information about the configMap data to project.</param>
        /// <param name="DownwardAPI">information about the downwardAPI data to project.</param>
        /// <param name="Secret">information about the secret data to project.</param>
        public V1VolumeProjection(V1ConfigMapProjection ConfigMap = default(V1ConfigMapProjection), V1DownwardAPIProjection DownwardAPI = default(V1DownwardAPIProjection), V1SecretProjection Secret = default(V1SecretProjection))
        {
            this.ConfigMap = ConfigMap;
            this.DownwardAPI = DownwardAPI;
            this.Secret = Secret;
        }
        
        /// <summary>
        /// information about the configMap data to project
        /// </summary>
        /// <value>information about the configMap data to project</value>
        [DataMember(Name="configMap", EmitDefaultValue=false)]
        public V1ConfigMapProjection ConfigMap { get; set; }

        /// <summary>
        /// information about the downwardAPI data to project
        /// </summary>
        /// <value>information about the downwardAPI data to project</value>
        [DataMember(Name="downwardAPI", EmitDefaultValue=false)]
        public V1DownwardAPIProjection DownwardAPI { get; set; }

        /// <summary>
        /// information about the secret data to project
        /// </summary>
        /// <value>information about the secret data to project</value>
        [DataMember(Name="secret", EmitDefaultValue=false)]
        public V1SecretProjection Secret { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1VolumeProjection {\n");
            sb.Append("  ConfigMap: ").Append(ConfigMap).Append("\n");
            sb.Append("  DownwardAPI: ").Append(DownwardAPI).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1VolumeProjection);
        }

        /// <summary>
        /// Returns true if V1VolumeProjection instances are equal
        /// </summary>
        /// <param name="other">Instance of V1VolumeProjection to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1VolumeProjection other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ConfigMap == other.ConfigMap ||
                    this.ConfigMap != null &&
                    this.ConfigMap.Equals(other.ConfigMap)
                ) && 
                (
                    this.DownwardAPI == other.DownwardAPI ||
                    this.DownwardAPI != null &&
                    this.DownwardAPI.Equals(other.DownwardAPI)
                ) && 
                (
                    this.Secret == other.Secret ||
                    this.Secret != null &&
                    this.Secret.Equals(other.Secret)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ConfigMap != null)
                    hash = hash * 59 + this.ConfigMap.GetHashCode();
                if (this.DownwardAPI != null)
                    hash = hash * 59 + this.DownwardAPI.GetHashCode();
                if (this.Secret != null)
                    hash = hash * 59 + this.Secret.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
