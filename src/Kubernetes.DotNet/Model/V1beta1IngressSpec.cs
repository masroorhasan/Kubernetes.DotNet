/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// IngressSpec describes the Ingress the user wishes to exist.
    /// </summary>
    [DataContract]
    public partial class V1beta1IngressSpec :  IEquatable<V1beta1IngressSpec>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1beta1IngressSpec" /> class.
        /// </summary>
        /// <param name="Backend">A default backend capable of servicing requests that don&#39;t match any rule. At least one of &#39;backend&#39; or &#39;rules&#39; must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default..</param>
        /// <param name="Rules">A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend..</param>
        /// <param name="Tls">TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI..</param>
        public V1beta1IngressSpec(V1beta1IngressBackend Backend = default(V1beta1IngressBackend), List<V1beta1IngressRule> Rules = default(List<V1beta1IngressRule>), List<V1beta1IngressTLS> Tls = default(List<V1beta1IngressTLS>))
        {
            this.Backend = Backend;
            this.Rules = Rules;
            this.Tls = Tls;
        }
        
        /// <summary>
        /// A default backend capable of servicing requests that don&#39;t match any rule. At least one of &#39;backend&#39; or &#39;rules&#39; must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.
        /// </summary>
        /// <value>A default backend capable of servicing requests that don&#39;t match any rule. At least one of &#39;backend&#39; or &#39;rules&#39; must be specified. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default.</value>
        [DataMember(Name="backend", EmitDefaultValue=false)]
        public V1beta1IngressBackend Backend { get; set; }

        /// <summary>
        /// A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.
        /// </summary>
        /// <value>A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.</value>
        [DataMember(Name="rules", EmitDefaultValue=false)]
        public List<V1beta1IngressRule> Rules { get; set; }

        /// <summary>
        /// TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.
        /// </summary>
        /// <value>TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.</value>
        [DataMember(Name="tls", EmitDefaultValue=false)]
        public List<V1beta1IngressTLS> Tls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1beta1IngressSpec {\n");
            sb.Append("  Backend: ").Append(Backend).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("  Tls: ").Append(Tls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1beta1IngressSpec);
        }

        /// <summary>
        /// Returns true if V1beta1IngressSpec instances are equal
        /// </summary>
        /// <param name="other">Instance of V1beta1IngressSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1beta1IngressSpec other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Backend == other.Backend ||
                    this.Backend != null &&
                    this.Backend.Equals(other.Backend)
                ) && 
                (
                    this.Rules == other.Rules ||
                    this.Rules != null &&
                    this.Rules.SequenceEqual(other.Rules)
                ) && 
                (
                    this.Tls == other.Tls ||
                    this.Tls != null &&
                    this.Tls.SequenceEqual(other.Tls)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Backend != null)
                    hash = hash * 59 + this.Backend.GetHashCode();
                if (this.Rules != null)
                    hash = hash * 59 + this.Rules.GetHashCode();
                if (this.Tls != null)
                    hash = hash * 59 + this.Tls.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
