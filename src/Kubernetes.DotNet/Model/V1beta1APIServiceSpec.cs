/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// APIServiceSpec contains information for locating and communicating with a server. Only https is supported, though you are able to disable certificate verification.
    /// </summary>
    [DataContract]
    public partial class V1beta1APIServiceSpec :  IEquatable<V1beta1APIServiceSpec>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1beta1APIServiceSpec" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1beta1APIServiceSpec() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1beta1APIServiceSpec" /> class.
        /// </summary>
        /// <param name="CaBundle">CABundle is a PEM encoded CA bundle which will be used to validate an API server&#39;s serving certificate. (required).</param>
        /// <param name="Group">Group is the API group name this server hosts.</param>
        /// <param name="GroupPriorityMinimum">GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is prefered by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We&#39;d recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s (required).</param>
        /// <param name="InsecureSkipTLSVerify">InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead..</param>
        /// <param name="Service">Service is a reference to the service for this API server.  It must communicate on port 443 If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled. (required).</param>
        /// <param name="Version">Version is the API version this server hosts.  For example, \&quot;v1\&quot;.</param>
        /// <param name="VersionPriority">VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) Since it&#39;s inside of a group, the number can be small, probably in the 10s. (required).</param>
        public V1beta1APIServiceSpec(byte[] CaBundle = default(byte[]), string Group = default(string), int? GroupPriorityMinimum = default(int?), bool? InsecureSkipTLSVerify = default(bool?), V1beta1ServiceReference Service = default(V1beta1ServiceReference), string Version = default(string), int? VersionPriority = default(int?))
        {
            // to ensure "CaBundle" is required (not null)
            if (CaBundle == null)
            {
                throw new InvalidDataException("CaBundle is a required property for V1beta1APIServiceSpec and cannot be null");
            }
            else
            {
                this.CaBundle = CaBundle;
            }
            // to ensure "GroupPriorityMinimum" is required (not null)
            if (GroupPriorityMinimum == null)
            {
                throw new InvalidDataException("GroupPriorityMinimum is a required property for V1beta1APIServiceSpec and cannot be null");
            }
            else
            {
                this.GroupPriorityMinimum = GroupPriorityMinimum;
            }
            // to ensure "Service" is required (not null)
            if (Service == null)
            {
                throw new InvalidDataException("Service is a required property for V1beta1APIServiceSpec and cannot be null");
            }
            else
            {
                this.Service = Service;
            }
            // to ensure "VersionPriority" is required (not null)
            if (VersionPriority == null)
            {
                throw new InvalidDataException("VersionPriority is a required property for V1beta1APIServiceSpec and cannot be null");
            }
            else
            {
                this.VersionPriority = VersionPriority;
            }
            this.Group = Group;
            this.InsecureSkipTLSVerify = InsecureSkipTLSVerify;
            this.Version = Version;
        }
        
        /// <summary>
        /// CABundle is a PEM encoded CA bundle which will be used to validate an API server&#39;s serving certificate.
        /// </summary>
        /// <value>CABundle is a PEM encoded CA bundle which will be used to validate an API server&#39;s serving certificate.</value>
        [DataMember(Name="caBundle", EmitDefaultValue=false)]
        public byte[] CaBundle { get; set; }

        /// <summary>
        /// Group is the API group name this server hosts
        /// </summary>
        /// <value>Group is the API group name this server hosts</value>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public string Group { get; set; }

        /// <summary>
        /// GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is prefered by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We&#39;d recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s
        /// </summary>
        /// <value>GroupPriorityMininum is the priority this group should have at least. Higher priority means that the group is prefered by clients over lower priority ones. Note that other versions of this group might specify even higher GroupPriorityMininum values such that the whole group gets a higher priority. The primary sort is based on GroupPriorityMinimum, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) We&#39;d recommend something like: *.k8s.io (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s</value>
        [DataMember(Name="groupPriorityMinimum", EmitDefaultValue=false)]
        public int? GroupPriorityMinimum { get; set; }

        /// <summary>
        /// InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead.
        /// </summary>
        /// <value>InsecureSkipTLSVerify disables TLS certificate verification when communicating with this server. This is strongly discouraged.  You should use the CABundle instead.</value>
        [DataMember(Name="insecureSkipTLSVerify", EmitDefaultValue=false)]
        public bool? InsecureSkipTLSVerify { get; set; }

        /// <summary>
        /// Service is a reference to the service for this API server.  It must communicate on port 443 If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled.
        /// </summary>
        /// <value>Service is a reference to the service for this API server.  It must communicate on port 443 If the Service is nil, that means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled.</value>
        [DataMember(Name="service", EmitDefaultValue=false)]
        public V1beta1ServiceReference Service { get; set; }

        /// <summary>
        /// Version is the API version this server hosts.  For example, \&quot;v1\&quot;
        /// </summary>
        /// <value>Version is the API version this server hosts.  For example, \&quot;v1\&quot;</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string Version { get; set; }

        /// <summary>
        /// VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) Since it&#39;s inside of a group, the number can be small, probably in the 10s.
        /// </summary>
        /// <value>VersionPriority controls the ordering of this API version inside of its group.  Must be greater than zero. The primary sort is based on VersionPriority, ordered highest to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object.  (v1.bar before v1.foo) Since it&#39;s inside of a group, the number can be small, probably in the 10s.</value>
        [DataMember(Name="versionPriority", EmitDefaultValue=false)]
        public int? VersionPriority { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1beta1APIServiceSpec {\n");
            sb.Append("  CaBundle: ").Append(CaBundle).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  GroupPriorityMinimum: ").Append(GroupPriorityMinimum).Append("\n");
            sb.Append("  InsecureSkipTLSVerify: ").Append(InsecureSkipTLSVerify).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  Version: ").Append(Version).Append("\n");
            sb.Append("  VersionPriority: ").Append(VersionPriority).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1beta1APIServiceSpec);
        }

        /// <summary>
        /// Returns true if V1beta1APIServiceSpec instances are equal
        /// </summary>
        /// <param name="other">Instance of V1beta1APIServiceSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1beta1APIServiceSpec other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CaBundle == other.CaBundle ||
                    this.CaBundle != null &&
                    this.CaBundle.Equals(other.CaBundle)
                ) && 
                (
                    this.Group == other.Group ||
                    this.Group != null &&
                    this.Group.Equals(other.Group)
                ) && 
                (
                    this.GroupPriorityMinimum == other.GroupPriorityMinimum ||
                    this.GroupPriorityMinimum != null &&
                    this.GroupPriorityMinimum.Equals(other.GroupPriorityMinimum)
                ) && 
                (
                    this.InsecureSkipTLSVerify == other.InsecureSkipTLSVerify ||
                    this.InsecureSkipTLSVerify != null &&
                    this.InsecureSkipTLSVerify.Equals(other.InsecureSkipTLSVerify)
                ) && 
                (
                    this.Service == other.Service ||
                    this.Service != null &&
                    this.Service.Equals(other.Service)
                ) && 
                (
                    this.Version == other.Version ||
                    this.Version != null &&
                    this.Version.Equals(other.Version)
                ) && 
                (
                    this.VersionPriority == other.VersionPriority ||
                    this.VersionPriority != null &&
                    this.VersionPriority.Equals(other.VersionPriority)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CaBundle != null)
                    hash = hash * 59 + this.CaBundle.GetHashCode();
                if (this.Group != null)
                    hash = hash * 59 + this.Group.GetHashCode();
                if (this.GroupPriorityMinimum != null)
                    hash = hash * 59 + this.GroupPriorityMinimum.GetHashCode();
                if (this.InsecureSkipTLSVerify != null)
                    hash = hash * 59 + this.InsecureSkipTLSVerify.GetHashCode();
                if (this.Service != null)
                    hash = hash * 59 + this.Service.GetHashCode();
                if (this.Version != null)
                    hash = hash * 59 + this.Version.GetHashCode();
                if (this.VersionPriority != null)
                    hash = hash * 59 + this.VersionPriority.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
