/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// MetricSpec specifies how to scale based on a single metric (only &#x60;type&#x60; and one other matching field should be set at once).
    /// </summary>
    [DataContract]
    public partial class V2alpha1MetricSpec :  IEquatable<V2alpha1MetricSpec>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V2alpha1MetricSpec" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V2alpha1MetricSpec() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V2alpha1MetricSpec" /> class.
        /// </summary>
        /// <param name="_Object">object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object)..</param>
        /// <param name="Pods">pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value..</param>
        /// <param name="Resource">resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \&quot;pods\&quot; source..</param>
        /// <param name="Type">type is the type of metric source.  It should match one of the fields below. (required).</param>
        public V2alpha1MetricSpec(V2alpha1ObjectMetricSource _Object = default(V2alpha1ObjectMetricSource), V2alpha1PodsMetricSource Pods = default(V2alpha1PodsMetricSource), V2alpha1ResourceMetricSource Resource = default(V2alpha1ResourceMetricSource), string Type = default(string))
        {
            // to ensure "Type" is required (not null)
            if (Type == null)
            {
                throw new InvalidDataException("Type is a required property for V2alpha1MetricSpec and cannot be null");
            }
            else
            {
                this.Type = Type;
            }
            this._Object = _Object;
            this.Pods = Pods;
            this.Resource = Resource;
        }
        
        /// <summary>
        /// object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).
        /// </summary>
        /// <value>object refers to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object).</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public V2alpha1ObjectMetricSource _Object { get; set; }

        /// <summary>
        /// pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.
        /// </summary>
        /// <value>pods refers to a metric describing each pod in the current scale target (for example, transactions-processed-per-second).  The values will be averaged together before being compared to the target value.</value>
        [DataMember(Name="pods", EmitDefaultValue=false)]
        public V2alpha1PodsMetricSource Pods { get; set; }

        /// <summary>
        /// resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \&quot;pods\&quot; source.
        /// </summary>
        /// <value>resource refers to a resource metric (such as those specified in requests and limits) known to Kubernetes describing each pod in the current scale target (e.g. CPU or memory). Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \&quot;pods\&quot; source.</value>
        [DataMember(Name="resource", EmitDefaultValue=false)]
        public V2alpha1ResourceMetricSource Resource { get; set; }

        /// <summary>
        /// type is the type of metric source.  It should match one of the fields below.
        /// </summary>
        /// <value>type is the type of metric source.  It should match one of the fields below.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V2alpha1MetricSpec {\n");
            sb.Append("  _Object: ").Append(_Object).Append("\n");
            sb.Append("  Pods: ").Append(Pods).Append("\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V2alpha1MetricSpec);
        }

        /// <summary>
        /// Returns true if V2alpha1MetricSpec instances are equal
        /// </summary>
        /// <param name="other">Instance of V2alpha1MetricSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V2alpha1MetricSpec other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this._Object == other._Object ||
                    this._Object != null &&
                    this._Object.Equals(other._Object)
                ) && 
                (
                    this.Pods == other.Pods ||
                    this.Pods != null &&
                    this.Pods.Equals(other.Pods)
                ) && 
                (
                    this.Resource == other.Resource ||
                    this.Resource != null &&
                    this.Resource.Equals(other.Resource)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this._Object != null)
                    hash = hash * 59 + this._Object.GetHashCode();
                if (this.Pods != null)
                    hash = hash * 59 + this.Pods.GetHashCode();
                if (this.Resource != null)
                    hash = hash * 59 + this.Resource.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
