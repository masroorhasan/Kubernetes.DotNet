/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.
    /// </summary>
    [DataContract]
    public partial class V1LoadBalancerIngress :  IEquatable<V1LoadBalancerIngress>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1LoadBalancerIngress" /> class.
        /// </summary>
        /// <param name="Hostname">Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers).</param>
        /// <param name="Ip">IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers).</param>
        public V1LoadBalancerIngress(string Hostname = default(string), string Ip = default(string))
        {
            this.Hostname = Hostname;
            this.Ip = Ip;
        }
        
        /// <summary>
        /// Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
        /// </summary>
        /// <value>Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)</value>
        [DataMember(Name="hostname", EmitDefaultValue=false)]
        public string Hostname { get; set; }

        /// <summary>
        /// IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
        /// </summary>
        /// <value>IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)</value>
        [DataMember(Name="ip", EmitDefaultValue=false)]
        public string Ip { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1LoadBalancerIngress {\n");
            sb.Append("  Hostname: ").Append(Hostname).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1LoadBalancerIngress);
        }

        /// <summary>
        /// Returns true if V1LoadBalancerIngress instances are equal
        /// </summary>
        /// <param name="other">Instance of V1LoadBalancerIngress to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1LoadBalancerIngress other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Hostname == other.Hostname ||
                    this.Hostname != null &&
                    this.Hostname.Equals(other.Hostname)
                ) && 
                (
                    this.Ip == other.Ip ||
                    this.Ip != null &&
                    this.Ip.Equals(other.Ip)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Hostname != null)
                    hash = hash * 59 + this.Hostname.GetHashCode();
                if (this.Ip != null)
                    hash = hash * 59 + this.Ip.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
