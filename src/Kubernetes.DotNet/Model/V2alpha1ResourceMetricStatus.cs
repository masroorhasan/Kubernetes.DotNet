/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// ResourceMetricStatus indicates the current value of a resource metric known to Kubernetes, as specified in requests and limits, describing each pod in the current scale target (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-pod metrics using the \&quot;pods\&quot; source.
    /// </summary>
    [DataContract]
    public partial class V2alpha1ResourceMetricStatus :  IEquatable<V2alpha1ResourceMetricStatus>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V2alpha1ResourceMetricStatus" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V2alpha1ResourceMetricStatus() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V2alpha1ResourceMetricStatus" /> class.
        /// </summary>
        /// <param name="CurrentAverageUtilization">currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.  It will only be present if &#x60;targetAverageValue&#x60; was set in the corresponding metric specification..</param>
        /// <param name="CurrentAverageValue">currentAverageValue is the current value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the \&quot;pods\&quot; metric source type. It will always be set, regardless of the corresponding metric specification. (required).</param>
        /// <param name="Name">name is the name of the resource in question. (required).</param>
        public V2alpha1ResourceMetricStatus(int? CurrentAverageUtilization = default(int?), string CurrentAverageValue = default(string), string Name = default(string))
        {
            // to ensure "CurrentAverageValue" is required (not null)
            if (CurrentAverageValue == null)
            {
                throw new InvalidDataException("CurrentAverageValue is a required property for V2alpha1ResourceMetricStatus and cannot be null");
            }
            else
            {
                this.CurrentAverageValue = CurrentAverageValue;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for V2alpha1ResourceMetricStatus and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.CurrentAverageUtilization = CurrentAverageUtilization;
        }
        
        /// <summary>
        /// currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.  It will only be present if &#x60;targetAverageValue&#x60; was set in the corresponding metric specification.
        /// </summary>
        /// <value>currentAverageUtilization is the current value of the average of the resource metric across all relevant pods, represented as a percentage of the requested value of the resource for the pods.  It will only be present if &#x60;targetAverageValue&#x60; was set in the corresponding metric specification.</value>
        [DataMember(Name="currentAverageUtilization", EmitDefaultValue=false)]
        public int? CurrentAverageUtilization { get; set; }

        /// <summary>
        /// currentAverageValue is the current value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the \&quot;pods\&quot; metric source type. It will always be set, regardless of the corresponding metric specification.
        /// </summary>
        /// <value>currentAverageValue is the current value of the average of the resource metric across all relevant pods, as a raw value (instead of as a percentage of the request), similar to the \&quot;pods\&quot; metric source type. It will always be set, regardless of the corresponding metric specification.</value>
        [DataMember(Name="currentAverageValue", EmitDefaultValue=false)]
        public string CurrentAverageValue { get; set; }

        /// <summary>
        /// name is the name of the resource in question.
        /// </summary>
        /// <value>name is the name of the resource in question.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V2alpha1ResourceMetricStatus {\n");
            sb.Append("  CurrentAverageUtilization: ").Append(CurrentAverageUtilization).Append("\n");
            sb.Append("  CurrentAverageValue: ").Append(CurrentAverageValue).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V2alpha1ResourceMetricStatus);
        }

        /// <summary>
        /// Returns true if V2alpha1ResourceMetricStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of V2alpha1ResourceMetricStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V2alpha1ResourceMetricStatus other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CurrentAverageUtilization == other.CurrentAverageUtilization ||
                    this.CurrentAverageUtilization != null &&
                    this.CurrentAverageUtilization.Equals(other.CurrentAverageUtilization)
                ) && 
                (
                    this.CurrentAverageValue == other.CurrentAverageValue ||
                    this.CurrentAverageValue != null &&
                    this.CurrentAverageValue.Equals(other.CurrentAverageValue)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CurrentAverageUtilization != null)
                    hash = hash * 59 + this.CurrentAverageUtilization.GetHashCode();
                if (this.CurrentAverageValue != null)
                    hash = hash * 59 + this.CurrentAverageValue.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
