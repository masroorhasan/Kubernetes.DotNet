/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// APIResource specifies the name of a resource and whether it is namespaced.
    /// </summary>
    [DataContract]
    public partial class V1APIResource :  IEquatable<V1APIResource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1APIResource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1APIResource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1APIResource" /> class.
        /// </summary>
        /// <param name="Categories">categories is a list of the grouped resources this resource belongs to (e.g. &#39;all&#39;).</param>
        /// <param name="Kind">kind is the kind for the resource (e.g. &#39;Foo&#39; is the kind for a resource &#39;foo&#39;) (required).</param>
        /// <param name="Name">name is the plural name of the resource. (required).</param>
        /// <param name="Namespaced">namespaced indicates if a resource is namespaced or not. (required).</param>
        /// <param name="ShortNames">shortNames is a list of suggested short names of the resource..</param>
        /// <param name="SingularName">singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface. (required).</param>
        /// <param name="Verbs">verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy) (required).</param>
        public V1APIResource(List<string> Categories = default(List<string>), string Kind = default(string), string Name = default(string), bool? Namespaced = default(bool?), List<string> ShortNames = default(List<string>), string SingularName = default(string), List<string> Verbs = default(List<string>))
        {
            // to ensure "Kind" is required (not null)
            if (Kind == null)
            {
                throw new InvalidDataException("Kind is a required property for V1APIResource and cannot be null");
            }
            else
            {
                this.Kind = Kind;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for V1APIResource and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            // to ensure "Namespaced" is required (not null)
            if (Namespaced == null)
            {
                throw new InvalidDataException("Namespaced is a required property for V1APIResource and cannot be null");
            }
            else
            {
                this.Namespaced = Namespaced;
            }
            // to ensure "SingularName" is required (not null)
            if (SingularName == null)
            {
                throw new InvalidDataException("SingularName is a required property for V1APIResource and cannot be null");
            }
            else
            {
                this.SingularName = SingularName;
            }
            // to ensure "Verbs" is required (not null)
            if (Verbs == null)
            {
                throw new InvalidDataException("Verbs is a required property for V1APIResource and cannot be null");
            }
            else
            {
                this.Verbs = Verbs;
            }
            this.Categories = Categories;
            this.ShortNames = ShortNames;
        }
        
        /// <summary>
        /// categories is a list of the grouped resources this resource belongs to (e.g. &#39;all&#39;)
        /// </summary>
        /// <value>categories is a list of the grouped resources this resource belongs to (e.g. &#39;all&#39;)</value>
        [DataMember(Name="categories", EmitDefaultValue=false)]
        public List<string> Categories { get; set; }

        /// <summary>
        /// kind is the kind for the resource (e.g. &#39;Foo&#39; is the kind for a resource &#39;foo&#39;)
        /// </summary>
        /// <value>kind is the kind for the resource (e.g. &#39;Foo&#39; is the kind for a resource &#39;foo&#39;)</value>
        [DataMember(Name="kind", EmitDefaultValue=false)]
        public string Kind { get; set; }

        /// <summary>
        /// name is the plural name of the resource.
        /// </summary>
        /// <value>name is the plural name of the resource.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// namespaced indicates if a resource is namespaced or not.
        /// </summary>
        /// <value>namespaced indicates if a resource is namespaced or not.</value>
        [DataMember(Name="namespaced", EmitDefaultValue=false)]
        public bool? Namespaced { get; set; }

        /// <summary>
        /// shortNames is a list of suggested short names of the resource.
        /// </summary>
        /// <value>shortNames is a list of suggested short names of the resource.</value>
        [DataMember(Name="shortNames", EmitDefaultValue=false)]
        public List<string> ShortNames { get; set; }

        /// <summary>
        /// singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.
        /// </summary>
        /// <value>singularName is the singular name of the resource.  This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item and both singular and plural are allowed from the kubectl CLI interface.</value>
        [DataMember(Name="singularName", EmitDefaultValue=false)]
        public string SingularName { get; set; }

        /// <summary>
        /// verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)
        /// </summary>
        /// <value>verbs is a list of supported kube verbs (this includes get, list, watch, create, update, patch, delete, deletecollection, and proxy)</value>
        [DataMember(Name="verbs", EmitDefaultValue=false)]
        public List<string> Verbs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1APIResource {\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Namespaced: ").Append(Namespaced).Append("\n");
            sb.Append("  ShortNames: ").Append(ShortNames).Append("\n");
            sb.Append("  SingularName: ").Append(SingularName).Append("\n");
            sb.Append("  Verbs: ").Append(Verbs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1APIResource);
        }

        /// <summary>
        /// Returns true if V1APIResource instances are equal
        /// </summary>
        /// <param name="other">Instance of V1APIResource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1APIResource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Categories == other.Categories ||
                    this.Categories != null &&
                    this.Categories.SequenceEqual(other.Categories)
                ) && 
                (
                    this.Kind == other.Kind ||
                    this.Kind != null &&
                    this.Kind.Equals(other.Kind)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Namespaced == other.Namespaced ||
                    this.Namespaced != null &&
                    this.Namespaced.Equals(other.Namespaced)
                ) && 
                (
                    this.ShortNames == other.ShortNames ||
                    this.ShortNames != null &&
                    this.ShortNames.SequenceEqual(other.ShortNames)
                ) && 
                (
                    this.SingularName == other.SingularName ||
                    this.SingularName != null &&
                    this.SingularName.Equals(other.SingularName)
                ) && 
                (
                    this.Verbs == other.Verbs ||
                    this.Verbs != null &&
                    this.Verbs.SequenceEqual(other.Verbs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Categories != null)
                    hash = hash * 59 + this.Categories.GetHashCode();
                if (this.Kind != null)
                    hash = hash * 59 + this.Kind.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Namespaced != null)
                    hash = hash * 59 + this.Namespaced.GetHashCode();
                if (this.ShortNames != null)
                    hash = hash * 59 + this.ShortNames.GetHashCode();
                if (this.SingularName != null)
                    hash = hash * 59 + this.SingularName.GetHashCode();
                if (this.Verbs != null)
                    hash = hash * 59 + this.Verbs.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
