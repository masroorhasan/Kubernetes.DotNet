/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// CrossVersionObjectReference contains enough information to let you identify the referred resource.
    /// </summary>
    [DataContract]
    public partial class V2alpha1CrossVersionObjectReference :  IEquatable<V2alpha1CrossVersionObjectReference>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V2alpha1CrossVersionObjectReference" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V2alpha1CrossVersionObjectReference() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V2alpha1CrossVersionObjectReference" /> class.
        /// </summary>
        /// <param name="ApiVersion">API version of the referent.</param>
        /// <param name="Kind">Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\&quot; (required).</param>
        /// <param name="Name">Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names (required).</param>
        public V2alpha1CrossVersionObjectReference(string ApiVersion = default(string), string Kind = default(string), string Name = default(string))
        {
            // to ensure "Kind" is required (not null)
            if (Kind == null)
            {
                throw new InvalidDataException("Kind is a required property for V2alpha1CrossVersionObjectReference and cannot be null");
            }
            else
            {
                this.Kind = Kind;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for V2alpha1CrossVersionObjectReference and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.ApiVersion = ApiVersion;
        }
        
        /// <summary>
        /// API version of the referent
        /// </summary>
        /// <value>API version of the referent</value>
        [DataMember(Name="apiVersion", EmitDefaultValue=false)]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\&quot;
        /// </summary>
        /// <value>Kind of the referent; More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds\&quot;</value>
        [DataMember(Name="kind", EmitDefaultValue=false)]
        public string Kind { get; set; }

        /// <summary>
        /// Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names
        /// </summary>
        /// <value>Name of the referent; More info: http://kubernetes.io/docs/user-guide/identifiers#names</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V2alpha1CrossVersionObjectReference {\n");
            sb.Append("  ApiVersion: ").Append(ApiVersion).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V2alpha1CrossVersionObjectReference);
        }

        /// <summary>
        /// Returns true if V2alpha1CrossVersionObjectReference instances are equal
        /// </summary>
        /// <param name="other">Instance of V2alpha1CrossVersionObjectReference to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V2alpha1CrossVersionObjectReference other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ApiVersion == other.ApiVersion ||
                    this.ApiVersion != null &&
                    this.ApiVersion.Equals(other.ApiVersion)
                ) && 
                (
                    this.Kind == other.Kind ||
                    this.Kind != null &&
                    this.Kind.Equals(other.Kind)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ApiVersion != null)
                    hash = hash * 59 + this.ApiVersion.GetHashCode();
                if (this.Kind != null)
                    hash = hash * 59 + this.Kind.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
