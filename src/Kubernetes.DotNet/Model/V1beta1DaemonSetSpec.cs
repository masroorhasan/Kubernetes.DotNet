/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// DaemonSetSpec is the specification of a daemon set.
    /// </summary>
    [DataContract]
    public partial class V1beta1DaemonSetSpec :  IEquatable<V1beta1DaemonSetSpec>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1beta1DaemonSetSpec" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1beta1DaemonSetSpec() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1beta1DaemonSetSpec" /> class.
        /// </summary>
        /// <param name="MinReadySeconds">The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)..</param>
        /// <param name="RevisionHistoryLimit">The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10..</param>
        /// <param name="Selector">A label query over pods that are managed by the daemon set. Must match in order to be controlled. If empty, defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors.</param>
        /// <param name="Template">An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template&#39;s node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template (required).</param>
        /// <param name="TemplateGeneration">DEPRECATED. A sequence number representing a specific generation of the template. Populated by the system. It can be set only during the creation..</param>
        /// <param name="UpdateStrategy">An update strategy to replace existing DaemonSet pods with new pods..</param>
        public V1beta1DaemonSetSpec(int? MinReadySeconds = default(int?), int? RevisionHistoryLimit = default(int?), V1LabelSelector Selector = default(V1LabelSelector), V1PodTemplateSpec Template = default(V1PodTemplateSpec), long? TemplateGeneration = default(long?), V1beta1DaemonSetUpdateStrategy UpdateStrategy = default(V1beta1DaemonSetUpdateStrategy))
        {
            // to ensure "Template" is required (not null)
            if (Template == null)
            {
                throw new InvalidDataException("Template is a required property for V1beta1DaemonSetSpec and cannot be null");
            }
            else
            {
                this.Template = Template;
            }
            this.MinReadySeconds = MinReadySeconds;
            this.RevisionHistoryLimit = RevisionHistoryLimit;
            this.Selector = Selector;
            this.TemplateGeneration = TemplateGeneration;
            this.UpdateStrategy = UpdateStrategy;
        }
        
        /// <summary>
        /// The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).
        /// </summary>
        /// <value>The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready).</value>
        [DataMember(Name="minReadySeconds", EmitDefaultValue=false)]
        public int? MinReadySeconds { get; set; }

        /// <summary>
        /// The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.
        /// </summary>
        /// <value>The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.</value>
        [DataMember(Name="revisionHistoryLimit", EmitDefaultValue=false)]
        public int? RevisionHistoryLimit { get; set; }

        /// <summary>
        /// A label query over pods that are managed by the daemon set. Must match in order to be controlled. If empty, defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
        /// </summary>
        /// <value>A label query over pods that are managed by the daemon set. Must match in order to be controlled. If empty, defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors</value>
        [DataMember(Name="selector", EmitDefaultValue=false)]
        public V1LabelSelector Selector { get; set; }

        /// <summary>
        /// An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template&#39;s node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
        /// </summary>
        /// <value>An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template&#39;s node selector (or on every node if no node selector is specified). More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template</value>
        [DataMember(Name="template", EmitDefaultValue=false)]
        public V1PodTemplateSpec Template { get; set; }

        /// <summary>
        /// DEPRECATED. A sequence number representing a specific generation of the template. Populated by the system. It can be set only during the creation.
        /// </summary>
        /// <value>DEPRECATED. A sequence number representing a specific generation of the template. Populated by the system. It can be set only during the creation.</value>
        [DataMember(Name="templateGeneration", EmitDefaultValue=false)]
        public long? TemplateGeneration { get; set; }

        /// <summary>
        /// An update strategy to replace existing DaemonSet pods with new pods.
        /// </summary>
        /// <value>An update strategy to replace existing DaemonSet pods with new pods.</value>
        [DataMember(Name="updateStrategy", EmitDefaultValue=false)]
        public V1beta1DaemonSetUpdateStrategy UpdateStrategy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1beta1DaemonSetSpec {\n");
            sb.Append("  MinReadySeconds: ").Append(MinReadySeconds).Append("\n");
            sb.Append("  RevisionHistoryLimit: ").Append(RevisionHistoryLimit).Append("\n");
            sb.Append("  Selector: ").Append(Selector).Append("\n");
            sb.Append("  Template: ").Append(Template).Append("\n");
            sb.Append("  TemplateGeneration: ").Append(TemplateGeneration).Append("\n");
            sb.Append("  UpdateStrategy: ").Append(UpdateStrategy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1beta1DaemonSetSpec);
        }

        /// <summary>
        /// Returns true if V1beta1DaemonSetSpec instances are equal
        /// </summary>
        /// <param name="other">Instance of V1beta1DaemonSetSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1beta1DaemonSetSpec other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MinReadySeconds == other.MinReadySeconds ||
                    this.MinReadySeconds != null &&
                    this.MinReadySeconds.Equals(other.MinReadySeconds)
                ) && 
                (
                    this.RevisionHistoryLimit == other.RevisionHistoryLimit ||
                    this.RevisionHistoryLimit != null &&
                    this.RevisionHistoryLimit.Equals(other.RevisionHistoryLimit)
                ) && 
                (
                    this.Selector == other.Selector ||
                    this.Selector != null &&
                    this.Selector.Equals(other.Selector)
                ) && 
                (
                    this.Template == other.Template ||
                    this.Template != null &&
                    this.Template.Equals(other.Template)
                ) && 
                (
                    this.TemplateGeneration == other.TemplateGeneration ||
                    this.TemplateGeneration != null &&
                    this.TemplateGeneration.Equals(other.TemplateGeneration)
                ) && 
                (
                    this.UpdateStrategy == other.UpdateStrategy ||
                    this.UpdateStrategy != null &&
                    this.UpdateStrategy.Equals(other.UpdateStrategy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MinReadySeconds != null)
                    hash = hash * 59 + this.MinReadySeconds.GetHashCode();
                if (this.RevisionHistoryLimit != null)
                    hash = hash * 59 + this.RevisionHistoryLimit.GetHashCode();
                if (this.Selector != null)
                    hash = hash * 59 + this.Selector.GetHashCode();
                if (this.Template != null)
                    hash = hash * 59 + this.Template.GetHashCode();
                if (this.TemplateGeneration != null)
                    hash = hash * 59 + this.TemplateGeneration.GetHashCode();
                if (this.UpdateStrategy != null)
                    hash = hash * 59 + this.UpdateStrategy.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
