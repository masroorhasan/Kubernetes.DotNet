/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// HorizontalPodAutoscalerSpec describes the desired functionality of the HorizontalPodAutoscaler.
    /// </summary>
    [DataContract]
    public partial class V2alpha1HorizontalPodAutoscalerSpec :  IEquatable<V2alpha1HorizontalPodAutoscalerSpec>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V2alpha1HorizontalPodAutoscalerSpec" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V2alpha1HorizontalPodAutoscalerSpec() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V2alpha1HorizontalPodAutoscalerSpec" /> class.
        /// </summary>
        /// <param name="MaxReplicas">maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas. (required).</param>
        /// <param name="Metrics">metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond..</param>
        /// <param name="MinReplicas">minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down. It defaults to 1 pod..</param>
        /// <param name="ScaleTargetRef">scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count. (required).</param>
        public V2alpha1HorizontalPodAutoscalerSpec(int? MaxReplicas = default(int?), List<V2alpha1MetricSpec> Metrics = default(List<V2alpha1MetricSpec>), int? MinReplicas = default(int?), V2alpha1CrossVersionObjectReference ScaleTargetRef = default(V2alpha1CrossVersionObjectReference))
        {
            // to ensure "MaxReplicas" is required (not null)
            if (MaxReplicas == null)
            {
                throw new InvalidDataException("MaxReplicas is a required property for V2alpha1HorizontalPodAutoscalerSpec and cannot be null");
            }
            else
            {
                this.MaxReplicas = MaxReplicas;
            }
            // to ensure "ScaleTargetRef" is required (not null)
            if (ScaleTargetRef == null)
            {
                throw new InvalidDataException("ScaleTargetRef is a required property for V2alpha1HorizontalPodAutoscalerSpec and cannot be null");
            }
            else
            {
                this.ScaleTargetRef = ScaleTargetRef;
            }
            this.Metrics = Metrics;
            this.MinReplicas = MinReplicas;
        }
        
        /// <summary>
        /// maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.
        /// </summary>
        /// <value>maxReplicas is the upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less that minReplicas.</value>
        [DataMember(Name="maxReplicas", EmitDefaultValue=false)]
        public int? MaxReplicas { get; set; }

        /// <summary>
        /// metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond.
        /// </summary>
        /// <value>metrics contains the specifications for which to use to calculate the desired replica count (the maximum replica count across all metrics will be used).  The desired replica count is calculated multiplying the ratio between the target value and the current value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa.  See the individual metric source types for more information about how each type of metric must respond.</value>
        [DataMember(Name="metrics", EmitDefaultValue=false)]
        public List<V2alpha1MetricSpec> Metrics { get; set; }

        /// <summary>
        /// minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down. It defaults to 1 pod.
        /// </summary>
        /// <value>minReplicas is the lower limit for the number of replicas to which the autoscaler can scale down. It defaults to 1 pod.</value>
        [DataMember(Name="minReplicas", EmitDefaultValue=false)]
        public int? MinReplicas { get; set; }

        /// <summary>
        /// scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count.
        /// </summary>
        /// <value>scaleTargetRef points to the target resource to scale, and is used to the pods for which metrics should be collected, as well as to actually change the replica count.</value>
        [DataMember(Name="scaleTargetRef", EmitDefaultValue=false)]
        public V2alpha1CrossVersionObjectReference ScaleTargetRef { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V2alpha1HorizontalPodAutoscalerSpec {\n");
            sb.Append("  MaxReplicas: ").Append(MaxReplicas).Append("\n");
            sb.Append("  Metrics: ").Append(Metrics).Append("\n");
            sb.Append("  MinReplicas: ").Append(MinReplicas).Append("\n");
            sb.Append("  ScaleTargetRef: ").Append(ScaleTargetRef).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V2alpha1HorizontalPodAutoscalerSpec);
        }

        /// <summary>
        /// Returns true if V2alpha1HorizontalPodAutoscalerSpec instances are equal
        /// </summary>
        /// <param name="other">Instance of V2alpha1HorizontalPodAutoscalerSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V2alpha1HorizontalPodAutoscalerSpec other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MaxReplicas == other.MaxReplicas ||
                    this.MaxReplicas != null &&
                    this.MaxReplicas.Equals(other.MaxReplicas)
                ) && 
                (
                    this.Metrics == other.Metrics ||
                    this.Metrics != null &&
                    this.Metrics.SequenceEqual(other.Metrics)
                ) && 
                (
                    this.MinReplicas == other.MinReplicas ||
                    this.MinReplicas != null &&
                    this.MinReplicas.Equals(other.MinReplicas)
                ) && 
                (
                    this.ScaleTargetRef == other.ScaleTargetRef ||
                    this.ScaleTargetRef != null &&
                    this.ScaleTargetRef.Equals(other.ScaleTargetRef)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MaxReplicas != null)
                    hash = hash * 59 + this.MaxReplicas.GetHashCode();
                if (this.Metrics != null)
                    hash = hash * 59 + this.Metrics.GetHashCode();
                if (this.MinReplicas != null)
                    hash = hash * 59 + this.MinReplicas.GetHashCode();
                if (this.ScaleTargetRef != null)
                    hash = hash * 59 + this.ScaleTargetRef.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
