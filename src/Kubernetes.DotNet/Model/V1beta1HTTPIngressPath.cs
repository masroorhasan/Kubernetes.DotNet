/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// HTTPIngressPath associates a path regex with a backend. Incoming urls matching the path are forwarded to the backend.
    /// </summary>
    [DataContract]
    public partial class V1beta1HTTPIngressPath :  IEquatable<V1beta1HTTPIngressPath>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1beta1HTTPIngressPath" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1beta1HTTPIngressPath() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1beta1HTTPIngressPath" /> class.
        /// </summary>
        /// <param name="Backend">Backend defines the referenced service endpoint to which the traffic will be forwarded to. (required).</param>
        /// <param name="Path">Path is an extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \&quot;path\&quot; part of a URL as defined by RFC 3986. Paths must begin with a &#39;/&#39;. If unspecified, the path defaults to a catch all sending traffic to the backend..</param>
        public V1beta1HTTPIngressPath(V1beta1IngressBackend Backend = default(V1beta1IngressBackend), string Path = default(string))
        {
            // to ensure "Backend" is required (not null)
            if (Backend == null)
            {
                throw new InvalidDataException("Backend is a required property for V1beta1HTTPIngressPath and cannot be null");
            }
            else
            {
                this.Backend = Backend;
            }
            this.Path = Path;
        }
        
        /// <summary>
        /// Backend defines the referenced service endpoint to which the traffic will be forwarded to.
        /// </summary>
        /// <value>Backend defines the referenced service endpoint to which the traffic will be forwarded to.</value>
        [DataMember(Name="backend", EmitDefaultValue=false)]
        public V1beta1IngressBackend Backend { get; set; }

        /// <summary>
        /// Path is an extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \&quot;path\&quot; part of a URL as defined by RFC 3986. Paths must begin with a &#39;/&#39;. If unspecified, the path defaults to a catch all sending traffic to the backend.
        /// </summary>
        /// <value>Path is an extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \&quot;path\&quot; part of a URL as defined by RFC 3986. Paths must begin with a &#39;/&#39;. If unspecified, the path defaults to a catch all sending traffic to the backend.</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1beta1HTTPIngressPath {\n");
            sb.Append("  Backend: ").Append(Backend).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1beta1HTTPIngressPath);
        }

        /// <summary>
        /// Returns true if V1beta1HTTPIngressPath instances are equal
        /// </summary>
        /// <param name="other">Instance of V1beta1HTTPIngressPath to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1beta1HTTPIngressPath other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Backend == other.Backend ||
                    this.Backend != null &&
                    this.Backend.Equals(other.Backend)
                ) && 
                (
                    this.Path == other.Path ||
                    this.Path != null &&
                    this.Path.Equals(other.Path)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Backend != null)
                    hash = hash * 59 + this.Backend.GetHashCode();
                if (this.Path != null)
                    hash = hash * 59 + this.Path.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
