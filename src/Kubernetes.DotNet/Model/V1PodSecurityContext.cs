/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
    /// </summary>
    [DataContract]
    public partial class V1PodSecurityContext :  IEquatable<V1PodSecurityContext>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1PodSecurityContext" /> class.
        /// </summary>
        /// <param name="FsGroup">A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR&#39;d with rw-rw- -- -  If unset, the Kubelet will not modify the ownership and permissions of any volume..</param>
        /// <param name="RunAsNonRoot">Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence..</param>
        /// <param name="RunAsUser">The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container..</param>
        /// <param name="SeLinuxOptions">The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container..</param>
        /// <param name="SupplementalGroups">A list of groups applied to the first process run in each container, in addition to the container&#39;s primary GID.  If unspecified, no groups will be added to any container..</param>
        public V1PodSecurityContext(long? FsGroup = default(long?), bool? RunAsNonRoot = default(bool?), long? RunAsUser = default(long?), V1SELinuxOptions SeLinuxOptions = default(V1SELinuxOptions), List<long?> SupplementalGroups = default(List<long?>))
        {
            this.FsGroup = FsGroup;
            this.RunAsNonRoot = RunAsNonRoot;
            this.RunAsUser = RunAsUser;
            this.SeLinuxOptions = SeLinuxOptions;
            this.SupplementalGroups = SupplementalGroups;
        }
        
        /// <summary>
        /// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR&#39;d with rw-rw- -- -  If unset, the Kubelet will not modify the ownership and permissions of any volume.
        /// </summary>
        /// <value>A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR&#39;d with rw-rw- -- -  If unset, the Kubelet will not modify the ownership and permissions of any volume.</value>
        [DataMember(Name="fsGroup", EmitDefaultValue=false)]
        public long? FsGroup { get; set; }

        /// <summary>
        /// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
        /// </summary>
        /// <value>Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.</value>
        [DataMember(Name="runAsNonRoot", EmitDefaultValue=false)]
        public bool? RunAsNonRoot { get; set; }

        /// <summary>
        /// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        /// </summary>
        /// <value>The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.</value>
        [DataMember(Name="runAsUser", EmitDefaultValue=false)]
        public long? RunAsUser { get; set; }

        /// <summary>
        /// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
        /// </summary>
        /// <value>The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.</value>
        [DataMember(Name="seLinuxOptions", EmitDefaultValue=false)]
        public V1SELinuxOptions SeLinuxOptions { get; set; }

        /// <summary>
        /// A list of groups applied to the first process run in each container, in addition to the container&#39;s primary GID.  If unspecified, no groups will be added to any container.
        /// </summary>
        /// <value>A list of groups applied to the first process run in each container, in addition to the container&#39;s primary GID.  If unspecified, no groups will be added to any container.</value>
        [DataMember(Name="supplementalGroups", EmitDefaultValue=false)]
        public List<long?> SupplementalGroups { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1PodSecurityContext {\n");
            sb.Append("  FsGroup: ").Append(FsGroup).Append("\n");
            sb.Append("  RunAsNonRoot: ").Append(RunAsNonRoot).Append("\n");
            sb.Append("  RunAsUser: ").Append(RunAsUser).Append("\n");
            sb.Append("  SeLinuxOptions: ").Append(SeLinuxOptions).Append("\n");
            sb.Append("  SupplementalGroups: ").Append(SupplementalGroups).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1PodSecurityContext);
        }

        /// <summary>
        /// Returns true if V1PodSecurityContext instances are equal
        /// </summary>
        /// <param name="other">Instance of V1PodSecurityContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1PodSecurityContext other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FsGroup == other.FsGroup ||
                    this.FsGroup != null &&
                    this.FsGroup.Equals(other.FsGroup)
                ) && 
                (
                    this.RunAsNonRoot == other.RunAsNonRoot ||
                    this.RunAsNonRoot != null &&
                    this.RunAsNonRoot.Equals(other.RunAsNonRoot)
                ) && 
                (
                    this.RunAsUser == other.RunAsUser ||
                    this.RunAsUser != null &&
                    this.RunAsUser.Equals(other.RunAsUser)
                ) && 
                (
                    this.SeLinuxOptions == other.SeLinuxOptions ||
                    this.SeLinuxOptions != null &&
                    this.SeLinuxOptions.Equals(other.SeLinuxOptions)
                ) && 
                (
                    this.SupplementalGroups == other.SupplementalGroups ||
                    this.SupplementalGroups != null &&
                    this.SupplementalGroups.SequenceEqual(other.SupplementalGroups)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FsGroup != null)
                    hash = hash * 59 + this.FsGroup.GetHashCode();
                if (this.RunAsNonRoot != null)
                    hash = hash * 59 + this.RunAsNonRoot.GetHashCode();
                if (this.RunAsUser != null)
                    hash = hash * 59 + this.RunAsUser.GetHashCode();
                if (this.SeLinuxOptions != null)
                    hash = hash * 59 + this.SeLinuxOptions.GetHashCode();
                if (this.SupplementalGroups != null)
                    hash = hash * 59 + this.SupplementalGroups.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
