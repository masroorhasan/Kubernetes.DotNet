/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// VolumeMount describes a mounting of a Volume within a container.
    /// </summary>
    [DataContract]
    public partial class V1VolumeMount :  IEquatable<V1VolumeMount>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1VolumeMount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1VolumeMount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1VolumeMount" /> class.
        /// </summary>
        /// <param name="MountPath">Path within the container at which the volume should be mounted.  Must not contain &#39;:&#39;. (required).</param>
        /// <param name="Name">This must match the Name of a Volume. (required).</param>
        /// <param name="_ReadOnly">Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false..</param>
        /// <param name="SubPath">Path within the volume from which the container&#39;s volume should be mounted. Defaults to \&quot;\&quot; (volume&#39;s root)..</param>
        public V1VolumeMount(string MountPath = default(string), string Name = default(string), bool? _ReadOnly = default(bool?), string SubPath = default(string))
        {
            // to ensure "MountPath" is required (not null)
            if (MountPath == null)
            {
                throw new InvalidDataException("MountPath is a required property for V1VolumeMount and cannot be null");
            }
            else
            {
                this.MountPath = MountPath;
            }
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for V1VolumeMount and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this._ReadOnly = _ReadOnly;
            this.SubPath = SubPath;
        }
        
        /// <summary>
        /// Path within the container at which the volume should be mounted.  Must not contain &#39;:&#39;.
        /// </summary>
        /// <value>Path within the container at which the volume should be mounted.  Must not contain &#39;:&#39;.</value>
        [DataMember(Name="mountPath", EmitDefaultValue=false)]
        public string MountPath { get; set; }

        /// <summary>
        /// This must match the Name of a Volume.
        /// </summary>
        /// <value>This must match the Name of a Volume.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
        /// </summary>
        /// <value>Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.</value>
        [DataMember(Name="readOnly", EmitDefaultValue=false)]
        public bool? _ReadOnly { get; set; }

        /// <summary>
        /// Path within the volume from which the container&#39;s volume should be mounted. Defaults to \&quot;\&quot; (volume&#39;s root).
        /// </summary>
        /// <value>Path within the volume from which the container&#39;s volume should be mounted. Defaults to \&quot;\&quot; (volume&#39;s root).</value>
        [DataMember(Name="subPath", EmitDefaultValue=false)]
        public string SubPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1VolumeMount {\n");
            sb.Append("  MountPath: ").Append(MountPath).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  _ReadOnly: ").Append(_ReadOnly).Append("\n");
            sb.Append("  SubPath: ").Append(SubPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1VolumeMount);
        }

        /// <summary>
        /// Returns true if V1VolumeMount instances are equal
        /// </summary>
        /// <param name="other">Instance of V1VolumeMount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1VolumeMount other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.MountPath == other.MountPath ||
                    this.MountPath != null &&
                    this.MountPath.Equals(other.MountPath)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this._ReadOnly == other._ReadOnly ||
                    this._ReadOnly != null &&
                    this._ReadOnly.Equals(other._ReadOnly)
                ) && 
                (
                    this.SubPath == other.SubPath ||
                    this.SubPath != null &&
                    this.SubPath.Equals(other.SubPath)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.MountPath != null)
                    hash = hash * 59 + this.MountPath.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this._ReadOnly != null)
                    hash = hash * 59 + this._ReadOnly.GetHashCode();
                if (this.SubPath != null)
                    hash = hash * 59 + this.SubPath.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
