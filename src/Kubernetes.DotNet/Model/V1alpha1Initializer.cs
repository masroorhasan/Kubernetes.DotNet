/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// Initializer describes the name and the failure policy of an initializer, and what resources it applies to.
    /// </summary>
    [DataContract]
    public partial class V1alpha1Initializer :  IEquatable<V1alpha1Initializer>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1alpha1Initializer" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1alpha1Initializer() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1alpha1Initializer" /> class.
        /// </summary>
        /// <param name="FailurePolicy">FailurePolicy defines what happens if the responsible initializer controller fails to takes action. Allowed values are Ignore, or Fail. If \&quot;Ignore\&quot; is set, initializer is removed from the initializers list of an object if the timeout is reached; If \&quot;Fail\&quot; is set, admissionregistration returns timeout error if the timeout is reached..</param>
        /// <param name="Name">Name is the identifier of the initializer. It will be added to the object that needs to be initialized. Name should be fully qualified, e.g., alwayspullimages.kubernetes.io, where \&quot;alwayspullimages\&quot; is the name of the webhook, and kubernetes.io is the name of the organization. Required (required).</param>
        /// <param name="Rules">Rules describes what resources/subresources the initializer cares about. The initializer cares about an operation if it matches _any_ Rule. Rule.Resources must not include subresources..</param>
        public V1alpha1Initializer(string FailurePolicy = default(string), string Name = default(string), List<V1alpha1Rule> Rules = default(List<V1alpha1Rule>))
        {
            // to ensure "Name" is required (not null)
            if (Name == null)
            {
                throw new InvalidDataException("Name is a required property for V1alpha1Initializer and cannot be null");
            }
            else
            {
                this.Name = Name;
            }
            this.FailurePolicy = FailurePolicy;
            this.Rules = Rules;
        }
        
        /// <summary>
        /// FailurePolicy defines what happens if the responsible initializer controller fails to takes action. Allowed values are Ignore, or Fail. If \&quot;Ignore\&quot; is set, initializer is removed from the initializers list of an object if the timeout is reached; If \&quot;Fail\&quot; is set, admissionregistration returns timeout error if the timeout is reached.
        /// </summary>
        /// <value>FailurePolicy defines what happens if the responsible initializer controller fails to takes action. Allowed values are Ignore, or Fail. If \&quot;Ignore\&quot; is set, initializer is removed from the initializers list of an object if the timeout is reached; If \&quot;Fail\&quot; is set, admissionregistration returns timeout error if the timeout is reached.</value>
        [DataMember(Name="failurePolicy", EmitDefaultValue=false)]
        public string FailurePolicy { get; set; }

        /// <summary>
        /// Name is the identifier of the initializer. It will be added to the object that needs to be initialized. Name should be fully qualified, e.g., alwayspullimages.kubernetes.io, where \&quot;alwayspullimages\&quot; is the name of the webhook, and kubernetes.io is the name of the organization. Required
        /// </summary>
        /// <value>Name is the identifier of the initializer. It will be added to the object that needs to be initialized. Name should be fully qualified, e.g., alwayspullimages.kubernetes.io, where \&quot;alwayspullimages\&quot; is the name of the webhook, and kubernetes.io is the name of the organization. Required</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Rules describes what resources/subresources the initializer cares about. The initializer cares about an operation if it matches _any_ Rule. Rule.Resources must not include subresources.
        /// </summary>
        /// <value>Rules describes what resources/subresources the initializer cares about. The initializer cares about an operation if it matches _any_ Rule. Rule.Resources must not include subresources.</value>
        [DataMember(Name="rules", EmitDefaultValue=false)]
        public List<V1alpha1Rule> Rules { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1alpha1Initializer {\n");
            sb.Append("  FailurePolicy: ").Append(FailurePolicy).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1alpha1Initializer);
        }

        /// <summary>
        /// Returns true if V1alpha1Initializer instances are equal
        /// </summary>
        /// <param name="other">Instance of V1alpha1Initializer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1alpha1Initializer other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.FailurePolicy == other.FailurePolicy ||
                    this.FailurePolicy != null &&
                    this.FailurePolicy.Equals(other.FailurePolicy)
                ) && 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Rules == other.Rules ||
                    this.Rules != null &&
                    this.Rules.SequenceEqual(other.Rules)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.FailurePolicy != null)
                    hash = hash * 59 + this.FailurePolicy.GetHashCode();
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Rules != null)
                    hash = hash * 59 + this.Rules.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
