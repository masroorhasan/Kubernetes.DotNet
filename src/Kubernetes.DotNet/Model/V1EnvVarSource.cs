/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// EnvVarSource represents a source for the value of an EnvVar.
    /// </summary>
    [DataContract]
    public partial class V1EnvVarSource :  IEquatable<V1EnvVarSource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1EnvVarSource" /> class.
        /// </summary>
        /// <param name="ConfigMapKeyRef">Selects a key of a ConfigMap..</param>
        /// <param name="FieldRef">Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP..</param>
        /// <param name="ResourceFieldRef">Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported..</param>
        /// <param name="SecretKeyRef">Selects a key of a secret in the pod&#39;s namespace.</param>
        public V1EnvVarSource(V1ConfigMapKeySelector ConfigMapKeyRef = default(V1ConfigMapKeySelector), V1ObjectFieldSelector FieldRef = default(V1ObjectFieldSelector), V1ResourceFieldSelector ResourceFieldRef = default(V1ResourceFieldSelector), V1SecretKeySelector SecretKeyRef = default(V1SecretKeySelector))
        {
            this.ConfigMapKeyRef = ConfigMapKeyRef;
            this.FieldRef = FieldRef;
            this.ResourceFieldRef = ResourceFieldRef;
            this.SecretKeyRef = SecretKeyRef;
        }
        
        /// <summary>
        /// Selects a key of a ConfigMap.
        /// </summary>
        /// <value>Selects a key of a ConfigMap.</value>
        [DataMember(Name="configMapKeyRef", EmitDefaultValue=false)]
        public V1ConfigMapKeySelector ConfigMapKeyRef { get; set; }

        /// <summary>
        /// Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.
        /// </summary>
        /// <value>Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP.</value>
        [DataMember(Name="fieldRef", EmitDefaultValue=false)]
        public V1ObjectFieldSelector FieldRef { get; set; }

        /// <summary>
        /// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
        /// </summary>
        /// <value>Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.</value>
        [DataMember(Name="resourceFieldRef", EmitDefaultValue=false)]
        public V1ResourceFieldSelector ResourceFieldRef { get; set; }

        /// <summary>
        /// Selects a key of a secret in the pod&#39;s namespace
        /// </summary>
        /// <value>Selects a key of a secret in the pod&#39;s namespace</value>
        [DataMember(Name="secretKeyRef", EmitDefaultValue=false)]
        public V1SecretKeySelector SecretKeyRef { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1EnvVarSource {\n");
            sb.Append("  ConfigMapKeyRef: ").Append(ConfigMapKeyRef).Append("\n");
            sb.Append("  FieldRef: ").Append(FieldRef).Append("\n");
            sb.Append("  ResourceFieldRef: ").Append(ResourceFieldRef).Append("\n");
            sb.Append("  SecretKeyRef: ").Append(SecretKeyRef).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1EnvVarSource);
        }

        /// <summary>
        /// Returns true if V1EnvVarSource instances are equal
        /// </summary>
        /// <param name="other">Instance of V1EnvVarSource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1EnvVarSource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ConfigMapKeyRef == other.ConfigMapKeyRef ||
                    this.ConfigMapKeyRef != null &&
                    this.ConfigMapKeyRef.Equals(other.ConfigMapKeyRef)
                ) && 
                (
                    this.FieldRef == other.FieldRef ||
                    this.FieldRef != null &&
                    this.FieldRef.Equals(other.FieldRef)
                ) && 
                (
                    this.ResourceFieldRef == other.ResourceFieldRef ||
                    this.ResourceFieldRef != null &&
                    this.ResourceFieldRef.Equals(other.ResourceFieldRef)
                ) && 
                (
                    this.SecretKeyRef == other.SecretKeyRef ||
                    this.SecretKeyRef != null &&
                    this.SecretKeyRef.Equals(other.SecretKeyRef)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ConfigMapKeyRef != null)
                    hash = hash * 59 + this.ConfigMapKeyRef.GetHashCode();
                if (this.FieldRef != null)
                    hash = hash * 59 + this.FieldRef.GetHashCode();
                if (this.ResourceFieldRef != null)
                    hash = hash * 59 + this.ResourceFieldRef.GetHashCode();
                if (this.SecretKeyRef != null)
                    hash = hash * 59 + this.SecretKeyRef.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
