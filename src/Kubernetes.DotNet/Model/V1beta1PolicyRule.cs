/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// PolicyRule holds information that describes a policy rule, but does not contain information about who the rule applies to or which namespace the rule applies to.
    /// </summary>
    [DataContract]
    public partial class V1beta1PolicyRule :  IEquatable<V1beta1PolicyRule>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1beta1PolicyRule" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1beta1PolicyRule() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1beta1PolicyRule" /> class.
        /// </summary>
        /// <param name="ApiGroups">APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed..</param>
        /// <param name="NonResourceURLs">NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \&quot;pods\&quot; or \&quot;secrets\&quot;) or non-resource URL paths (such as \&quot;/api\&quot;),  but not both..</param>
        /// <param name="ResourceNames">ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed..</param>
        /// <param name="Resources">Resources is a list of resources this rule applies to.  ResourceAll represents all resources..</param>
        /// <param name="Verbs">Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds. (required).</param>
        public V1beta1PolicyRule(List<string> ApiGroups = default(List<string>), List<string> NonResourceURLs = default(List<string>), List<string> ResourceNames = default(List<string>), List<string> Resources = default(List<string>), List<string> Verbs = default(List<string>))
        {
            // to ensure "Verbs" is required (not null)
            if (Verbs == null)
            {
                throw new InvalidDataException("Verbs is a required property for V1beta1PolicyRule and cannot be null");
            }
            else
            {
                this.Verbs = Verbs;
            }
            this.ApiGroups = ApiGroups;
            this.NonResourceURLs = NonResourceURLs;
            this.ResourceNames = ResourceNames;
            this.Resources = Resources;
        }
        
        /// <summary>
        /// APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.
        /// </summary>
        /// <value>APIGroups is the name of the APIGroup that contains the resources.  If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed.</value>
        [DataMember(Name="apiGroups", EmitDefaultValue=false)]
        public List<string> ApiGroups { get; set; }

        /// <summary>
        /// NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \&quot;pods\&quot; or \&quot;secrets\&quot;) or non-resource URL paths (such as \&quot;/api\&quot;),  but not both.
        /// </summary>
        /// <value>NonResourceURLs is a set of partial urls that a user should have access to.  *s are allowed, but only as the full, final step in the path Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as \&quot;pods\&quot; or \&quot;secrets\&quot;) or non-resource URL paths (such as \&quot;/api\&quot;),  but not both.</value>
        [DataMember(Name="nonResourceURLs", EmitDefaultValue=false)]
        public List<string> NonResourceURLs { get; set; }

        /// <summary>
        /// ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.
        /// </summary>
        /// <value>ResourceNames is an optional white list of names that the rule applies to.  An empty set means that everything is allowed.</value>
        [DataMember(Name="resourceNames", EmitDefaultValue=false)]
        public List<string> ResourceNames { get; set; }

        /// <summary>
        /// Resources is a list of resources this rule applies to.  ResourceAll represents all resources.
        /// </summary>
        /// <value>Resources is a list of resources this rule applies to.  ResourceAll represents all resources.</value>
        [DataMember(Name="resources", EmitDefaultValue=false)]
        public List<string> Resources { get; set; }

        /// <summary>
        /// Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.
        /// </summary>
        /// <value>Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule.  VerbAll represents all kinds.</value>
        [DataMember(Name="verbs", EmitDefaultValue=false)]
        public List<string> Verbs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1beta1PolicyRule {\n");
            sb.Append("  ApiGroups: ").Append(ApiGroups).Append("\n");
            sb.Append("  NonResourceURLs: ").Append(NonResourceURLs).Append("\n");
            sb.Append("  ResourceNames: ").Append(ResourceNames).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("  Verbs: ").Append(Verbs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1beta1PolicyRule);
        }

        /// <summary>
        /// Returns true if V1beta1PolicyRule instances are equal
        /// </summary>
        /// <param name="other">Instance of V1beta1PolicyRule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1beta1PolicyRule other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ApiGroups == other.ApiGroups ||
                    this.ApiGroups != null &&
                    this.ApiGroups.SequenceEqual(other.ApiGroups)
                ) && 
                (
                    this.NonResourceURLs == other.NonResourceURLs ||
                    this.NonResourceURLs != null &&
                    this.NonResourceURLs.SequenceEqual(other.NonResourceURLs)
                ) && 
                (
                    this.ResourceNames == other.ResourceNames ||
                    this.ResourceNames != null &&
                    this.ResourceNames.SequenceEqual(other.ResourceNames)
                ) && 
                (
                    this.Resources == other.Resources ||
                    this.Resources != null &&
                    this.Resources.SequenceEqual(other.Resources)
                ) && 
                (
                    this.Verbs == other.Verbs ||
                    this.Verbs != null &&
                    this.Verbs.SequenceEqual(other.Verbs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ApiGroups != null)
                    hash = hash * 59 + this.ApiGroups.GetHashCode();
                if (this.NonResourceURLs != null)
                    hash = hash * 59 + this.NonResourceURLs.GetHashCode();
                if (this.ResourceNames != null)
                    hash = hash * 59 + this.ResourceNames.GetHashCode();
                if (this.Resources != null)
                    hash = hash * 59 + this.Resources.GetHashCode();
                if (this.Verbs != null)
                    hash = hash * 59 + this.Verbs.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
