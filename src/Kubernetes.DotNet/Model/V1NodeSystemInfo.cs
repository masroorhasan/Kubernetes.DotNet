/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
    /// </summary>
    [DataContract]
    public partial class V1NodeSystemInfo :  IEquatable<V1NodeSystemInfo>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1NodeSystemInfo" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1NodeSystemInfo() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1NodeSystemInfo" /> class.
        /// </summary>
        /// <param name="Architecture">The Architecture reported by the node (required).</param>
        /// <param name="BootID">Boot ID reported by the node. (required).</param>
        /// <param name="ContainerRuntimeVersion">ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0). (required).</param>
        /// <param name="KernelVersion">Kernel Version reported by the node from &#39;uname -r&#39; (e.g. 3.16.0-0.bpo.4-amd64). (required).</param>
        /// <param name="KubeProxyVersion">KubeProxy Version reported by the node. (required).</param>
        /// <param name="KubeletVersion">Kubelet Version reported by the node. (required).</param>
        /// <param name="MachineID">MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html (required).</param>
        /// <param name="OperatingSystem">The Operating System reported by the node (required).</param>
        /// <param name="OsImage">OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)). (required).</param>
        /// <param name="SystemUUID">SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-US/Red_Hat_Subscription_Management/1/html/RHSM/getting-system-uuid.html (required).</param>
        public V1NodeSystemInfo(string Architecture = default(string), string BootID = default(string), string ContainerRuntimeVersion = default(string), string KernelVersion = default(string), string KubeProxyVersion = default(string), string KubeletVersion = default(string), string MachineID = default(string), string OperatingSystem = default(string), string OsImage = default(string), string SystemUUID = default(string))
        {
            // to ensure "Architecture" is required (not null)
            if (Architecture == null)
            {
                throw new InvalidDataException("Architecture is a required property for V1NodeSystemInfo and cannot be null");
            }
            else
            {
                this.Architecture = Architecture;
            }
            // to ensure "BootID" is required (not null)
            if (BootID == null)
            {
                throw new InvalidDataException("BootID is a required property for V1NodeSystemInfo and cannot be null");
            }
            else
            {
                this.BootID = BootID;
            }
            // to ensure "ContainerRuntimeVersion" is required (not null)
            if (ContainerRuntimeVersion == null)
            {
                throw new InvalidDataException("ContainerRuntimeVersion is a required property for V1NodeSystemInfo and cannot be null");
            }
            else
            {
                this.ContainerRuntimeVersion = ContainerRuntimeVersion;
            }
            // to ensure "KernelVersion" is required (not null)
            if (KernelVersion == null)
            {
                throw new InvalidDataException("KernelVersion is a required property for V1NodeSystemInfo and cannot be null");
            }
            else
            {
                this.KernelVersion = KernelVersion;
            }
            // to ensure "KubeProxyVersion" is required (not null)
            if (KubeProxyVersion == null)
            {
                throw new InvalidDataException("KubeProxyVersion is a required property for V1NodeSystemInfo and cannot be null");
            }
            else
            {
                this.KubeProxyVersion = KubeProxyVersion;
            }
            // to ensure "KubeletVersion" is required (not null)
            if (KubeletVersion == null)
            {
                throw new InvalidDataException("KubeletVersion is a required property for V1NodeSystemInfo and cannot be null");
            }
            else
            {
                this.KubeletVersion = KubeletVersion;
            }
            // to ensure "MachineID" is required (not null)
            if (MachineID == null)
            {
                throw new InvalidDataException("MachineID is a required property for V1NodeSystemInfo and cannot be null");
            }
            else
            {
                this.MachineID = MachineID;
            }
            // to ensure "OperatingSystem" is required (not null)
            if (OperatingSystem == null)
            {
                throw new InvalidDataException("OperatingSystem is a required property for V1NodeSystemInfo and cannot be null");
            }
            else
            {
                this.OperatingSystem = OperatingSystem;
            }
            // to ensure "OsImage" is required (not null)
            if (OsImage == null)
            {
                throw new InvalidDataException("OsImage is a required property for V1NodeSystemInfo and cannot be null");
            }
            else
            {
                this.OsImage = OsImage;
            }
            // to ensure "SystemUUID" is required (not null)
            if (SystemUUID == null)
            {
                throw new InvalidDataException("SystemUUID is a required property for V1NodeSystemInfo and cannot be null");
            }
            else
            {
                this.SystemUUID = SystemUUID;
            }
        }
        
        /// <summary>
        /// The Architecture reported by the node
        /// </summary>
        /// <value>The Architecture reported by the node</value>
        [DataMember(Name="architecture", EmitDefaultValue=false)]
        public string Architecture { get; set; }

        /// <summary>
        /// Boot ID reported by the node.
        /// </summary>
        /// <value>Boot ID reported by the node.</value>
        [DataMember(Name="bootID", EmitDefaultValue=false)]
        public string BootID { get; set; }

        /// <summary>
        /// ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).
        /// </summary>
        /// <value>ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).</value>
        [DataMember(Name="containerRuntimeVersion", EmitDefaultValue=false)]
        public string ContainerRuntimeVersion { get; set; }

        /// <summary>
        /// Kernel Version reported by the node from &#39;uname -r&#39; (e.g. 3.16.0-0.bpo.4-amd64).
        /// </summary>
        /// <value>Kernel Version reported by the node from &#39;uname -r&#39; (e.g. 3.16.0-0.bpo.4-amd64).</value>
        [DataMember(Name="kernelVersion", EmitDefaultValue=false)]
        public string KernelVersion { get; set; }

        /// <summary>
        /// KubeProxy Version reported by the node.
        /// </summary>
        /// <value>KubeProxy Version reported by the node.</value>
        [DataMember(Name="kubeProxyVersion", EmitDefaultValue=false)]
        public string KubeProxyVersion { get; set; }

        /// <summary>
        /// Kubelet Version reported by the node.
        /// </summary>
        /// <value>Kubelet Version reported by the node.</value>
        [DataMember(Name="kubeletVersion", EmitDefaultValue=false)]
        public string KubeletVersion { get; set; }

        /// <summary>
        /// MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
        /// </summary>
        /// <value>MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html</value>
        [DataMember(Name="machineID", EmitDefaultValue=false)]
        public string MachineID { get; set; }

        /// <summary>
        /// The Operating System reported by the node
        /// </summary>
        /// <value>The Operating System reported by the node</value>
        [DataMember(Name="operatingSystem", EmitDefaultValue=false)]
        public string OperatingSystem { get; set; }

        /// <summary>
        /// OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
        /// </summary>
        /// <value>OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).</value>
        [DataMember(Name="osImage", EmitDefaultValue=false)]
        public string OsImage { get; set; }

        /// <summary>
        /// SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-US/Red_Hat_Subscription_Management/1/html/RHSM/getting-system-uuid.html
        /// </summary>
        /// <value>SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-US/Red_Hat_Subscription_Management/1/html/RHSM/getting-system-uuid.html</value>
        [DataMember(Name="systemUUID", EmitDefaultValue=false)]
        public string SystemUUID { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1NodeSystemInfo {\n");
            sb.Append("  Architecture: ").Append(Architecture).Append("\n");
            sb.Append("  BootID: ").Append(BootID).Append("\n");
            sb.Append("  ContainerRuntimeVersion: ").Append(ContainerRuntimeVersion).Append("\n");
            sb.Append("  KernelVersion: ").Append(KernelVersion).Append("\n");
            sb.Append("  KubeProxyVersion: ").Append(KubeProxyVersion).Append("\n");
            sb.Append("  KubeletVersion: ").Append(KubeletVersion).Append("\n");
            sb.Append("  MachineID: ").Append(MachineID).Append("\n");
            sb.Append("  OperatingSystem: ").Append(OperatingSystem).Append("\n");
            sb.Append("  OsImage: ").Append(OsImage).Append("\n");
            sb.Append("  SystemUUID: ").Append(SystemUUID).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1NodeSystemInfo);
        }

        /// <summary>
        /// Returns true if V1NodeSystemInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of V1NodeSystemInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1NodeSystemInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Architecture == other.Architecture ||
                    this.Architecture != null &&
                    this.Architecture.Equals(other.Architecture)
                ) && 
                (
                    this.BootID == other.BootID ||
                    this.BootID != null &&
                    this.BootID.Equals(other.BootID)
                ) && 
                (
                    this.ContainerRuntimeVersion == other.ContainerRuntimeVersion ||
                    this.ContainerRuntimeVersion != null &&
                    this.ContainerRuntimeVersion.Equals(other.ContainerRuntimeVersion)
                ) && 
                (
                    this.KernelVersion == other.KernelVersion ||
                    this.KernelVersion != null &&
                    this.KernelVersion.Equals(other.KernelVersion)
                ) && 
                (
                    this.KubeProxyVersion == other.KubeProxyVersion ||
                    this.KubeProxyVersion != null &&
                    this.KubeProxyVersion.Equals(other.KubeProxyVersion)
                ) && 
                (
                    this.KubeletVersion == other.KubeletVersion ||
                    this.KubeletVersion != null &&
                    this.KubeletVersion.Equals(other.KubeletVersion)
                ) && 
                (
                    this.MachineID == other.MachineID ||
                    this.MachineID != null &&
                    this.MachineID.Equals(other.MachineID)
                ) && 
                (
                    this.OperatingSystem == other.OperatingSystem ||
                    this.OperatingSystem != null &&
                    this.OperatingSystem.Equals(other.OperatingSystem)
                ) && 
                (
                    this.OsImage == other.OsImage ||
                    this.OsImage != null &&
                    this.OsImage.Equals(other.OsImage)
                ) && 
                (
                    this.SystemUUID == other.SystemUUID ||
                    this.SystemUUID != null &&
                    this.SystemUUID.Equals(other.SystemUUID)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Architecture != null)
                    hash = hash * 59 + this.Architecture.GetHashCode();
                if (this.BootID != null)
                    hash = hash * 59 + this.BootID.GetHashCode();
                if (this.ContainerRuntimeVersion != null)
                    hash = hash * 59 + this.ContainerRuntimeVersion.GetHashCode();
                if (this.KernelVersion != null)
                    hash = hash * 59 + this.KernelVersion.GetHashCode();
                if (this.KubeProxyVersion != null)
                    hash = hash * 59 + this.KubeProxyVersion.GetHashCode();
                if (this.KubeletVersion != null)
                    hash = hash * 59 + this.KubeletVersion.GetHashCode();
                if (this.MachineID != null)
                    hash = hash * 59 + this.MachineID.GetHashCode();
                if (this.OperatingSystem != null)
                    hash = hash * 59 + this.OperatingSystem.GetHashCode();
                if (this.OsImage != null)
                    hash = hash * 59 + this.OsImage.GetHashCode();
                if (this.SystemUUID != null)
                    hash = hash * 59 + this.SystemUUID.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
