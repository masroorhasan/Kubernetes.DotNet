/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// Represents a projected volume source
    /// </summary>
    [DataContract]
    public partial class V1ProjectedVolumeSource :  IEquatable<V1ProjectedVolumeSource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1ProjectedVolumeSource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1ProjectedVolumeSource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1ProjectedVolumeSource" /> class.
        /// </summary>
        /// <param name="DefaultMode">Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set..</param>
        /// <param name="Sources">list of volume projections (required).</param>
        public V1ProjectedVolumeSource(int? DefaultMode = default(int?), List<V1VolumeProjection> Sources = default(List<V1VolumeProjection>))
        {
            // to ensure "Sources" is required (not null)
            if (Sources == null)
            {
                throw new InvalidDataException("Sources is a required property for V1ProjectedVolumeSource and cannot be null");
            }
            else
            {
                this.Sources = Sources;
            }
            this.DefaultMode = DefaultMode;
        }
        
        /// <summary>
        /// Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
        /// </summary>
        /// <value>Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.</value>
        [DataMember(Name="defaultMode", EmitDefaultValue=false)]
        public int? DefaultMode { get; set; }

        /// <summary>
        /// list of volume projections
        /// </summary>
        /// <value>list of volume projections</value>
        [DataMember(Name="sources", EmitDefaultValue=false)]
        public List<V1VolumeProjection> Sources { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1ProjectedVolumeSource {\n");
            sb.Append("  DefaultMode: ").Append(DefaultMode).Append("\n");
            sb.Append("  Sources: ").Append(Sources).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1ProjectedVolumeSource);
        }

        /// <summary>
        /// Returns true if V1ProjectedVolumeSource instances are equal
        /// </summary>
        /// <param name="other">Instance of V1ProjectedVolumeSource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1ProjectedVolumeSource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DefaultMode == other.DefaultMode ||
                    this.DefaultMode != null &&
                    this.DefaultMode.Equals(other.DefaultMode)
                ) && 
                (
                    this.Sources == other.Sources ||
                    this.Sources != null &&
                    this.Sources.SequenceEqual(other.Sources)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DefaultMode != null)
                    hash = hash * 59 + this.DefaultMode.GetHashCode();
                if (this.Sources != null)
                    hash = hash * 59 + this.Sources.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
