/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// CronJobSpec describes how the job execution will look like and when it will actually run.
    /// </summary>
    [DataContract]
    public partial class V2alpha1CronJobSpec :  IEquatable<V2alpha1CronJobSpec>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V2alpha1CronJobSpec" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V2alpha1CronJobSpec() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V2alpha1CronJobSpec" /> class.
        /// </summary>
        /// <param name="ConcurrencyPolicy">Specifies how to treat concurrent executions of a Job. Defaults to Allow..</param>
        /// <param name="FailedJobsHistoryLimit">The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified..</param>
        /// <param name="JobTemplate">Specifies the job that will be created when executing a CronJob. (required).</param>
        /// <param name="Schedule">The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron. (required).</param>
        /// <param name="StartingDeadlineSeconds">Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones..</param>
        /// <param name="SuccessfulJobsHistoryLimit">The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified..</param>
        /// <param name="Suspend">This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false..</param>
        public V2alpha1CronJobSpec(string ConcurrencyPolicy = default(string), int? FailedJobsHistoryLimit = default(int?), V2alpha1JobTemplateSpec JobTemplate = default(V2alpha1JobTemplateSpec), string Schedule = default(string), long? StartingDeadlineSeconds = default(long?), int? SuccessfulJobsHistoryLimit = default(int?), bool? Suspend = default(bool?))
        {
            // to ensure "JobTemplate" is required (not null)
            if (JobTemplate == null)
            {
                throw new InvalidDataException("JobTemplate is a required property for V2alpha1CronJobSpec and cannot be null");
            }
            else
            {
                this.JobTemplate = JobTemplate;
            }
            // to ensure "Schedule" is required (not null)
            if (Schedule == null)
            {
                throw new InvalidDataException("Schedule is a required property for V2alpha1CronJobSpec and cannot be null");
            }
            else
            {
                this.Schedule = Schedule;
            }
            this.ConcurrencyPolicy = ConcurrencyPolicy;
            this.FailedJobsHistoryLimit = FailedJobsHistoryLimit;
            this.StartingDeadlineSeconds = StartingDeadlineSeconds;
            this.SuccessfulJobsHistoryLimit = SuccessfulJobsHistoryLimit;
            this.Suspend = Suspend;
        }
        
        /// <summary>
        /// Specifies how to treat concurrent executions of a Job. Defaults to Allow.
        /// </summary>
        /// <value>Specifies how to treat concurrent executions of a Job. Defaults to Allow.</value>
        [DataMember(Name="concurrencyPolicy", EmitDefaultValue=false)]
        public string ConcurrencyPolicy { get; set; }

        /// <summary>
        /// The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.
        /// </summary>
        /// <value>The number of failed finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.</value>
        [DataMember(Name="failedJobsHistoryLimit", EmitDefaultValue=false)]
        public int? FailedJobsHistoryLimit { get; set; }

        /// <summary>
        /// Specifies the job that will be created when executing a CronJob.
        /// </summary>
        /// <value>Specifies the job that will be created when executing a CronJob.</value>
        [DataMember(Name="jobTemplate", EmitDefaultValue=false)]
        public V2alpha1JobTemplateSpec JobTemplate { get; set; }

        /// <summary>
        /// The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.
        /// </summary>
        /// <value>The schedule in Cron format, see https://en.wikipedia.org/wiki/Cron.</value>
        [DataMember(Name="schedule", EmitDefaultValue=false)]
        public string Schedule { get; set; }

        /// <summary>
        /// Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.
        /// </summary>
        /// <value>Optional deadline in seconds for starting the job if it misses scheduled time for any reason.  Missed jobs executions will be counted as failed ones.</value>
        [DataMember(Name="startingDeadlineSeconds", EmitDefaultValue=false)]
        public long? StartingDeadlineSeconds { get; set; }

        /// <summary>
        /// The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.
        /// </summary>
        /// <value>The number of successful finished jobs to retain. This is a pointer to distinguish between explicit zero and not specified.</value>
        [DataMember(Name="successfulJobsHistoryLimit", EmitDefaultValue=false)]
        public int? SuccessfulJobsHistoryLimit { get; set; }

        /// <summary>
        /// This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.
        /// </summary>
        /// <value>This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.  Defaults to false.</value>
        [DataMember(Name="suspend", EmitDefaultValue=false)]
        public bool? Suspend { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V2alpha1CronJobSpec {\n");
            sb.Append("  ConcurrencyPolicy: ").Append(ConcurrencyPolicy).Append("\n");
            sb.Append("  FailedJobsHistoryLimit: ").Append(FailedJobsHistoryLimit).Append("\n");
            sb.Append("  JobTemplate: ").Append(JobTemplate).Append("\n");
            sb.Append("  Schedule: ").Append(Schedule).Append("\n");
            sb.Append("  StartingDeadlineSeconds: ").Append(StartingDeadlineSeconds).Append("\n");
            sb.Append("  SuccessfulJobsHistoryLimit: ").Append(SuccessfulJobsHistoryLimit).Append("\n");
            sb.Append("  Suspend: ").Append(Suspend).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V2alpha1CronJobSpec);
        }

        /// <summary>
        /// Returns true if V2alpha1CronJobSpec instances are equal
        /// </summary>
        /// <param name="other">Instance of V2alpha1CronJobSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V2alpha1CronJobSpec other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ConcurrencyPolicy == other.ConcurrencyPolicy ||
                    this.ConcurrencyPolicy != null &&
                    this.ConcurrencyPolicy.Equals(other.ConcurrencyPolicy)
                ) && 
                (
                    this.FailedJobsHistoryLimit == other.FailedJobsHistoryLimit ||
                    this.FailedJobsHistoryLimit != null &&
                    this.FailedJobsHistoryLimit.Equals(other.FailedJobsHistoryLimit)
                ) && 
                (
                    this.JobTemplate == other.JobTemplate ||
                    this.JobTemplate != null &&
                    this.JobTemplate.Equals(other.JobTemplate)
                ) && 
                (
                    this.Schedule == other.Schedule ||
                    this.Schedule != null &&
                    this.Schedule.Equals(other.Schedule)
                ) && 
                (
                    this.StartingDeadlineSeconds == other.StartingDeadlineSeconds ||
                    this.StartingDeadlineSeconds != null &&
                    this.StartingDeadlineSeconds.Equals(other.StartingDeadlineSeconds)
                ) && 
                (
                    this.SuccessfulJobsHistoryLimit == other.SuccessfulJobsHistoryLimit ||
                    this.SuccessfulJobsHistoryLimit != null &&
                    this.SuccessfulJobsHistoryLimit.Equals(other.SuccessfulJobsHistoryLimit)
                ) && 
                (
                    this.Suspend == other.Suspend ||
                    this.Suspend != null &&
                    this.Suspend.Equals(other.Suspend)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ConcurrencyPolicy != null)
                    hash = hash * 59 + this.ConcurrencyPolicy.GetHashCode();
                if (this.FailedJobsHistoryLimit != null)
                    hash = hash * 59 + this.FailedJobsHistoryLimit.GetHashCode();
                if (this.JobTemplate != null)
                    hash = hash * 59 + this.JobTemplate.GetHashCode();
                if (this.Schedule != null)
                    hash = hash * 59 + this.Schedule.GetHashCode();
                if (this.StartingDeadlineSeconds != null)
                    hash = hash * 59 + this.StartingDeadlineSeconds.GetHashCode();
                if (this.SuccessfulJobsHistoryLimit != null)
                    hash = hash * 59 + this.SuccessfulJobsHistoryLimit.GetHashCode();
                if (this.Suspend != null)
                    hash = hash * 59 + this.Suspend.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
