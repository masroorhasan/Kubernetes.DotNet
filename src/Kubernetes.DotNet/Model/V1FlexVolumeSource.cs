/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin. This is an alpha feature and may change in future.
    /// </summary>
    [DataContract]
    public partial class V1FlexVolumeSource :  IEquatable<V1FlexVolumeSource>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1FlexVolumeSource" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1FlexVolumeSource() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1FlexVolumeSource" /> class.
        /// </summary>
        /// <param name="Driver">Driver is the name of the driver to use for this volume. (required).</param>
        /// <param name="FsType">Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. The default filesystem depends on FlexVolume script..</param>
        /// <param name="Options">Optional: Extra command options if any..</param>
        /// <param name="_ReadOnly">Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts..</param>
        /// <param name="SecretRef">Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts..</param>
        public V1FlexVolumeSource(string Driver = default(string), string FsType = default(string), Dictionary<string, string> Options = default(Dictionary<string, string>), bool? _ReadOnly = default(bool?), V1LocalObjectReference SecretRef = default(V1LocalObjectReference))
        {
            // to ensure "Driver" is required (not null)
            if (Driver == null)
            {
                throw new InvalidDataException("Driver is a required property for V1FlexVolumeSource and cannot be null");
            }
            else
            {
                this.Driver = Driver;
            }
            this.FsType = FsType;
            this.Options = Options;
            this._ReadOnly = _ReadOnly;
            this.SecretRef = SecretRef;
        }
        
        /// <summary>
        /// Driver is the name of the driver to use for this volume.
        /// </summary>
        /// <value>Driver is the name of the driver to use for this volume.</value>
        [DataMember(Name="driver", EmitDefaultValue=false)]
        public string Driver { get; set; }

        /// <summary>
        /// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. The default filesystem depends on FlexVolume script.
        /// </summary>
        /// <value>Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \&quot;ext4\&quot;, \&quot;xfs\&quot;, \&quot;ntfs\&quot;. The default filesystem depends on FlexVolume script.</value>
        [DataMember(Name="fsType", EmitDefaultValue=false)]
        public string FsType { get; set; }

        /// <summary>
        /// Optional: Extra command options if any.
        /// </summary>
        /// <value>Optional: Extra command options if any.</value>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public Dictionary<string, string> Options { get; set; }

        /// <summary>
        /// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        /// </summary>
        /// <value>Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.</value>
        [DataMember(Name="readOnly", EmitDefaultValue=false)]
        public bool? _ReadOnly { get; set; }

        /// <summary>
        /// Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
        /// </summary>
        /// <value>Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.</value>
        [DataMember(Name="secretRef", EmitDefaultValue=false)]
        public V1LocalObjectReference SecretRef { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1FlexVolumeSource {\n");
            sb.Append("  Driver: ").Append(Driver).Append("\n");
            sb.Append("  FsType: ").Append(FsType).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  _ReadOnly: ").Append(_ReadOnly).Append("\n");
            sb.Append("  SecretRef: ").Append(SecretRef).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1FlexVolumeSource);
        }

        /// <summary>
        /// Returns true if V1FlexVolumeSource instances are equal
        /// </summary>
        /// <param name="other">Instance of V1FlexVolumeSource to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1FlexVolumeSource other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Driver == other.Driver ||
                    this.Driver != null &&
                    this.Driver.Equals(other.Driver)
                ) && 
                (
                    this.FsType == other.FsType ||
                    this.FsType != null &&
                    this.FsType.Equals(other.FsType)
                ) && 
                (
                    this.Options == other.Options ||
                    this.Options != null &&
                    this.Options.SequenceEqual(other.Options)
                ) && 
                (
                    this._ReadOnly == other._ReadOnly ||
                    this._ReadOnly != null &&
                    this._ReadOnly.Equals(other._ReadOnly)
                ) && 
                (
                    this.SecretRef == other.SecretRef ||
                    this.SecretRef != null &&
                    this.SecretRef.Equals(other.SecretRef)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Driver != null)
                    hash = hash * 59 + this.Driver.GetHashCode();
                if (this.FsType != null)
                    hash = hash * 59 + this.FsType.GetHashCode();
                if (this.Options != null)
                    hash = hash * 59 + this.Options.GetHashCode();
                if (this._ReadOnly != null)
                    hash = hash * 59 + this._ReadOnly.GetHashCode();
                if (this.SecretRef != null)
                    hash = hash * 59 + this.SecretRef.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
