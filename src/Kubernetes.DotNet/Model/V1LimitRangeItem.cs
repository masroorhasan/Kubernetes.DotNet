/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// LimitRangeItem defines a min/max usage limit for any resource that matches on kind.
    /// </summary>
    [DataContract]
    public partial class V1LimitRangeItem :  IEquatable<V1LimitRangeItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1LimitRangeItem" /> class.
        /// </summary>
        /// <param name="_Default">Default resource requirement limit value by resource name if resource limit is omitted..</param>
        /// <param name="DefaultRequest">DefaultRequest is the default resource requirement request value by resource name if resource request is omitted..</param>
        /// <param name="Max">Max usage constraints on this kind by resource name..</param>
        /// <param name="MaxLimitRequestRatio">MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource..</param>
        /// <param name="Min">Min usage constraints on this kind by resource name..</param>
        /// <param name="Type">Type of resource that this limit applies to..</param>
        public V1LimitRangeItem(Dictionary<string, string> _Default = default(Dictionary<string, string>), Dictionary<string, string> DefaultRequest = default(Dictionary<string, string>), Dictionary<string, string> Max = default(Dictionary<string, string>), Dictionary<string, string> MaxLimitRequestRatio = default(Dictionary<string, string>), Dictionary<string, string> Min = default(Dictionary<string, string>), string Type = default(string))
        {
            this._Default = _Default;
            this.DefaultRequest = DefaultRequest;
            this.Max = Max;
            this.MaxLimitRequestRatio = MaxLimitRequestRatio;
            this.Min = Min;
            this.Type = Type;
        }
        
        /// <summary>
        /// Default resource requirement limit value by resource name if resource limit is omitted.
        /// </summary>
        /// <value>Default resource requirement limit value by resource name if resource limit is omitted.</value>
        [DataMember(Name="default", EmitDefaultValue=false)]
        public Dictionary<string, string> _Default { get; set; }

        /// <summary>
        /// DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
        /// </summary>
        /// <value>DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.</value>
        [DataMember(Name="defaultRequest", EmitDefaultValue=false)]
        public Dictionary<string, string> DefaultRequest { get; set; }

        /// <summary>
        /// Max usage constraints on this kind by resource name.
        /// </summary>
        /// <value>Max usage constraints on this kind by resource name.</value>
        [DataMember(Name="max", EmitDefaultValue=false)]
        public Dictionary<string, string> Max { get; set; }

        /// <summary>
        /// MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
        /// </summary>
        /// <value>MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.</value>
        [DataMember(Name="maxLimitRequestRatio", EmitDefaultValue=false)]
        public Dictionary<string, string> MaxLimitRequestRatio { get; set; }

        /// <summary>
        /// Min usage constraints on this kind by resource name.
        /// </summary>
        /// <value>Min usage constraints on this kind by resource name.</value>
        [DataMember(Name="min", EmitDefaultValue=false)]
        public Dictionary<string, string> Min { get; set; }

        /// <summary>
        /// Type of resource that this limit applies to.
        /// </summary>
        /// <value>Type of resource that this limit applies to.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1LimitRangeItem {\n");
            sb.Append("  _Default: ").Append(_Default).Append("\n");
            sb.Append("  DefaultRequest: ").Append(DefaultRequest).Append("\n");
            sb.Append("  Max: ").Append(Max).Append("\n");
            sb.Append("  MaxLimitRequestRatio: ").Append(MaxLimitRequestRatio).Append("\n");
            sb.Append("  Min: ").Append(Min).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1LimitRangeItem);
        }

        /// <summary>
        /// Returns true if V1LimitRangeItem instances are equal
        /// </summary>
        /// <param name="other">Instance of V1LimitRangeItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1LimitRangeItem other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this._Default == other._Default ||
                    this._Default != null &&
                    this._Default.SequenceEqual(other._Default)
                ) && 
                (
                    this.DefaultRequest == other.DefaultRequest ||
                    this.DefaultRequest != null &&
                    this.DefaultRequest.SequenceEqual(other.DefaultRequest)
                ) && 
                (
                    this.Max == other.Max ||
                    this.Max != null &&
                    this.Max.SequenceEqual(other.Max)
                ) && 
                (
                    this.MaxLimitRequestRatio == other.MaxLimitRequestRatio ||
                    this.MaxLimitRequestRatio != null &&
                    this.MaxLimitRequestRatio.SequenceEqual(other.MaxLimitRequestRatio)
                ) && 
                (
                    this.Min == other.Min ||
                    this.Min != null &&
                    this.Min.SequenceEqual(other.Min)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this._Default != null)
                    hash = hash * 59 + this._Default.GetHashCode();
                if (this.DefaultRequest != null)
                    hash = hash * 59 + this.DefaultRequest.GetHashCode();
                if (this.Max != null)
                    hash = hash * 59 + this.Max.GetHashCode();
                if (this.MaxLimitRequestRatio != null)
                    hash = hash * 59 + this.MaxLimitRequestRatio.GetHashCode();
                if (this.Min != null)
                    hash = hash * 59 + this.Min.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
