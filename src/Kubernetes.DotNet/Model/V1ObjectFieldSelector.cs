/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// ObjectFieldSelector selects an APIVersioned field of an object.
    /// </summary>
    [DataContract]
    public partial class V1ObjectFieldSelector :  IEquatable<V1ObjectFieldSelector>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1ObjectFieldSelector" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected V1ObjectFieldSelector() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="V1ObjectFieldSelector" /> class.
        /// </summary>
        /// <param name="ApiVersion">Version of the schema the FieldPath is written in terms of, defaults to \&quot;v1\&quot;..</param>
        /// <param name="FieldPath">Path of the field to select in the specified API version. (required).</param>
        public V1ObjectFieldSelector(string ApiVersion = default(string), string FieldPath = default(string))
        {
            // to ensure "FieldPath" is required (not null)
            if (FieldPath == null)
            {
                throw new InvalidDataException("FieldPath is a required property for V1ObjectFieldSelector and cannot be null");
            }
            else
            {
                this.FieldPath = FieldPath;
            }
            this.ApiVersion = ApiVersion;
        }
        
        /// <summary>
        /// Version of the schema the FieldPath is written in terms of, defaults to \&quot;v1\&quot;.
        /// </summary>
        /// <value>Version of the schema the FieldPath is written in terms of, defaults to \&quot;v1\&quot;.</value>
        [DataMember(Name="apiVersion", EmitDefaultValue=false)]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Path of the field to select in the specified API version.
        /// </summary>
        /// <value>Path of the field to select in the specified API version.</value>
        [DataMember(Name="fieldPath", EmitDefaultValue=false)]
        public string FieldPath { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1ObjectFieldSelector {\n");
            sb.Append("  ApiVersion: ").Append(ApiVersion).Append("\n");
            sb.Append("  FieldPath: ").Append(FieldPath).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1ObjectFieldSelector);
        }

        /// <summary>
        /// Returns true if V1ObjectFieldSelector instances are equal
        /// </summary>
        /// <param name="other">Instance of V1ObjectFieldSelector to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1ObjectFieldSelector other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ApiVersion == other.ApiVersion ||
                    this.ApiVersion != null &&
                    this.ApiVersion.Equals(other.ApiVersion)
                ) && 
                (
                    this.FieldPath == other.FieldPath ||
                    this.FieldPath != null &&
                    this.FieldPath.Equals(other.FieldPath)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ApiVersion != null)
                    hash = hash * 59 + this.ApiVersion.GetHashCode();
                if (this.FieldPath != null)
                    hash = hash * 59 + this.FieldPath.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
