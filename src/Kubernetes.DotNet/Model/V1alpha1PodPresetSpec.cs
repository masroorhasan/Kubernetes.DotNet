/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// PodPresetSpec is a description of a pod preset.
    /// </summary>
    [DataContract]
    public partial class V1alpha1PodPresetSpec :  IEquatable<V1alpha1PodPresetSpec>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1alpha1PodPresetSpec" /> class.
        /// </summary>
        /// <param name="Env">Env defines the collection of EnvVar to inject into containers..</param>
        /// <param name="EnvFrom">EnvFrom defines the collection of EnvFromSource to inject into containers..</param>
        /// <param name="Selector">Selector is a label query over a set of resources, in this case pods. Required..</param>
        /// <param name="VolumeMounts">VolumeMounts defines the collection of VolumeMount to inject into containers..</param>
        /// <param name="Volumes">Volumes defines the collection of Volume to inject into the pod..</param>
        public V1alpha1PodPresetSpec(List<V1EnvVar> Env = default(List<V1EnvVar>), List<V1EnvFromSource> EnvFrom = default(List<V1EnvFromSource>), V1LabelSelector Selector = default(V1LabelSelector), List<V1VolumeMount> VolumeMounts = default(List<V1VolumeMount>), List<V1Volume> Volumes = default(List<V1Volume>))
        {
            this.Env = Env;
            this.EnvFrom = EnvFrom;
            this.Selector = Selector;
            this.VolumeMounts = VolumeMounts;
            this.Volumes = Volumes;
        }
        
        /// <summary>
        /// Env defines the collection of EnvVar to inject into containers.
        /// </summary>
        /// <value>Env defines the collection of EnvVar to inject into containers.</value>
        [DataMember(Name="env", EmitDefaultValue=false)]
        public List<V1EnvVar> Env { get; set; }

        /// <summary>
        /// EnvFrom defines the collection of EnvFromSource to inject into containers.
        /// </summary>
        /// <value>EnvFrom defines the collection of EnvFromSource to inject into containers.</value>
        [DataMember(Name="envFrom", EmitDefaultValue=false)]
        public List<V1EnvFromSource> EnvFrom { get; set; }

        /// <summary>
        /// Selector is a label query over a set of resources, in this case pods. Required.
        /// </summary>
        /// <value>Selector is a label query over a set of resources, in this case pods. Required.</value>
        [DataMember(Name="selector", EmitDefaultValue=false)]
        public V1LabelSelector Selector { get; set; }

        /// <summary>
        /// VolumeMounts defines the collection of VolumeMount to inject into containers.
        /// </summary>
        /// <value>VolumeMounts defines the collection of VolumeMount to inject into containers.</value>
        [DataMember(Name="volumeMounts", EmitDefaultValue=false)]
        public List<V1VolumeMount> VolumeMounts { get; set; }

        /// <summary>
        /// Volumes defines the collection of Volume to inject into the pod.
        /// </summary>
        /// <value>Volumes defines the collection of Volume to inject into the pod.</value>
        [DataMember(Name="volumes", EmitDefaultValue=false)]
        public List<V1Volume> Volumes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1alpha1PodPresetSpec {\n");
            sb.Append("  Env: ").Append(Env).Append("\n");
            sb.Append("  EnvFrom: ").Append(EnvFrom).Append("\n");
            sb.Append("  Selector: ").Append(Selector).Append("\n");
            sb.Append("  VolumeMounts: ").Append(VolumeMounts).Append("\n");
            sb.Append("  Volumes: ").Append(Volumes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1alpha1PodPresetSpec);
        }

        /// <summary>
        /// Returns true if V1alpha1PodPresetSpec instances are equal
        /// </summary>
        /// <param name="other">Instance of V1alpha1PodPresetSpec to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1alpha1PodPresetSpec other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Env == other.Env ||
                    this.Env != null &&
                    this.Env.SequenceEqual(other.Env)
                ) && 
                (
                    this.EnvFrom == other.EnvFrom ||
                    this.EnvFrom != null &&
                    this.EnvFrom.SequenceEqual(other.EnvFrom)
                ) && 
                (
                    this.Selector == other.Selector ||
                    this.Selector != null &&
                    this.Selector.Equals(other.Selector)
                ) && 
                (
                    this.VolumeMounts == other.VolumeMounts ||
                    this.VolumeMounts != null &&
                    this.VolumeMounts.SequenceEqual(other.VolumeMounts)
                ) && 
                (
                    this.Volumes == other.Volumes ||
                    this.Volumes != null &&
                    this.Volumes.SequenceEqual(other.Volumes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Env != null)
                    hash = hash * 59 + this.Env.GetHashCode();
                if (this.EnvFrom != null)
                    hash = hash * 59 + this.EnvFrom.GetHashCode();
                if (this.Selector != null)
                    hash = hash * 59 + this.Selector.GetHashCode();
                if (this.VolumeMounts != null)
                    hash = hash * 59 + this.VolumeMounts.GetHashCode();
                if (this.Volumes != null)
                    hash = hash * 59 + this.Volumes.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
