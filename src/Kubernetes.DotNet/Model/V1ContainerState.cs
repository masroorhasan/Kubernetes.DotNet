/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Kubernetes.DotNet.Client.SwaggerDateConverter;

namespace Kubernetes.DotNet.Model
{
    /// <summary>
    /// ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
    /// </summary>
    [DataContract]
    public partial class V1ContainerState :  IEquatable<V1ContainerState>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="V1ContainerState" /> class.
        /// </summary>
        /// <param name="Running">Details about a running container.</param>
        /// <param name="Terminated">Details about a terminated container.</param>
        /// <param name="Waiting">Details about a waiting container.</param>
        public V1ContainerState(V1ContainerStateRunning Running = default(V1ContainerStateRunning), V1ContainerStateTerminated Terminated = default(V1ContainerStateTerminated), V1ContainerStateWaiting Waiting = default(V1ContainerStateWaiting))
        {
            this.Running = Running;
            this.Terminated = Terminated;
            this.Waiting = Waiting;
        }
        
        /// <summary>
        /// Details about a running container
        /// </summary>
        /// <value>Details about a running container</value>
        [DataMember(Name="running", EmitDefaultValue=false)]
        public V1ContainerStateRunning Running { get; set; }

        /// <summary>
        /// Details about a terminated container
        /// </summary>
        /// <value>Details about a terminated container</value>
        [DataMember(Name="terminated", EmitDefaultValue=false)]
        public V1ContainerStateTerminated Terminated { get; set; }

        /// <summary>
        /// Details about a waiting container
        /// </summary>
        /// <value>Details about a waiting container</value>
        [DataMember(Name="waiting", EmitDefaultValue=false)]
        public V1ContainerStateWaiting Waiting { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class V1ContainerState {\n");
            sb.Append("  Running: ").Append(Running).Append("\n");
            sb.Append("  Terminated: ").Append(Terminated).Append("\n");
            sb.Append("  Waiting: ").Append(Waiting).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as V1ContainerState);
        }

        /// <summary>
        /// Returns true if V1ContainerState instances are equal
        /// </summary>
        /// <param name="other">Instance of V1ContainerState to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(V1ContainerState other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Running == other.Running ||
                    this.Running != null &&
                    this.Running.Equals(other.Running)
                ) && 
                (
                    this.Terminated == other.Terminated ||
                    this.Terminated != null &&
                    this.Terminated.Equals(other.Terminated)
                ) && 
                (
                    this.Waiting == other.Waiting ||
                    this.Waiting != null &&
                    this.Waiting.Equals(other.Waiting)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Running != null)
                    hash = hash * 59 + this.Running.GetHashCode();
                if (this.Terminated != null)
                    hash = hash * 59 + this.Terminated.GetHashCode();
                if (this.Waiting != null)
                    hash = hash * 59 + this.Waiting.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
