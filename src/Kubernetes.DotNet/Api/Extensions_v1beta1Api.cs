/* 
 * Kubernetes
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1.7.10
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Kubernetes.DotNet.Client;
using Kubernetes.DotNet.Model;

namespace Kubernetes.DotNet.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IExtensions_v1beta1Api : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1DaemonSet</returns>
        V1beta1DaemonSet CreateNamespacedDaemonSet (string _namespace, V1beta1DaemonSet body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1DaemonSet</returns>
        ApiResponse<V1beta1DaemonSet> CreateNamespacedDaemonSetWithHttpInfo (string _namespace, V1beta1DaemonSet body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Deployment</returns>
        ExtensionsV1beta1Deployment CreateNamespacedDeployment (string _namespace, ExtensionsV1beta1Deployment body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Deployment</returns>
        ApiResponse<ExtensionsV1beta1Deployment> CreateNamespacedDeploymentWithHttpInfo (string _namespace, ExtensionsV1beta1Deployment body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create rollback of a Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DeploymentRollback</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1DeploymentRollback</returns>
        ExtensionsV1beta1DeploymentRollback CreateNamespacedDeploymentRollback (string name, string _namespace, ExtensionsV1beta1DeploymentRollback body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create rollback of a Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DeploymentRollback</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1DeploymentRollback</returns>
        ApiResponse<ExtensionsV1beta1DeploymentRollback> CreateNamespacedDeploymentRollbackWithHttpInfo (string name, string _namespace, ExtensionsV1beta1DeploymentRollback body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create an Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1Ingress</returns>
        V1beta1Ingress CreateNamespacedIngress (string _namespace, V1beta1Ingress body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create an Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1Ingress</returns>
        ApiResponse<V1beta1Ingress> CreateNamespacedIngressWithHttpInfo (string _namespace, V1beta1Ingress body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1NetworkPolicy</returns>
        V1beta1NetworkPolicy CreateNamespacedNetworkPolicy (string _namespace, V1beta1NetworkPolicy body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1NetworkPolicy</returns>
        ApiResponse<V1beta1NetworkPolicy> CreateNamespacedNetworkPolicyWithHttpInfo (string _namespace, V1beta1NetworkPolicy body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1ReplicaSet</returns>
        V1beta1ReplicaSet CreateNamespacedReplicaSet (string _namespace, V1beta1ReplicaSet body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1ReplicaSet</returns>
        ApiResponse<V1beta1ReplicaSet> CreateNamespacedReplicaSetWithHttpInfo (string _namespace, V1beta1ReplicaSet body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1PodSecurityPolicy</returns>
        V1beta1PodSecurityPolicy CreatePodSecurityPolicy (V1beta1PodSecurityPolicy body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1PodSecurityPolicy</returns>
        ApiResponse<V1beta1PodSecurityPolicy> CreatePodSecurityPolicyWithHttpInfo (V1beta1PodSecurityPolicy body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1ThirdPartyResource</returns>
        V1beta1ThirdPartyResource CreateThirdPartyResource (V1beta1ThirdPartyResource body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1ThirdPartyResource</returns>
        ApiResponse<V1beta1ThirdPartyResource> CreateThirdPartyResourceWithHttpInfo (V1beta1ThirdPartyResource body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1Status</returns>
        V1Status DeleteCollectionNamespacedDaemonSet (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        ApiResponse<V1Status> DeleteCollectionNamespacedDaemonSetWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1Status</returns>
        V1Status DeleteCollectionNamespacedDeployment (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        ApiResponse<V1Status> DeleteCollectionNamespacedDeploymentWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1Status</returns>
        V1Status DeleteCollectionNamespacedIngress (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        ApiResponse<V1Status> DeleteCollectionNamespacedIngressWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1Status</returns>
        V1Status DeleteCollectionNamespacedNetworkPolicy (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        ApiResponse<V1Status> DeleteCollectionNamespacedNetworkPolicyWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1Status</returns>
        V1Status DeleteCollectionNamespacedReplicaSet (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        ApiResponse<V1Status> DeleteCollectionNamespacedReplicaSetWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1Status</returns>
        V1Status DeleteCollectionPodSecurityPolicy (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        ApiResponse<V1Status> DeleteCollectionPodSecurityPolicyWithHttpInfo (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1Status</returns>
        V1Status DeleteCollectionThirdPartyResource (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        ApiResponse<V1Status> DeleteCollectionThirdPartyResourceWithHttpInfo (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>V1Status</returns>
        V1Status DeleteNamespacedDaemonSet (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        ApiResponse<V1Status> DeleteNamespacedDaemonSetWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>V1Status</returns>
        V1Status DeleteNamespacedDeployment (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        ApiResponse<V1Status> DeleteNamespacedDeploymentWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete an Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>V1Status</returns>
        V1Status DeleteNamespacedIngress (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete an Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        ApiResponse<V1Status> DeleteNamespacedIngressWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>V1Status</returns>
        V1Status DeleteNamespacedNetworkPolicy (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        ApiResponse<V1Status> DeleteNamespacedNetworkPolicyWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>V1Status</returns>
        V1Status DeleteNamespacedReplicaSet (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        ApiResponse<V1Status> DeleteNamespacedReplicaSetWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>V1Status</returns>
        V1Status DeletePodSecurityPolicy (string name, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        ApiResponse<V1Status> DeletePodSecurityPolicyWithHttpInfo (string name, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>V1Status</returns>
        V1Status DeleteThirdPartyResource (string name, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        ApiResponse<V1Status> DeleteThirdPartyResourceWithHttpInfo (string name, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get available resources
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>V1APIResourceList</returns>
        V1APIResourceList GetAPIResources ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get available resources
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of V1APIResourceList</returns>
        ApiResponse<V1APIResourceList> GetAPIResourcesWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1beta1DaemonSetList</returns>
        V1beta1DaemonSetList ListDaemonSetForAllNamespaces (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1beta1DaemonSetList</returns>
        ApiResponse<V1beta1DaemonSetList> ListDaemonSetForAllNamespacesWithHttpInfo (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ExtensionsV1beta1DeploymentList</returns>
        ExtensionsV1beta1DeploymentList ListDeploymentForAllNamespaces (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1DeploymentList</returns>
        ApiResponse<ExtensionsV1beta1DeploymentList> ListDeploymentForAllNamespacesWithHttpInfo (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1beta1IngressList</returns>
        V1beta1IngressList ListIngressForAllNamespaces (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1beta1IngressList</returns>
        ApiResponse<V1beta1IngressList> ListIngressForAllNamespacesWithHttpInfo (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1beta1DaemonSetList</returns>
        V1beta1DaemonSetList ListNamespacedDaemonSet (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1beta1DaemonSetList</returns>
        ApiResponse<V1beta1DaemonSetList> ListNamespacedDaemonSetWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ExtensionsV1beta1DeploymentList</returns>
        ExtensionsV1beta1DeploymentList ListNamespacedDeployment (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1DeploymentList</returns>
        ApiResponse<ExtensionsV1beta1DeploymentList> ListNamespacedDeploymentWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1beta1IngressList</returns>
        V1beta1IngressList ListNamespacedIngress (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1beta1IngressList</returns>
        ApiResponse<V1beta1IngressList> ListNamespacedIngressWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1beta1NetworkPolicyList</returns>
        V1beta1NetworkPolicyList ListNamespacedNetworkPolicy (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1beta1NetworkPolicyList</returns>
        ApiResponse<V1beta1NetworkPolicyList> ListNamespacedNetworkPolicyWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1beta1ReplicaSetList</returns>
        V1beta1ReplicaSetList ListNamespacedReplicaSet (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1beta1ReplicaSetList</returns>
        ApiResponse<V1beta1ReplicaSetList> ListNamespacedReplicaSetWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1beta1NetworkPolicyList</returns>
        V1beta1NetworkPolicyList ListNetworkPolicyForAllNamespaces (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1beta1NetworkPolicyList</returns>
        ApiResponse<V1beta1NetworkPolicyList> ListNetworkPolicyForAllNamespacesWithHttpInfo (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1beta1PodSecurityPolicyList</returns>
        V1beta1PodSecurityPolicyList ListPodSecurityPolicy (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1beta1PodSecurityPolicyList</returns>
        ApiResponse<V1beta1PodSecurityPolicyList> ListPodSecurityPolicyWithHttpInfo (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1beta1ReplicaSetList</returns>
        V1beta1ReplicaSetList ListReplicaSetForAllNamespaces (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1beta1ReplicaSetList</returns>
        ApiResponse<V1beta1ReplicaSetList> ListReplicaSetForAllNamespacesWithHttpInfo (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1beta1ThirdPartyResourceList</returns>
        V1beta1ThirdPartyResourceList ListThirdPartyResource (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1beta1ThirdPartyResourceList</returns>
        ApiResponse<V1beta1ThirdPartyResourceList> ListThirdPartyResourceWithHttpInfo (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1DaemonSet</returns>
        V1beta1DaemonSet PatchNamespacedDaemonSet (string name, string _namespace, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1DaemonSet</returns>
        ApiResponse<V1beta1DaemonSet> PatchNamespacedDaemonSetWithHttpInfo (string name, string _namespace, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1DaemonSet</returns>
        V1beta1DaemonSet PatchNamespacedDaemonSetStatus (string name, string _namespace, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1DaemonSet</returns>
        ApiResponse<V1beta1DaemonSet> PatchNamespacedDaemonSetStatusWithHttpInfo (string name, string _namespace, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Deployment</returns>
        ExtensionsV1beta1Deployment PatchNamespacedDeployment (string name, string _namespace, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Deployment</returns>
        ApiResponse<ExtensionsV1beta1Deployment> PatchNamespacedDeploymentWithHttpInfo (string name, string _namespace, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update scale of the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Scale</returns>
        ExtensionsV1beta1Scale PatchNamespacedDeploymentScale (string name, string _namespace, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update scale of the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Scale</returns>
        ApiResponse<ExtensionsV1beta1Scale> PatchNamespacedDeploymentScaleWithHttpInfo (string name, string _namespace, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Deployment</returns>
        ExtensionsV1beta1Deployment PatchNamespacedDeploymentStatus (string name, string _namespace, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Deployment</returns>
        ApiResponse<ExtensionsV1beta1Deployment> PatchNamespacedDeploymentStatusWithHttpInfo (string name, string _namespace, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1Ingress</returns>
        V1beta1Ingress PatchNamespacedIngress (string name, string _namespace, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1Ingress</returns>
        ApiResponse<V1beta1Ingress> PatchNamespacedIngressWithHttpInfo (string name, string _namespace, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1Ingress</returns>
        V1beta1Ingress PatchNamespacedIngressStatus (string name, string _namespace, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1Ingress</returns>
        ApiResponse<V1beta1Ingress> PatchNamespacedIngressStatusWithHttpInfo (string name, string _namespace, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1NetworkPolicy</returns>
        V1beta1NetworkPolicy PatchNamespacedNetworkPolicy (string name, string _namespace, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1NetworkPolicy</returns>
        ApiResponse<V1beta1NetworkPolicy> PatchNamespacedNetworkPolicyWithHttpInfo (string name, string _namespace, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1ReplicaSet</returns>
        V1beta1ReplicaSet PatchNamespacedReplicaSet (string name, string _namespace, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1ReplicaSet</returns>
        ApiResponse<V1beta1ReplicaSet> PatchNamespacedReplicaSetWithHttpInfo (string name, string _namespace, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update scale of the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Scale</returns>
        ExtensionsV1beta1Scale PatchNamespacedReplicaSetScale (string name, string _namespace, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update scale of the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Scale</returns>
        ApiResponse<ExtensionsV1beta1Scale> PatchNamespacedReplicaSetScaleWithHttpInfo (string name, string _namespace, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1ReplicaSet</returns>
        V1beta1ReplicaSet PatchNamespacedReplicaSetStatus (string name, string _namespace, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1ReplicaSet</returns>
        ApiResponse<V1beta1ReplicaSet> PatchNamespacedReplicaSetStatusWithHttpInfo (string name, string _namespace, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update scale of the specified ReplicationControllerDummy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Scale</returns>
        ExtensionsV1beta1Scale PatchNamespacedReplicationControllerDummyScale (string name, string _namespace, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update scale of the specified ReplicationControllerDummy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Scale</returns>
        ApiResponse<ExtensionsV1beta1Scale> PatchNamespacedReplicationControllerDummyScaleWithHttpInfo (string name, string _namespace, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1PodSecurityPolicy</returns>
        V1beta1PodSecurityPolicy PatchPodSecurityPolicy (string name, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1PodSecurityPolicy</returns>
        ApiResponse<V1beta1PodSecurityPolicy> PatchPodSecurityPolicyWithHttpInfo (string name, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1ThirdPartyResource</returns>
        V1beta1ThirdPartyResource PatchThirdPartyResource (string name, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1ThirdPartyResource</returns>
        ApiResponse<V1beta1ThirdPartyResource> PatchThirdPartyResourceWithHttpInfo (string name, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>V1beta1DaemonSet</returns>
        V1beta1DaemonSet ReadNamespacedDaemonSet (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>ApiResponse of V1beta1DaemonSet</returns>
        ApiResponse<V1beta1DaemonSet> ReadNamespacedDaemonSetWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1DaemonSet</returns>
        V1beta1DaemonSet ReadNamespacedDaemonSetStatus (string name, string _namespace, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1DaemonSet</returns>
        ApiResponse<V1beta1DaemonSet> ReadNamespacedDaemonSetStatusWithHttpInfo (string name, string _namespace, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>ExtensionsV1beta1Deployment</returns>
        ExtensionsV1beta1Deployment ReadNamespacedDeployment (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Deployment</returns>
        ApiResponse<ExtensionsV1beta1Deployment> ReadNamespacedDeploymentWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read scale of the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Scale</returns>
        ExtensionsV1beta1Scale ReadNamespacedDeploymentScale (string name, string _namespace, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read scale of the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Scale</returns>
        ApiResponse<ExtensionsV1beta1Scale> ReadNamespacedDeploymentScaleWithHttpInfo (string name, string _namespace, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Deployment</returns>
        ExtensionsV1beta1Deployment ReadNamespacedDeploymentStatus (string name, string _namespace, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Deployment</returns>
        ApiResponse<ExtensionsV1beta1Deployment> ReadNamespacedDeploymentStatusWithHttpInfo (string name, string _namespace, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>V1beta1Ingress</returns>
        V1beta1Ingress ReadNamespacedIngress (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>ApiResponse of V1beta1Ingress</returns>
        ApiResponse<V1beta1Ingress> ReadNamespacedIngressWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1Ingress</returns>
        V1beta1Ingress ReadNamespacedIngressStatus (string name, string _namespace, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1Ingress</returns>
        ApiResponse<V1beta1Ingress> ReadNamespacedIngressStatusWithHttpInfo (string name, string _namespace, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>V1beta1NetworkPolicy</returns>
        V1beta1NetworkPolicy ReadNamespacedNetworkPolicy (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>ApiResponse of V1beta1NetworkPolicy</returns>
        ApiResponse<V1beta1NetworkPolicy> ReadNamespacedNetworkPolicyWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>V1beta1ReplicaSet</returns>
        V1beta1ReplicaSet ReadNamespacedReplicaSet (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>ApiResponse of V1beta1ReplicaSet</returns>
        ApiResponse<V1beta1ReplicaSet> ReadNamespacedReplicaSetWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read scale of the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Scale</returns>
        ExtensionsV1beta1Scale ReadNamespacedReplicaSetScale (string name, string _namespace, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read scale of the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Scale</returns>
        ApiResponse<ExtensionsV1beta1Scale> ReadNamespacedReplicaSetScaleWithHttpInfo (string name, string _namespace, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1ReplicaSet</returns>
        V1beta1ReplicaSet ReadNamespacedReplicaSetStatus (string name, string _namespace, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1ReplicaSet</returns>
        ApiResponse<V1beta1ReplicaSet> ReadNamespacedReplicaSetStatusWithHttpInfo (string name, string _namespace, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read scale of the specified ReplicationControllerDummy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Scale</returns>
        ExtensionsV1beta1Scale ReadNamespacedReplicationControllerDummyScale (string name, string _namespace, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read scale of the specified ReplicationControllerDummy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Scale</returns>
        ApiResponse<ExtensionsV1beta1Scale> ReadNamespacedReplicationControllerDummyScaleWithHttpInfo (string name, string _namespace, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>V1beta1PodSecurityPolicy</returns>
        V1beta1PodSecurityPolicy ReadPodSecurityPolicy (string name, string pretty = null, bool? exact = null, bool? export = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>ApiResponse of V1beta1PodSecurityPolicy</returns>
        ApiResponse<V1beta1PodSecurityPolicy> ReadPodSecurityPolicyWithHttpInfo (string name, string pretty = null, bool? exact = null, bool? export = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>V1beta1ThirdPartyResource</returns>
        V1beta1ThirdPartyResource ReadThirdPartyResource (string name, string pretty = null, bool? exact = null, bool? export = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>ApiResponse of V1beta1ThirdPartyResource</returns>
        ApiResponse<V1beta1ThirdPartyResource> ReadThirdPartyResourceWithHttpInfo (string name, string pretty = null, bool? exact = null, bool? export = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1DaemonSet</returns>
        V1beta1DaemonSet ReplaceNamespacedDaemonSet (string name, string _namespace, V1beta1DaemonSet body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1DaemonSet</returns>
        ApiResponse<V1beta1DaemonSet> ReplaceNamespacedDaemonSetWithHttpInfo (string name, string _namespace, V1beta1DaemonSet body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1DaemonSet</returns>
        V1beta1DaemonSet ReplaceNamespacedDaemonSetStatus (string name, string _namespace, V1beta1DaemonSet body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1DaemonSet</returns>
        ApiResponse<V1beta1DaemonSet> ReplaceNamespacedDaemonSetStatusWithHttpInfo (string name, string _namespace, V1beta1DaemonSet body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Deployment</returns>
        ExtensionsV1beta1Deployment ReplaceNamespacedDeployment (string name, string _namespace, ExtensionsV1beta1Deployment body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Deployment</returns>
        ApiResponse<ExtensionsV1beta1Deployment> ReplaceNamespacedDeploymentWithHttpInfo (string name, string _namespace, ExtensionsV1beta1Deployment body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace scale of the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Scale</returns>
        ExtensionsV1beta1Scale ReplaceNamespacedDeploymentScale (string name, string _namespace, ExtensionsV1beta1Scale body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace scale of the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Scale</returns>
        ApiResponse<ExtensionsV1beta1Scale> ReplaceNamespacedDeploymentScaleWithHttpInfo (string name, string _namespace, ExtensionsV1beta1Scale body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Deployment</returns>
        ExtensionsV1beta1Deployment ReplaceNamespacedDeploymentStatus (string name, string _namespace, ExtensionsV1beta1Deployment body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Deployment</returns>
        ApiResponse<ExtensionsV1beta1Deployment> ReplaceNamespacedDeploymentStatusWithHttpInfo (string name, string _namespace, ExtensionsV1beta1Deployment body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1Ingress</returns>
        V1beta1Ingress ReplaceNamespacedIngress (string name, string _namespace, V1beta1Ingress body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1Ingress</returns>
        ApiResponse<V1beta1Ingress> ReplaceNamespacedIngressWithHttpInfo (string name, string _namespace, V1beta1Ingress body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1Ingress</returns>
        V1beta1Ingress ReplaceNamespacedIngressStatus (string name, string _namespace, V1beta1Ingress body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1Ingress</returns>
        ApiResponse<V1beta1Ingress> ReplaceNamespacedIngressStatusWithHttpInfo (string name, string _namespace, V1beta1Ingress body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1NetworkPolicy</returns>
        V1beta1NetworkPolicy ReplaceNamespacedNetworkPolicy (string name, string _namespace, V1beta1NetworkPolicy body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1NetworkPolicy</returns>
        ApiResponse<V1beta1NetworkPolicy> ReplaceNamespacedNetworkPolicyWithHttpInfo (string name, string _namespace, V1beta1NetworkPolicy body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1ReplicaSet</returns>
        V1beta1ReplicaSet ReplaceNamespacedReplicaSet (string name, string _namespace, V1beta1ReplicaSet body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1ReplicaSet</returns>
        ApiResponse<V1beta1ReplicaSet> ReplaceNamespacedReplicaSetWithHttpInfo (string name, string _namespace, V1beta1ReplicaSet body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace scale of the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Scale</returns>
        ExtensionsV1beta1Scale ReplaceNamespacedReplicaSetScale (string name, string _namespace, ExtensionsV1beta1Scale body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace scale of the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Scale</returns>
        ApiResponse<ExtensionsV1beta1Scale> ReplaceNamespacedReplicaSetScaleWithHttpInfo (string name, string _namespace, ExtensionsV1beta1Scale body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1ReplicaSet</returns>
        V1beta1ReplicaSet ReplaceNamespacedReplicaSetStatus (string name, string _namespace, V1beta1ReplicaSet body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1ReplicaSet</returns>
        ApiResponse<V1beta1ReplicaSet> ReplaceNamespacedReplicaSetStatusWithHttpInfo (string name, string _namespace, V1beta1ReplicaSet body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace scale of the specified ReplicationControllerDummy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Scale</returns>
        ExtensionsV1beta1Scale ReplaceNamespacedReplicationControllerDummyScale (string name, string _namespace, ExtensionsV1beta1Scale body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace scale of the specified ReplicationControllerDummy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Scale</returns>
        ApiResponse<ExtensionsV1beta1Scale> ReplaceNamespacedReplicationControllerDummyScaleWithHttpInfo (string name, string _namespace, ExtensionsV1beta1Scale body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1PodSecurityPolicy</returns>
        V1beta1PodSecurityPolicy ReplacePodSecurityPolicy (string name, V1beta1PodSecurityPolicy body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1PodSecurityPolicy</returns>
        ApiResponse<V1beta1PodSecurityPolicy> ReplacePodSecurityPolicyWithHttpInfo (string name, V1beta1PodSecurityPolicy body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1ThirdPartyResource</returns>
        V1beta1ThirdPartyResource ReplaceThirdPartyResource (string name, V1beta1ThirdPartyResource body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1ThirdPartyResource</returns>
        ApiResponse<V1beta1ThirdPartyResource> ReplaceThirdPartyResourceWithHttpInfo (string name, V1beta1ThirdPartyResource body, string pretty = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1DaemonSet</returns>
        System.Threading.Tasks.Task<V1beta1DaemonSet> CreateNamespacedDaemonSetAsync (string _namespace, V1beta1DaemonSet body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1DaemonSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1DaemonSet>> CreateNamespacedDaemonSetAsyncWithHttpInfo (string _namespace, V1beta1DaemonSet body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Deployment</returns>
        System.Threading.Tasks.Task<ExtensionsV1beta1Deployment> CreateNamespacedDeploymentAsync (string _namespace, ExtensionsV1beta1Deployment body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Deployment)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Deployment>> CreateNamespacedDeploymentAsyncWithHttpInfo (string _namespace, ExtensionsV1beta1Deployment body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create rollback of a Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DeploymentRollback</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1DeploymentRollback</returns>
        System.Threading.Tasks.Task<ExtensionsV1beta1DeploymentRollback> CreateNamespacedDeploymentRollbackAsync (string name, string _namespace, ExtensionsV1beta1DeploymentRollback body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create rollback of a Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DeploymentRollback</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1DeploymentRollback)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1DeploymentRollback>> CreateNamespacedDeploymentRollbackAsyncWithHttpInfo (string name, string _namespace, ExtensionsV1beta1DeploymentRollback body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create an Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1Ingress</returns>
        System.Threading.Tasks.Task<V1beta1Ingress> CreateNamespacedIngressAsync (string _namespace, V1beta1Ingress body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create an Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1Ingress)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1Ingress>> CreateNamespacedIngressAsyncWithHttpInfo (string _namespace, V1beta1Ingress body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1NetworkPolicy</returns>
        System.Threading.Tasks.Task<V1beta1NetworkPolicy> CreateNamespacedNetworkPolicyAsync (string _namespace, V1beta1NetworkPolicy body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1NetworkPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1NetworkPolicy>> CreateNamespacedNetworkPolicyAsyncWithHttpInfo (string _namespace, V1beta1NetworkPolicy body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1ReplicaSet</returns>
        System.Threading.Tasks.Task<V1beta1ReplicaSet> CreateNamespacedReplicaSetAsync (string _namespace, V1beta1ReplicaSet body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ReplicaSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1ReplicaSet>> CreateNamespacedReplicaSetAsyncWithHttpInfo (string _namespace, V1beta1ReplicaSet body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1PodSecurityPolicy</returns>
        System.Threading.Tasks.Task<V1beta1PodSecurityPolicy> CreatePodSecurityPolicyAsync (V1beta1PodSecurityPolicy body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1PodSecurityPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1PodSecurityPolicy>> CreatePodSecurityPolicyAsyncWithHttpInfo (V1beta1PodSecurityPolicy body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1ThirdPartyResource</returns>
        System.Threading.Tasks.Task<V1beta1ThirdPartyResource> CreateThirdPartyResourceAsync (V1beta1ThirdPartyResource body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// create a ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ThirdPartyResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1ThirdPartyResource>> CreateThirdPartyResourceAsyncWithHttpInfo (V1beta1ThirdPartyResource body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1Status</returns>
        System.Threading.Tasks.Task<V1Status> DeleteCollectionNamespacedDaemonSetAsync (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Status>> DeleteCollectionNamespacedDaemonSetAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1Status</returns>
        System.Threading.Tasks.Task<V1Status> DeleteCollectionNamespacedDeploymentAsync (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Status>> DeleteCollectionNamespacedDeploymentAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1Status</returns>
        System.Threading.Tasks.Task<V1Status> DeleteCollectionNamespacedIngressAsync (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Status>> DeleteCollectionNamespacedIngressAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1Status</returns>
        System.Threading.Tasks.Task<V1Status> DeleteCollectionNamespacedNetworkPolicyAsync (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Status>> DeleteCollectionNamespacedNetworkPolicyAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1Status</returns>
        System.Threading.Tasks.Task<V1Status> DeleteCollectionNamespacedReplicaSetAsync (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Status>> DeleteCollectionNamespacedReplicaSetAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1Status</returns>
        System.Threading.Tasks.Task<V1Status> DeleteCollectionPodSecurityPolicyAsync (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Status>> DeleteCollectionPodSecurityPolicyAsyncWithHttpInfo (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1Status</returns>
        System.Threading.Tasks.Task<V1Status> DeleteCollectionThirdPartyResourceAsync (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete collection of ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Status>> DeleteCollectionThirdPartyResourceAsyncWithHttpInfo (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of V1Status</returns>
        System.Threading.Tasks.Task<V1Status> DeleteNamespacedDaemonSetAsync (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Status>> DeleteNamespacedDaemonSetAsyncWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of V1Status</returns>
        System.Threading.Tasks.Task<V1Status> DeleteNamespacedDeploymentAsync (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Status>> DeleteNamespacedDeploymentAsyncWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete an Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of V1Status</returns>
        System.Threading.Tasks.Task<V1Status> DeleteNamespacedIngressAsync (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete an Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Status>> DeleteNamespacedIngressAsyncWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of V1Status</returns>
        System.Threading.Tasks.Task<V1Status> DeleteNamespacedNetworkPolicyAsync (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Status>> DeleteNamespacedNetworkPolicyAsyncWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of V1Status</returns>
        System.Threading.Tasks.Task<V1Status> DeleteNamespacedReplicaSetAsync (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Status>> DeleteNamespacedReplicaSetAsyncWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of V1Status</returns>
        System.Threading.Tasks.Task<V1Status> DeletePodSecurityPolicyAsync (string name, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Status>> DeletePodSecurityPolicyAsyncWithHttpInfo (string name, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of V1Status</returns>
        System.Threading.Tasks.Task<V1Status> DeleteThirdPartyResourceAsync (string name, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// delete a ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1Status>> DeleteThirdPartyResourceAsyncWithHttpInfo (string name, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get available resources
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of V1APIResourceList</returns>
        System.Threading.Tasks.Task<V1APIResourceList> GetAPIResourcesAsync ();

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// get available resources
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (V1APIResourceList)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1APIResourceList>> GetAPIResourcesAsyncWithHttpInfo ();
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1beta1DaemonSetList</returns>
        System.Threading.Tasks.Task<V1beta1DaemonSetList> ListDaemonSetForAllNamespacesAsync (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1DaemonSetList)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1DaemonSetList>> ListDaemonSetForAllNamespacesAsyncWithHttpInfo (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1DeploymentList</returns>
        System.Threading.Tasks.Task<ExtensionsV1beta1DeploymentList> ListDeploymentForAllNamespacesAsync (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1DeploymentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1DeploymentList>> ListDeploymentForAllNamespacesAsyncWithHttpInfo (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1beta1IngressList</returns>
        System.Threading.Tasks.Task<V1beta1IngressList> ListIngressForAllNamespacesAsync (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1IngressList)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1IngressList>> ListIngressForAllNamespacesAsyncWithHttpInfo (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1beta1DaemonSetList</returns>
        System.Threading.Tasks.Task<V1beta1DaemonSetList> ListNamespacedDaemonSetAsync (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1DaemonSetList)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1DaemonSetList>> ListNamespacedDaemonSetAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1DeploymentList</returns>
        System.Threading.Tasks.Task<ExtensionsV1beta1DeploymentList> ListNamespacedDeploymentAsync (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1DeploymentList)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1DeploymentList>> ListNamespacedDeploymentAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1beta1IngressList</returns>
        System.Threading.Tasks.Task<V1beta1IngressList> ListNamespacedIngressAsync (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1IngressList)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1IngressList>> ListNamespacedIngressAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1beta1NetworkPolicyList</returns>
        System.Threading.Tasks.Task<V1beta1NetworkPolicyList> ListNamespacedNetworkPolicyAsync (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1NetworkPolicyList)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1NetworkPolicyList>> ListNamespacedNetworkPolicyAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1beta1ReplicaSetList</returns>
        System.Threading.Tasks.Task<V1beta1ReplicaSetList> ListNamespacedReplicaSetAsync (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ReplicaSetList)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1ReplicaSetList>> ListNamespacedReplicaSetAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1beta1NetworkPolicyList</returns>
        System.Threading.Tasks.Task<V1beta1NetworkPolicyList> ListNetworkPolicyForAllNamespacesAsync (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1NetworkPolicyList)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1NetworkPolicyList>> ListNetworkPolicyForAllNamespacesAsyncWithHttpInfo (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1beta1PodSecurityPolicyList</returns>
        System.Threading.Tasks.Task<V1beta1PodSecurityPolicyList> ListPodSecurityPolicyAsync (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1PodSecurityPolicyList)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1PodSecurityPolicyList>> ListPodSecurityPolicyAsyncWithHttpInfo (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1beta1ReplicaSetList</returns>
        System.Threading.Tasks.Task<V1beta1ReplicaSetList> ListReplicaSetForAllNamespacesAsync (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ReplicaSetList)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1ReplicaSetList>> ListReplicaSetForAllNamespacesAsyncWithHttpInfo (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1beta1ThirdPartyResourceList</returns>
        System.Threading.Tasks.Task<V1beta1ThirdPartyResourceList> ListThirdPartyResourceAsync (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// list or watch objects of kind ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ThirdPartyResourceList)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1ThirdPartyResourceList>> ListThirdPartyResourceAsyncWithHttpInfo (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1DaemonSet</returns>
        System.Threading.Tasks.Task<V1beta1DaemonSet> PatchNamespacedDaemonSetAsync (string name, string _namespace, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1DaemonSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1DaemonSet>> PatchNamespacedDaemonSetAsyncWithHttpInfo (string name, string _namespace, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1DaemonSet</returns>
        System.Threading.Tasks.Task<V1beta1DaemonSet> PatchNamespacedDaemonSetStatusAsync (string name, string _namespace, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1DaemonSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1DaemonSet>> PatchNamespacedDaemonSetStatusAsyncWithHttpInfo (string name, string _namespace, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Deployment</returns>
        System.Threading.Tasks.Task<ExtensionsV1beta1Deployment> PatchNamespacedDeploymentAsync (string name, string _namespace, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Deployment)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Deployment>> PatchNamespacedDeploymentAsyncWithHttpInfo (string name, string _namespace, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update scale of the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Scale</returns>
        System.Threading.Tasks.Task<ExtensionsV1beta1Scale> PatchNamespacedDeploymentScaleAsync (string name, string _namespace, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update scale of the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Scale)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Scale>> PatchNamespacedDeploymentScaleAsyncWithHttpInfo (string name, string _namespace, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Deployment</returns>
        System.Threading.Tasks.Task<ExtensionsV1beta1Deployment> PatchNamespacedDeploymentStatusAsync (string name, string _namespace, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Deployment)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Deployment>> PatchNamespacedDeploymentStatusAsyncWithHttpInfo (string name, string _namespace, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1Ingress</returns>
        System.Threading.Tasks.Task<V1beta1Ingress> PatchNamespacedIngressAsync (string name, string _namespace, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1Ingress)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1Ingress>> PatchNamespacedIngressAsyncWithHttpInfo (string name, string _namespace, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1Ingress</returns>
        System.Threading.Tasks.Task<V1beta1Ingress> PatchNamespacedIngressStatusAsync (string name, string _namespace, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1Ingress)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1Ingress>> PatchNamespacedIngressStatusAsyncWithHttpInfo (string name, string _namespace, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1NetworkPolicy</returns>
        System.Threading.Tasks.Task<V1beta1NetworkPolicy> PatchNamespacedNetworkPolicyAsync (string name, string _namespace, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1NetworkPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1NetworkPolicy>> PatchNamespacedNetworkPolicyAsyncWithHttpInfo (string name, string _namespace, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1ReplicaSet</returns>
        System.Threading.Tasks.Task<V1beta1ReplicaSet> PatchNamespacedReplicaSetAsync (string name, string _namespace, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ReplicaSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1ReplicaSet>> PatchNamespacedReplicaSetAsyncWithHttpInfo (string name, string _namespace, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update scale of the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Scale</returns>
        System.Threading.Tasks.Task<ExtensionsV1beta1Scale> PatchNamespacedReplicaSetScaleAsync (string name, string _namespace, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update scale of the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Scale)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Scale>> PatchNamespacedReplicaSetScaleAsyncWithHttpInfo (string name, string _namespace, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1ReplicaSet</returns>
        System.Threading.Tasks.Task<V1beta1ReplicaSet> PatchNamespacedReplicaSetStatusAsync (string name, string _namespace, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update status of the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ReplicaSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1ReplicaSet>> PatchNamespacedReplicaSetStatusAsyncWithHttpInfo (string name, string _namespace, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update scale of the specified ReplicationControllerDummy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Scale</returns>
        System.Threading.Tasks.Task<ExtensionsV1beta1Scale> PatchNamespacedReplicationControllerDummyScaleAsync (string name, string _namespace, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update scale of the specified ReplicationControllerDummy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Scale)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Scale>> PatchNamespacedReplicationControllerDummyScaleAsyncWithHttpInfo (string name, string _namespace, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1PodSecurityPolicy</returns>
        System.Threading.Tasks.Task<V1beta1PodSecurityPolicy> PatchPodSecurityPolicyAsync (string name, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1PodSecurityPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1PodSecurityPolicy>> PatchPodSecurityPolicyAsyncWithHttpInfo (string name, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1ThirdPartyResource</returns>
        System.Threading.Tasks.Task<V1beta1ThirdPartyResource> PatchThirdPartyResourceAsync (string name, Object body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// partially update the specified ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ThirdPartyResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1ThirdPartyResource>> PatchThirdPartyResourceAsyncWithHttpInfo (string name, Object body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of V1beta1DaemonSet</returns>
        System.Threading.Tasks.Task<V1beta1DaemonSet> ReadNamespacedDaemonSetAsync (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1DaemonSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1DaemonSet>> ReadNamespacedDaemonSetAsyncWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1DaemonSet</returns>
        System.Threading.Tasks.Task<V1beta1DaemonSet> ReadNamespacedDaemonSetStatusAsync (string name, string _namespace, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1DaemonSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1DaemonSet>> ReadNamespacedDaemonSetStatusAsyncWithHttpInfo (string name, string _namespace, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Deployment</returns>
        System.Threading.Tasks.Task<ExtensionsV1beta1Deployment> ReadNamespacedDeploymentAsync (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Deployment)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Deployment>> ReadNamespacedDeploymentAsyncWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read scale of the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Scale</returns>
        System.Threading.Tasks.Task<ExtensionsV1beta1Scale> ReadNamespacedDeploymentScaleAsync (string name, string _namespace, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read scale of the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Scale)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Scale>> ReadNamespacedDeploymentScaleAsyncWithHttpInfo (string name, string _namespace, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Deployment</returns>
        System.Threading.Tasks.Task<ExtensionsV1beta1Deployment> ReadNamespacedDeploymentStatusAsync (string name, string _namespace, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Deployment)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Deployment>> ReadNamespacedDeploymentStatusAsyncWithHttpInfo (string name, string _namespace, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of V1beta1Ingress</returns>
        System.Threading.Tasks.Task<V1beta1Ingress> ReadNamespacedIngressAsync (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1Ingress)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1Ingress>> ReadNamespacedIngressAsyncWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1Ingress</returns>
        System.Threading.Tasks.Task<V1beta1Ingress> ReadNamespacedIngressStatusAsync (string name, string _namespace, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1Ingress)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1Ingress>> ReadNamespacedIngressStatusAsyncWithHttpInfo (string name, string _namespace, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of V1beta1NetworkPolicy</returns>
        System.Threading.Tasks.Task<V1beta1NetworkPolicy> ReadNamespacedNetworkPolicyAsync (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1NetworkPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1NetworkPolicy>> ReadNamespacedNetworkPolicyAsyncWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of V1beta1ReplicaSet</returns>
        System.Threading.Tasks.Task<V1beta1ReplicaSet> ReadNamespacedReplicaSetAsync (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ReplicaSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1ReplicaSet>> ReadNamespacedReplicaSetAsyncWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read scale of the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Scale</returns>
        System.Threading.Tasks.Task<ExtensionsV1beta1Scale> ReadNamespacedReplicaSetScaleAsync (string name, string _namespace, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read scale of the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Scale)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Scale>> ReadNamespacedReplicaSetScaleAsyncWithHttpInfo (string name, string _namespace, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1ReplicaSet</returns>
        System.Threading.Tasks.Task<V1beta1ReplicaSet> ReadNamespacedReplicaSetStatusAsync (string name, string _namespace, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read status of the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ReplicaSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1ReplicaSet>> ReadNamespacedReplicaSetStatusAsyncWithHttpInfo (string name, string _namespace, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read scale of the specified ReplicationControllerDummy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Scale</returns>
        System.Threading.Tasks.Task<ExtensionsV1beta1Scale> ReadNamespacedReplicationControllerDummyScaleAsync (string name, string _namespace, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read scale of the specified ReplicationControllerDummy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Scale)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Scale>> ReadNamespacedReplicationControllerDummyScaleAsyncWithHttpInfo (string name, string _namespace, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of V1beta1PodSecurityPolicy</returns>
        System.Threading.Tasks.Task<V1beta1PodSecurityPolicy> ReadPodSecurityPolicyAsync (string name, string pretty = null, bool? exact = null, bool? export = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1PodSecurityPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1PodSecurityPolicy>> ReadPodSecurityPolicyAsyncWithHttpInfo (string name, string pretty = null, bool? exact = null, bool? export = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of V1beta1ThirdPartyResource</returns>
        System.Threading.Tasks.Task<V1beta1ThirdPartyResource> ReadThirdPartyResourceAsync (string name, string pretty = null, bool? exact = null, bool? export = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// read the specified ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ThirdPartyResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1ThirdPartyResource>> ReadThirdPartyResourceAsyncWithHttpInfo (string name, string pretty = null, bool? exact = null, bool? export = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1DaemonSet</returns>
        System.Threading.Tasks.Task<V1beta1DaemonSet> ReplaceNamespacedDaemonSetAsync (string name, string _namespace, V1beta1DaemonSet body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1DaemonSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1DaemonSet>> ReplaceNamespacedDaemonSetAsyncWithHttpInfo (string name, string _namespace, V1beta1DaemonSet body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1DaemonSet</returns>
        System.Threading.Tasks.Task<V1beta1DaemonSet> ReplaceNamespacedDaemonSetStatusAsync (string name, string _namespace, V1beta1DaemonSet body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified DaemonSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1DaemonSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1DaemonSet>> ReplaceNamespacedDaemonSetStatusAsyncWithHttpInfo (string name, string _namespace, V1beta1DaemonSet body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Deployment</returns>
        System.Threading.Tasks.Task<ExtensionsV1beta1Deployment> ReplaceNamespacedDeploymentAsync (string name, string _namespace, ExtensionsV1beta1Deployment body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Deployment)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Deployment>> ReplaceNamespacedDeploymentAsyncWithHttpInfo (string name, string _namespace, ExtensionsV1beta1Deployment body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace scale of the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Scale</returns>
        System.Threading.Tasks.Task<ExtensionsV1beta1Scale> ReplaceNamespacedDeploymentScaleAsync (string name, string _namespace, ExtensionsV1beta1Scale body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace scale of the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Scale)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Scale>> ReplaceNamespacedDeploymentScaleAsyncWithHttpInfo (string name, string _namespace, ExtensionsV1beta1Scale body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Deployment</returns>
        System.Threading.Tasks.Task<ExtensionsV1beta1Deployment> ReplaceNamespacedDeploymentStatusAsync (string name, string _namespace, ExtensionsV1beta1Deployment body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified Deployment
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Deployment)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Deployment>> ReplaceNamespacedDeploymentStatusAsyncWithHttpInfo (string name, string _namespace, ExtensionsV1beta1Deployment body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1Ingress</returns>
        System.Threading.Tasks.Task<V1beta1Ingress> ReplaceNamespacedIngressAsync (string name, string _namespace, V1beta1Ingress body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1Ingress)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1Ingress>> ReplaceNamespacedIngressAsyncWithHttpInfo (string name, string _namespace, V1beta1Ingress body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1Ingress</returns>
        System.Threading.Tasks.Task<V1beta1Ingress> ReplaceNamespacedIngressStatusAsync (string name, string _namespace, V1beta1Ingress body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified Ingress
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1Ingress)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1Ingress>> ReplaceNamespacedIngressStatusAsyncWithHttpInfo (string name, string _namespace, V1beta1Ingress body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1NetworkPolicy</returns>
        System.Threading.Tasks.Task<V1beta1NetworkPolicy> ReplaceNamespacedNetworkPolicyAsync (string name, string _namespace, V1beta1NetworkPolicy body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified NetworkPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1NetworkPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1NetworkPolicy>> ReplaceNamespacedNetworkPolicyAsyncWithHttpInfo (string name, string _namespace, V1beta1NetworkPolicy body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1ReplicaSet</returns>
        System.Threading.Tasks.Task<V1beta1ReplicaSet> ReplaceNamespacedReplicaSetAsync (string name, string _namespace, V1beta1ReplicaSet body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ReplicaSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1ReplicaSet>> ReplaceNamespacedReplicaSetAsyncWithHttpInfo (string name, string _namespace, V1beta1ReplicaSet body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace scale of the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Scale</returns>
        System.Threading.Tasks.Task<ExtensionsV1beta1Scale> ReplaceNamespacedReplicaSetScaleAsync (string name, string _namespace, ExtensionsV1beta1Scale body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace scale of the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Scale)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Scale>> ReplaceNamespacedReplicaSetScaleAsyncWithHttpInfo (string name, string _namespace, ExtensionsV1beta1Scale body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1ReplicaSet</returns>
        System.Threading.Tasks.Task<V1beta1ReplicaSet> ReplaceNamespacedReplicaSetStatusAsync (string name, string _namespace, V1beta1ReplicaSet body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace status of the specified ReplicaSet
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ReplicaSet)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1ReplicaSet>> ReplaceNamespacedReplicaSetStatusAsyncWithHttpInfo (string name, string _namespace, V1beta1ReplicaSet body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace scale of the specified ReplicationControllerDummy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Scale</returns>
        System.Threading.Tasks.Task<ExtensionsV1beta1Scale> ReplaceNamespacedReplicationControllerDummyScaleAsync (string name, string _namespace, ExtensionsV1beta1Scale body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace scale of the specified ReplicationControllerDummy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Scale)</returns>
        System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Scale>> ReplaceNamespacedReplicationControllerDummyScaleAsyncWithHttpInfo (string name, string _namespace, ExtensionsV1beta1Scale body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1PodSecurityPolicy</returns>
        System.Threading.Tasks.Task<V1beta1PodSecurityPolicy> ReplacePodSecurityPolicyAsync (string name, V1beta1PodSecurityPolicy body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified PodSecurityPolicy
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1PodSecurityPolicy)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1PodSecurityPolicy>> ReplacePodSecurityPolicyAsyncWithHttpInfo (string name, V1beta1PodSecurityPolicy body, string pretty = null);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1ThirdPartyResource</returns>
        System.Threading.Tasks.Task<V1beta1ThirdPartyResource> ReplaceThirdPartyResourceAsync (string name, V1beta1ThirdPartyResource body, string pretty = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// replace the specified ThirdPartyResource
        /// </remarks>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ThirdPartyResource)</returns>
        System.Threading.Tasks.Task<ApiResponse<V1beta1ThirdPartyResource>> ReplaceThirdPartyResourceAsyncWithHttpInfo (string name, V1beta1ThirdPartyResource body, string pretty = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class Extensions_v1beta1Api : IExtensions_v1beta1Api
    {
        private Kubernetes.DotNet.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="Extensions_v1beta1Api"/> class.
        /// </summary>
        /// <returns></returns>
        public Extensions_v1beta1Api(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Kubernetes.DotNet.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="Extensions_v1beta1Api"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public Extensions_v1beta1Api(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Kubernetes.DotNet.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Kubernetes.DotNet.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  create a DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1DaemonSet</returns>
        public V1beta1DaemonSet CreateNamespacedDaemonSet (string _namespace, V1beta1DaemonSet body, string pretty = null)
        {
             ApiResponse<V1beta1DaemonSet> localVarResponse = CreateNamespacedDaemonSetWithHttpInfo(_namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  create a DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1DaemonSet</returns>
        public ApiResponse< V1beta1DaemonSet > CreateNamespacedDaemonSetWithHttpInfo (string _namespace, V1beta1DaemonSet body, string pretty = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->CreateNamespacedDaemonSet");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->CreateNamespacedDaemonSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNamespacedDaemonSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1DaemonSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1DaemonSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1DaemonSet)));
        }

        /// <summary>
        ///  create a DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1DaemonSet</returns>
        public async System.Threading.Tasks.Task<V1beta1DaemonSet> CreateNamespacedDaemonSetAsync (string _namespace, V1beta1DaemonSet body, string pretty = null)
        {
             ApiResponse<V1beta1DaemonSet> localVarResponse = await CreateNamespacedDaemonSetAsyncWithHttpInfo(_namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  create a DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1DaemonSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1DaemonSet>> CreateNamespacedDaemonSetAsyncWithHttpInfo (string _namespace, V1beta1DaemonSet body, string pretty = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->CreateNamespacedDaemonSet");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->CreateNamespacedDaemonSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNamespacedDaemonSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1DaemonSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1DaemonSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1DaemonSet)));
        }

        /// <summary>
        ///  create a Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Deployment</returns>
        public ExtensionsV1beta1Deployment CreateNamespacedDeployment (string _namespace, ExtensionsV1beta1Deployment body, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Deployment> localVarResponse = CreateNamespacedDeploymentWithHttpInfo(_namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  create a Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Deployment</returns>
        public ApiResponse< ExtensionsV1beta1Deployment > CreateNamespacedDeploymentWithHttpInfo (string _namespace, ExtensionsV1beta1Deployment body, string pretty = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->CreateNamespacedDeployment");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->CreateNamespacedDeployment");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNamespacedDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Deployment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Deployment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Deployment)));
        }

        /// <summary>
        ///  create a Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Deployment</returns>
        public async System.Threading.Tasks.Task<ExtensionsV1beta1Deployment> CreateNamespacedDeploymentAsync (string _namespace, ExtensionsV1beta1Deployment body, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Deployment> localVarResponse = await CreateNamespacedDeploymentAsyncWithHttpInfo(_namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  create a Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Deployment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Deployment>> CreateNamespacedDeploymentAsyncWithHttpInfo (string _namespace, ExtensionsV1beta1Deployment body, string pretty = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->CreateNamespacedDeployment");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->CreateNamespacedDeployment");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNamespacedDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Deployment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Deployment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Deployment)));
        }

        /// <summary>
        ///  create rollback of a Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DeploymentRollback</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1DeploymentRollback</returns>
        public ExtensionsV1beta1DeploymentRollback CreateNamespacedDeploymentRollback (string name, string _namespace, ExtensionsV1beta1DeploymentRollback body, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1DeploymentRollback> localVarResponse = CreateNamespacedDeploymentRollbackWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  create rollback of a Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DeploymentRollback</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1DeploymentRollback</returns>
        public ApiResponse< ExtensionsV1beta1DeploymentRollback > CreateNamespacedDeploymentRollbackWithHttpInfo (string name, string _namespace, ExtensionsV1beta1DeploymentRollback body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->CreateNamespacedDeploymentRollback");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->CreateNamespacedDeploymentRollback");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->CreateNamespacedDeploymentRollback");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/rollback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNamespacedDeploymentRollback", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1DeploymentRollback>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1DeploymentRollback) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1DeploymentRollback)));
        }

        /// <summary>
        ///  create rollback of a Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DeploymentRollback</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1DeploymentRollback</returns>
        public async System.Threading.Tasks.Task<ExtensionsV1beta1DeploymentRollback> CreateNamespacedDeploymentRollbackAsync (string name, string _namespace, ExtensionsV1beta1DeploymentRollback body, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1DeploymentRollback> localVarResponse = await CreateNamespacedDeploymentRollbackAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  create rollback of a Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DeploymentRollback</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1DeploymentRollback)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1DeploymentRollback>> CreateNamespacedDeploymentRollbackAsyncWithHttpInfo (string name, string _namespace, ExtensionsV1beta1DeploymentRollback body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->CreateNamespacedDeploymentRollback");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->CreateNamespacedDeploymentRollback");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->CreateNamespacedDeploymentRollback");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/rollback";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNamespacedDeploymentRollback", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1DeploymentRollback>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1DeploymentRollback) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1DeploymentRollback)));
        }

        /// <summary>
        ///  create an Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1Ingress</returns>
        public V1beta1Ingress CreateNamespacedIngress (string _namespace, V1beta1Ingress body, string pretty = null)
        {
             ApiResponse<V1beta1Ingress> localVarResponse = CreateNamespacedIngressWithHttpInfo(_namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  create an Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1Ingress</returns>
        public ApiResponse< V1beta1Ingress > CreateNamespacedIngressWithHttpInfo (string _namespace, V1beta1Ingress body, string pretty = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->CreateNamespacedIngress");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->CreateNamespacedIngress");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNamespacedIngress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1Ingress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1Ingress) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1Ingress)));
        }

        /// <summary>
        ///  create an Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1Ingress</returns>
        public async System.Threading.Tasks.Task<V1beta1Ingress> CreateNamespacedIngressAsync (string _namespace, V1beta1Ingress body, string pretty = null)
        {
             ApiResponse<V1beta1Ingress> localVarResponse = await CreateNamespacedIngressAsyncWithHttpInfo(_namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  create an Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1Ingress)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1Ingress>> CreateNamespacedIngressAsyncWithHttpInfo (string _namespace, V1beta1Ingress body, string pretty = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->CreateNamespacedIngress");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->CreateNamespacedIngress");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNamespacedIngress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1Ingress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1Ingress) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1Ingress)));
        }

        /// <summary>
        ///  create a NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1NetworkPolicy</returns>
        public V1beta1NetworkPolicy CreateNamespacedNetworkPolicy (string _namespace, V1beta1NetworkPolicy body, string pretty = null)
        {
             ApiResponse<V1beta1NetworkPolicy> localVarResponse = CreateNamespacedNetworkPolicyWithHttpInfo(_namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  create a NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1NetworkPolicy</returns>
        public ApiResponse< V1beta1NetworkPolicy > CreateNamespacedNetworkPolicyWithHttpInfo (string _namespace, V1beta1NetworkPolicy body, string pretty = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->CreateNamespacedNetworkPolicy");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->CreateNamespacedNetworkPolicy");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNamespacedNetworkPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1NetworkPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1NetworkPolicy) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1NetworkPolicy)));
        }

        /// <summary>
        ///  create a NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1NetworkPolicy</returns>
        public async System.Threading.Tasks.Task<V1beta1NetworkPolicy> CreateNamespacedNetworkPolicyAsync (string _namespace, V1beta1NetworkPolicy body, string pretty = null)
        {
             ApiResponse<V1beta1NetworkPolicy> localVarResponse = await CreateNamespacedNetworkPolicyAsyncWithHttpInfo(_namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  create a NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1NetworkPolicy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1NetworkPolicy>> CreateNamespacedNetworkPolicyAsyncWithHttpInfo (string _namespace, V1beta1NetworkPolicy body, string pretty = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->CreateNamespacedNetworkPolicy");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->CreateNamespacedNetworkPolicy");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNamespacedNetworkPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1NetworkPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1NetworkPolicy) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1NetworkPolicy)));
        }

        /// <summary>
        ///  create a ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1ReplicaSet</returns>
        public V1beta1ReplicaSet CreateNamespacedReplicaSet (string _namespace, V1beta1ReplicaSet body, string pretty = null)
        {
             ApiResponse<V1beta1ReplicaSet> localVarResponse = CreateNamespacedReplicaSetWithHttpInfo(_namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  create a ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1ReplicaSet</returns>
        public ApiResponse< V1beta1ReplicaSet > CreateNamespacedReplicaSetWithHttpInfo (string _namespace, V1beta1ReplicaSet body, string pretty = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->CreateNamespacedReplicaSet");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->CreateNamespacedReplicaSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNamespacedReplicaSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ReplicaSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ReplicaSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ReplicaSet)));
        }

        /// <summary>
        ///  create a ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1ReplicaSet</returns>
        public async System.Threading.Tasks.Task<V1beta1ReplicaSet> CreateNamespacedReplicaSetAsync (string _namespace, V1beta1ReplicaSet body, string pretty = null)
        {
             ApiResponse<V1beta1ReplicaSet> localVarResponse = await CreateNamespacedReplicaSetAsyncWithHttpInfo(_namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  create a ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ReplicaSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1ReplicaSet>> CreateNamespacedReplicaSetAsyncWithHttpInfo (string _namespace, V1beta1ReplicaSet body, string pretty = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->CreateNamespacedReplicaSet");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->CreateNamespacedReplicaSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateNamespacedReplicaSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ReplicaSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ReplicaSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ReplicaSet)));
        }

        /// <summary>
        ///  create a PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1PodSecurityPolicy</returns>
        public V1beta1PodSecurityPolicy CreatePodSecurityPolicy (V1beta1PodSecurityPolicy body, string pretty = null)
        {
             ApiResponse<V1beta1PodSecurityPolicy> localVarResponse = CreatePodSecurityPolicyWithHttpInfo(body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  create a PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1PodSecurityPolicy</returns>
        public ApiResponse< V1beta1PodSecurityPolicy > CreatePodSecurityPolicyWithHttpInfo (V1beta1PodSecurityPolicy body, string pretty = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->CreatePodSecurityPolicy");

            var localVarPath = "/apis/extensions/v1beta1/podsecuritypolicies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePodSecurityPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1PodSecurityPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1PodSecurityPolicy) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1PodSecurityPolicy)));
        }

        /// <summary>
        ///  create a PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1PodSecurityPolicy</returns>
        public async System.Threading.Tasks.Task<V1beta1PodSecurityPolicy> CreatePodSecurityPolicyAsync (V1beta1PodSecurityPolicy body, string pretty = null)
        {
             ApiResponse<V1beta1PodSecurityPolicy> localVarResponse = await CreatePodSecurityPolicyAsyncWithHttpInfo(body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  create a PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1PodSecurityPolicy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1PodSecurityPolicy>> CreatePodSecurityPolicyAsyncWithHttpInfo (V1beta1PodSecurityPolicy body, string pretty = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->CreatePodSecurityPolicy");

            var localVarPath = "/apis/extensions/v1beta1/podsecuritypolicies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreatePodSecurityPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1PodSecurityPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1PodSecurityPolicy) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1PodSecurityPolicy)));
        }

        /// <summary>
        ///  create a ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1ThirdPartyResource</returns>
        public V1beta1ThirdPartyResource CreateThirdPartyResource (V1beta1ThirdPartyResource body, string pretty = null)
        {
             ApiResponse<V1beta1ThirdPartyResource> localVarResponse = CreateThirdPartyResourceWithHttpInfo(body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  create a ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1ThirdPartyResource</returns>
        public ApiResponse< V1beta1ThirdPartyResource > CreateThirdPartyResourceWithHttpInfo (V1beta1ThirdPartyResource body, string pretty = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->CreateThirdPartyResource");

            var localVarPath = "/apis/extensions/v1beta1/thirdpartyresources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateThirdPartyResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ThirdPartyResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ThirdPartyResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ThirdPartyResource)));
        }

        /// <summary>
        ///  create a ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1ThirdPartyResource</returns>
        public async System.Threading.Tasks.Task<V1beta1ThirdPartyResource> CreateThirdPartyResourceAsync (V1beta1ThirdPartyResource body, string pretty = null)
        {
             ApiResponse<V1beta1ThirdPartyResource> localVarResponse = await CreateThirdPartyResourceAsyncWithHttpInfo(body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  create a ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ThirdPartyResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1ThirdPartyResource>> CreateThirdPartyResourceAsyncWithHttpInfo (V1beta1ThirdPartyResource body, string pretty = null)
        {
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->CreateThirdPartyResource");

            var localVarPath = "/apis/extensions/v1beta1/thirdpartyresources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateThirdPartyResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ThirdPartyResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ThirdPartyResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ThirdPartyResource)));
        }

        /// <summary>
        ///  delete collection of DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1Status</returns>
        public V1Status DeleteCollectionNamespacedDaemonSet (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1Status> localVarResponse = DeleteCollectionNamespacedDaemonSetWithHttpInfo(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  delete collection of DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        public ApiResponse< V1Status > DeleteCollectionNamespacedDaemonSetWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->DeleteCollectionNamespacedDaemonSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCollectionNamespacedDaemonSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  delete collection of DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1Status</returns>
        public async System.Threading.Tasks.Task<V1Status> DeleteCollectionNamespacedDaemonSetAsync (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1Status> localVarResponse = await DeleteCollectionNamespacedDaemonSetAsyncWithHttpInfo(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  delete collection of DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Status>> DeleteCollectionNamespacedDaemonSetAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->DeleteCollectionNamespacedDaemonSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCollectionNamespacedDaemonSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  delete collection of Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1Status</returns>
        public V1Status DeleteCollectionNamespacedDeployment (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1Status> localVarResponse = DeleteCollectionNamespacedDeploymentWithHttpInfo(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  delete collection of Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        public ApiResponse< V1Status > DeleteCollectionNamespacedDeploymentWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->DeleteCollectionNamespacedDeployment");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCollectionNamespacedDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  delete collection of Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1Status</returns>
        public async System.Threading.Tasks.Task<V1Status> DeleteCollectionNamespacedDeploymentAsync (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1Status> localVarResponse = await DeleteCollectionNamespacedDeploymentAsyncWithHttpInfo(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  delete collection of Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Status>> DeleteCollectionNamespacedDeploymentAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->DeleteCollectionNamespacedDeployment");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCollectionNamespacedDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  delete collection of Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1Status</returns>
        public V1Status DeleteCollectionNamespacedIngress (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1Status> localVarResponse = DeleteCollectionNamespacedIngressWithHttpInfo(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  delete collection of Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        public ApiResponse< V1Status > DeleteCollectionNamespacedIngressWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->DeleteCollectionNamespacedIngress");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCollectionNamespacedIngress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  delete collection of Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1Status</returns>
        public async System.Threading.Tasks.Task<V1Status> DeleteCollectionNamespacedIngressAsync (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1Status> localVarResponse = await DeleteCollectionNamespacedIngressAsyncWithHttpInfo(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  delete collection of Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Status>> DeleteCollectionNamespacedIngressAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->DeleteCollectionNamespacedIngress");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCollectionNamespacedIngress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  delete collection of NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1Status</returns>
        public V1Status DeleteCollectionNamespacedNetworkPolicy (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1Status> localVarResponse = DeleteCollectionNamespacedNetworkPolicyWithHttpInfo(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  delete collection of NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        public ApiResponse< V1Status > DeleteCollectionNamespacedNetworkPolicyWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->DeleteCollectionNamespacedNetworkPolicy");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCollectionNamespacedNetworkPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  delete collection of NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1Status</returns>
        public async System.Threading.Tasks.Task<V1Status> DeleteCollectionNamespacedNetworkPolicyAsync (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1Status> localVarResponse = await DeleteCollectionNamespacedNetworkPolicyAsyncWithHttpInfo(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  delete collection of NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Status>> DeleteCollectionNamespacedNetworkPolicyAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->DeleteCollectionNamespacedNetworkPolicy");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCollectionNamespacedNetworkPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  delete collection of ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1Status</returns>
        public V1Status DeleteCollectionNamespacedReplicaSet (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1Status> localVarResponse = DeleteCollectionNamespacedReplicaSetWithHttpInfo(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  delete collection of ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        public ApiResponse< V1Status > DeleteCollectionNamespacedReplicaSetWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->DeleteCollectionNamespacedReplicaSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCollectionNamespacedReplicaSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  delete collection of ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1Status</returns>
        public async System.Threading.Tasks.Task<V1Status> DeleteCollectionNamespacedReplicaSetAsync (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1Status> localVarResponse = await DeleteCollectionNamespacedReplicaSetAsyncWithHttpInfo(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  delete collection of ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Status>> DeleteCollectionNamespacedReplicaSetAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->DeleteCollectionNamespacedReplicaSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCollectionNamespacedReplicaSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  delete collection of PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1Status</returns>
        public V1Status DeleteCollectionPodSecurityPolicy (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1Status> localVarResponse = DeleteCollectionPodSecurityPolicyWithHttpInfo(pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  delete collection of PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        public ApiResponse< V1Status > DeleteCollectionPodSecurityPolicyWithHttpInfo (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {

            var localVarPath = "/apis/extensions/v1beta1/podsecuritypolicies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCollectionPodSecurityPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  delete collection of PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1Status</returns>
        public async System.Threading.Tasks.Task<V1Status> DeleteCollectionPodSecurityPolicyAsync (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1Status> localVarResponse = await DeleteCollectionPodSecurityPolicyAsyncWithHttpInfo(pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  delete collection of PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Status>> DeleteCollectionPodSecurityPolicyAsyncWithHttpInfo (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {

            var localVarPath = "/apis/extensions/v1beta1/podsecuritypolicies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCollectionPodSecurityPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  delete collection of ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1Status</returns>
        public V1Status DeleteCollectionThirdPartyResource (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1Status> localVarResponse = DeleteCollectionThirdPartyResourceWithHttpInfo(pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  delete collection of ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        public ApiResponse< V1Status > DeleteCollectionThirdPartyResourceWithHttpInfo (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {

            var localVarPath = "/apis/extensions/v1beta1/thirdpartyresources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCollectionThirdPartyResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  delete collection of ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1Status</returns>
        public async System.Threading.Tasks.Task<V1Status> DeleteCollectionThirdPartyResourceAsync (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1Status> localVarResponse = await DeleteCollectionThirdPartyResourceAsyncWithHttpInfo(pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  delete collection of ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Status>> DeleteCollectionThirdPartyResourceAsyncWithHttpInfo (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {

            var localVarPath = "/apis/extensions/v1beta1/thirdpartyresources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteCollectionThirdPartyResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  delete a DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>V1Status</returns>
        public V1Status DeleteNamespacedDaemonSet (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
             ApiResponse<V1Status> localVarResponse = DeleteNamespacedDaemonSetWithHttpInfo(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  delete a DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        public ApiResponse< V1Status > DeleteNamespacedDaemonSetWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->DeleteNamespacedDaemonSet");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->DeleteNamespacedDaemonSet");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->DeleteNamespacedDaemonSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (gracePeriodSeconds != null) localVarQueryParams.Add("gracePeriodSeconds", Configuration.ApiClient.ParameterToString(gracePeriodSeconds)); // query parameter
            if (orphanDependents != null) localVarQueryParams.Add("orphanDependents", Configuration.ApiClient.ParameterToString(orphanDependents)); // query parameter
            if (propagationPolicy != null) localVarQueryParams.Add("propagationPolicy", Configuration.ApiClient.ParameterToString(propagationPolicy)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNamespacedDaemonSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  delete a DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of V1Status</returns>
        public async System.Threading.Tasks.Task<V1Status> DeleteNamespacedDaemonSetAsync (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
             ApiResponse<V1Status> localVarResponse = await DeleteNamespacedDaemonSetAsyncWithHttpInfo(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  delete a DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Status>> DeleteNamespacedDaemonSetAsyncWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->DeleteNamespacedDaemonSet");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->DeleteNamespacedDaemonSet");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->DeleteNamespacedDaemonSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (gracePeriodSeconds != null) localVarQueryParams.Add("gracePeriodSeconds", Configuration.ApiClient.ParameterToString(gracePeriodSeconds)); // query parameter
            if (orphanDependents != null) localVarQueryParams.Add("orphanDependents", Configuration.ApiClient.ParameterToString(orphanDependents)); // query parameter
            if (propagationPolicy != null) localVarQueryParams.Add("propagationPolicy", Configuration.ApiClient.ParameterToString(propagationPolicy)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNamespacedDaemonSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  delete a Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>V1Status</returns>
        public V1Status DeleteNamespacedDeployment (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
             ApiResponse<V1Status> localVarResponse = DeleteNamespacedDeploymentWithHttpInfo(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  delete a Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        public ApiResponse< V1Status > DeleteNamespacedDeploymentWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->DeleteNamespacedDeployment");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->DeleteNamespacedDeployment");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->DeleteNamespacedDeployment");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (gracePeriodSeconds != null) localVarQueryParams.Add("gracePeriodSeconds", Configuration.ApiClient.ParameterToString(gracePeriodSeconds)); // query parameter
            if (orphanDependents != null) localVarQueryParams.Add("orphanDependents", Configuration.ApiClient.ParameterToString(orphanDependents)); // query parameter
            if (propagationPolicy != null) localVarQueryParams.Add("propagationPolicy", Configuration.ApiClient.ParameterToString(propagationPolicy)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNamespacedDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  delete a Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of V1Status</returns>
        public async System.Threading.Tasks.Task<V1Status> DeleteNamespacedDeploymentAsync (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
             ApiResponse<V1Status> localVarResponse = await DeleteNamespacedDeploymentAsyncWithHttpInfo(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  delete a Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Status>> DeleteNamespacedDeploymentAsyncWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->DeleteNamespacedDeployment");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->DeleteNamespacedDeployment");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->DeleteNamespacedDeployment");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (gracePeriodSeconds != null) localVarQueryParams.Add("gracePeriodSeconds", Configuration.ApiClient.ParameterToString(gracePeriodSeconds)); // query parameter
            if (orphanDependents != null) localVarQueryParams.Add("orphanDependents", Configuration.ApiClient.ParameterToString(orphanDependents)); // query parameter
            if (propagationPolicy != null) localVarQueryParams.Add("propagationPolicy", Configuration.ApiClient.ParameterToString(propagationPolicy)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNamespacedDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  delete an Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>V1Status</returns>
        public V1Status DeleteNamespacedIngress (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
             ApiResponse<V1Status> localVarResponse = DeleteNamespacedIngressWithHttpInfo(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  delete an Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        public ApiResponse< V1Status > DeleteNamespacedIngressWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->DeleteNamespacedIngress");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->DeleteNamespacedIngress");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->DeleteNamespacedIngress");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (gracePeriodSeconds != null) localVarQueryParams.Add("gracePeriodSeconds", Configuration.ApiClient.ParameterToString(gracePeriodSeconds)); // query parameter
            if (orphanDependents != null) localVarQueryParams.Add("orphanDependents", Configuration.ApiClient.ParameterToString(orphanDependents)); // query parameter
            if (propagationPolicy != null) localVarQueryParams.Add("propagationPolicy", Configuration.ApiClient.ParameterToString(propagationPolicy)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNamespacedIngress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  delete an Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of V1Status</returns>
        public async System.Threading.Tasks.Task<V1Status> DeleteNamespacedIngressAsync (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
             ApiResponse<V1Status> localVarResponse = await DeleteNamespacedIngressAsyncWithHttpInfo(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  delete an Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Status>> DeleteNamespacedIngressAsyncWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->DeleteNamespacedIngress");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->DeleteNamespacedIngress");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->DeleteNamespacedIngress");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (gracePeriodSeconds != null) localVarQueryParams.Add("gracePeriodSeconds", Configuration.ApiClient.ParameterToString(gracePeriodSeconds)); // query parameter
            if (orphanDependents != null) localVarQueryParams.Add("orphanDependents", Configuration.ApiClient.ParameterToString(orphanDependents)); // query parameter
            if (propagationPolicy != null) localVarQueryParams.Add("propagationPolicy", Configuration.ApiClient.ParameterToString(propagationPolicy)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNamespacedIngress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  delete a NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>V1Status</returns>
        public V1Status DeleteNamespacedNetworkPolicy (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
             ApiResponse<V1Status> localVarResponse = DeleteNamespacedNetworkPolicyWithHttpInfo(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  delete a NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        public ApiResponse< V1Status > DeleteNamespacedNetworkPolicyWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->DeleteNamespacedNetworkPolicy");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->DeleteNamespacedNetworkPolicy");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->DeleteNamespacedNetworkPolicy");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (gracePeriodSeconds != null) localVarQueryParams.Add("gracePeriodSeconds", Configuration.ApiClient.ParameterToString(gracePeriodSeconds)); // query parameter
            if (orphanDependents != null) localVarQueryParams.Add("orphanDependents", Configuration.ApiClient.ParameterToString(orphanDependents)); // query parameter
            if (propagationPolicy != null) localVarQueryParams.Add("propagationPolicy", Configuration.ApiClient.ParameterToString(propagationPolicy)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNamespacedNetworkPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  delete a NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of V1Status</returns>
        public async System.Threading.Tasks.Task<V1Status> DeleteNamespacedNetworkPolicyAsync (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
             ApiResponse<V1Status> localVarResponse = await DeleteNamespacedNetworkPolicyAsyncWithHttpInfo(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  delete a NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Status>> DeleteNamespacedNetworkPolicyAsyncWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->DeleteNamespacedNetworkPolicy");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->DeleteNamespacedNetworkPolicy");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->DeleteNamespacedNetworkPolicy");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (gracePeriodSeconds != null) localVarQueryParams.Add("gracePeriodSeconds", Configuration.ApiClient.ParameterToString(gracePeriodSeconds)); // query parameter
            if (orphanDependents != null) localVarQueryParams.Add("orphanDependents", Configuration.ApiClient.ParameterToString(orphanDependents)); // query parameter
            if (propagationPolicy != null) localVarQueryParams.Add("propagationPolicy", Configuration.ApiClient.ParameterToString(propagationPolicy)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNamespacedNetworkPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  delete a ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>V1Status</returns>
        public V1Status DeleteNamespacedReplicaSet (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
             ApiResponse<V1Status> localVarResponse = DeleteNamespacedReplicaSetWithHttpInfo(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  delete a ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        public ApiResponse< V1Status > DeleteNamespacedReplicaSetWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->DeleteNamespacedReplicaSet");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->DeleteNamespacedReplicaSet");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->DeleteNamespacedReplicaSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (gracePeriodSeconds != null) localVarQueryParams.Add("gracePeriodSeconds", Configuration.ApiClient.ParameterToString(gracePeriodSeconds)); // query parameter
            if (orphanDependents != null) localVarQueryParams.Add("orphanDependents", Configuration.ApiClient.ParameterToString(orphanDependents)); // query parameter
            if (propagationPolicy != null) localVarQueryParams.Add("propagationPolicy", Configuration.ApiClient.ParameterToString(propagationPolicy)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNamespacedReplicaSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  delete a ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of V1Status</returns>
        public async System.Threading.Tasks.Task<V1Status> DeleteNamespacedReplicaSetAsync (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
             ApiResponse<V1Status> localVarResponse = await DeleteNamespacedReplicaSetAsyncWithHttpInfo(name, _namespace, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  delete a ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Status>> DeleteNamespacedReplicaSetAsyncWithHttpInfo (string name, string _namespace, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->DeleteNamespacedReplicaSet");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->DeleteNamespacedReplicaSet");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->DeleteNamespacedReplicaSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (gracePeriodSeconds != null) localVarQueryParams.Add("gracePeriodSeconds", Configuration.ApiClient.ParameterToString(gracePeriodSeconds)); // query parameter
            if (orphanDependents != null) localVarQueryParams.Add("orphanDependents", Configuration.ApiClient.ParameterToString(orphanDependents)); // query parameter
            if (propagationPolicy != null) localVarQueryParams.Add("propagationPolicy", Configuration.ApiClient.ParameterToString(propagationPolicy)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteNamespacedReplicaSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  delete a PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>V1Status</returns>
        public V1Status DeletePodSecurityPolicy (string name, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
             ApiResponse<V1Status> localVarResponse = DeletePodSecurityPolicyWithHttpInfo(name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  delete a PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        public ApiResponse< V1Status > DeletePodSecurityPolicyWithHttpInfo (string name, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->DeletePodSecurityPolicy");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->DeletePodSecurityPolicy");

            var localVarPath = "/apis/extensions/v1beta1/podsecuritypolicies/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (gracePeriodSeconds != null) localVarQueryParams.Add("gracePeriodSeconds", Configuration.ApiClient.ParameterToString(gracePeriodSeconds)); // query parameter
            if (orphanDependents != null) localVarQueryParams.Add("orphanDependents", Configuration.ApiClient.ParameterToString(orphanDependents)); // query parameter
            if (propagationPolicy != null) localVarQueryParams.Add("propagationPolicy", Configuration.ApiClient.ParameterToString(propagationPolicy)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePodSecurityPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  delete a PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of V1Status</returns>
        public async System.Threading.Tasks.Task<V1Status> DeletePodSecurityPolicyAsync (string name, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
             ApiResponse<V1Status> localVarResponse = await DeletePodSecurityPolicyAsyncWithHttpInfo(name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  delete a PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Status>> DeletePodSecurityPolicyAsyncWithHttpInfo (string name, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->DeletePodSecurityPolicy");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->DeletePodSecurityPolicy");

            var localVarPath = "/apis/extensions/v1beta1/podsecuritypolicies/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (gracePeriodSeconds != null) localVarQueryParams.Add("gracePeriodSeconds", Configuration.ApiClient.ParameterToString(gracePeriodSeconds)); // query parameter
            if (orphanDependents != null) localVarQueryParams.Add("orphanDependents", Configuration.ApiClient.ParameterToString(orphanDependents)); // query parameter
            if (propagationPolicy != null) localVarQueryParams.Add("propagationPolicy", Configuration.ApiClient.ParameterToString(propagationPolicy)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeletePodSecurityPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  delete a ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>V1Status</returns>
        public V1Status DeleteThirdPartyResource (string name, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
             ApiResponse<V1Status> localVarResponse = DeleteThirdPartyResourceWithHttpInfo(name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  delete a ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>ApiResponse of V1Status</returns>
        public ApiResponse< V1Status > DeleteThirdPartyResourceWithHttpInfo (string name, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->DeleteThirdPartyResource");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->DeleteThirdPartyResource");

            var localVarPath = "/apis/extensions/v1beta1/thirdpartyresources/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (gracePeriodSeconds != null) localVarQueryParams.Add("gracePeriodSeconds", Configuration.ApiClient.ParameterToString(gracePeriodSeconds)); // query parameter
            if (orphanDependents != null) localVarQueryParams.Add("orphanDependents", Configuration.ApiClient.ParameterToString(orphanDependents)); // query parameter
            if (propagationPolicy != null) localVarQueryParams.Add("propagationPolicy", Configuration.ApiClient.ParameterToString(propagationPolicy)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteThirdPartyResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  delete a ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of V1Status</returns>
        public async System.Threading.Tasks.Task<V1Status> DeleteThirdPartyResourceAsync (string name, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
             ApiResponse<V1Status> localVarResponse = await DeleteThirdPartyResourceAsyncWithHttpInfo(name, body, pretty, gracePeriodSeconds, orphanDependents, propagationPolicy);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  delete a ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="gracePeriodSeconds">The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately. (optional)</param>
        /// <param name="orphanDependents">Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \&quot;orphan\&quot; finalizer will be added to/removed from the object&#39;s finalizers list. Either this field or PropagationPolicy may be set, but not both. (optional)</param>
        /// <param name="propagationPolicy">Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. (optional)</param>
        /// <returns>Task of ApiResponse (V1Status)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1Status>> DeleteThirdPartyResourceAsyncWithHttpInfo (string name, V1DeleteOptions body, string pretty = null, int? gracePeriodSeconds = null, bool? orphanDependents = null, string propagationPolicy = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->DeleteThirdPartyResource");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->DeleteThirdPartyResource");

            var localVarPath = "/apis/extensions/v1beta1/thirdpartyresources/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (gracePeriodSeconds != null) localVarQueryParams.Add("gracePeriodSeconds", Configuration.ApiClient.ParameterToString(gracePeriodSeconds)); // query parameter
            if (orphanDependents != null) localVarQueryParams.Add("orphanDependents", Configuration.ApiClient.ParameterToString(orphanDependents)); // query parameter
            if (propagationPolicy != null) localVarQueryParams.Add("propagationPolicy", Configuration.ApiClient.ParameterToString(propagationPolicy)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteThirdPartyResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1Status>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1Status) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1Status)));
        }

        /// <summary>
        ///  get available resources
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>V1APIResourceList</returns>
        public V1APIResourceList GetAPIResources ()
        {
             ApiResponse<V1APIResourceList> localVarResponse = GetAPIResourcesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        ///  get available resources
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of V1APIResourceList</returns>
        public ApiResponse< V1APIResourceList > GetAPIResourcesWithHttpInfo ()
        {

            var localVarPath = "/apis/extensions/v1beta1/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAPIResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1APIResourceList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1APIResourceList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1APIResourceList)));
        }

        /// <summary>
        ///  get available resources
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of V1APIResourceList</returns>
        public async System.Threading.Tasks.Task<V1APIResourceList> GetAPIResourcesAsync ()
        {
             ApiResponse<V1APIResourceList> localVarResponse = await GetAPIResourcesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        ///  get available resources
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (V1APIResourceList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1APIResourceList>> GetAPIResourcesAsyncWithHttpInfo ()
        {

            var localVarPath = "/apis/extensions/v1beta1/";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "application/yaml", 
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);


            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAPIResources", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1APIResourceList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1APIResourceList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1APIResourceList)));
        }

        /// <summary>
        ///  list or watch objects of kind DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1beta1DaemonSetList</returns>
        public V1beta1DaemonSetList ListDaemonSetForAllNamespaces (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1beta1DaemonSetList> localVarResponse = ListDaemonSetForAllNamespacesWithHttpInfo(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  list or watch objects of kind DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1beta1DaemonSetList</returns>
        public ApiResponse< V1beta1DaemonSetList > ListDaemonSetForAllNamespacesWithHttpInfo (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {

            var localVarPath = "/apis/extensions/v1beta1/daemonsets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf",
                "application/json;stream=watch",
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDaemonSetForAllNamespaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1DaemonSetList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1DaemonSetList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1DaemonSetList)));
        }

        /// <summary>
        ///  list or watch objects of kind DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1beta1DaemonSetList</returns>
        public async System.Threading.Tasks.Task<V1beta1DaemonSetList> ListDaemonSetForAllNamespacesAsync (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1beta1DaemonSetList> localVarResponse = await ListDaemonSetForAllNamespacesAsyncWithHttpInfo(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  list or watch objects of kind DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1DaemonSetList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1DaemonSetList>> ListDaemonSetForAllNamespacesAsyncWithHttpInfo (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {

            var localVarPath = "/apis/extensions/v1beta1/daemonsets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf",
                "application/json;stream=watch",
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDaemonSetForAllNamespaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1DaemonSetList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1DaemonSetList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1DaemonSetList)));
        }

        /// <summary>
        ///  list or watch objects of kind Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ExtensionsV1beta1DeploymentList</returns>
        public ExtensionsV1beta1DeploymentList ListDeploymentForAllNamespaces (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<ExtensionsV1beta1DeploymentList> localVarResponse = ListDeploymentForAllNamespacesWithHttpInfo(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  list or watch objects of kind Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1DeploymentList</returns>
        public ApiResponse< ExtensionsV1beta1DeploymentList > ListDeploymentForAllNamespacesWithHttpInfo (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {

            var localVarPath = "/apis/extensions/v1beta1/deployments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf",
                "application/json;stream=watch",
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDeploymentForAllNamespaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1DeploymentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1DeploymentList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1DeploymentList)));
        }

        /// <summary>
        ///  list or watch objects of kind Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1DeploymentList</returns>
        public async System.Threading.Tasks.Task<ExtensionsV1beta1DeploymentList> ListDeploymentForAllNamespacesAsync (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<ExtensionsV1beta1DeploymentList> localVarResponse = await ListDeploymentForAllNamespacesAsyncWithHttpInfo(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  list or watch objects of kind Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1DeploymentList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1DeploymentList>> ListDeploymentForAllNamespacesAsyncWithHttpInfo (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {

            var localVarPath = "/apis/extensions/v1beta1/deployments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf",
                "application/json;stream=watch",
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListDeploymentForAllNamespaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1DeploymentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1DeploymentList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1DeploymentList)));
        }

        /// <summary>
        ///  list or watch objects of kind Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1beta1IngressList</returns>
        public V1beta1IngressList ListIngressForAllNamespaces (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1beta1IngressList> localVarResponse = ListIngressForAllNamespacesWithHttpInfo(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  list or watch objects of kind Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1beta1IngressList</returns>
        public ApiResponse< V1beta1IngressList > ListIngressForAllNamespacesWithHttpInfo (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {

            var localVarPath = "/apis/extensions/v1beta1/ingresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf",
                "application/json;stream=watch",
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIngressForAllNamespaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1IngressList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1IngressList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1IngressList)));
        }

        /// <summary>
        ///  list or watch objects of kind Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1beta1IngressList</returns>
        public async System.Threading.Tasks.Task<V1beta1IngressList> ListIngressForAllNamespacesAsync (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1beta1IngressList> localVarResponse = await ListIngressForAllNamespacesAsyncWithHttpInfo(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  list or watch objects of kind Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1IngressList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1IngressList>> ListIngressForAllNamespacesAsyncWithHttpInfo (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {

            var localVarPath = "/apis/extensions/v1beta1/ingresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf",
                "application/json;stream=watch",
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListIngressForAllNamespaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1IngressList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1IngressList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1IngressList)));
        }

        /// <summary>
        ///  list or watch objects of kind DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1beta1DaemonSetList</returns>
        public V1beta1DaemonSetList ListNamespacedDaemonSet (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1beta1DaemonSetList> localVarResponse = ListNamespacedDaemonSetWithHttpInfo(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  list or watch objects of kind DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1beta1DaemonSetList</returns>
        public ApiResponse< V1beta1DaemonSetList > ListNamespacedDaemonSetWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ListNamespacedDaemonSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf",
                "application/json;stream=watch",
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNamespacedDaemonSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1DaemonSetList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1DaemonSetList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1DaemonSetList)));
        }

        /// <summary>
        ///  list or watch objects of kind DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1beta1DaemonSetList</returns>
        public async System.Threading.Tasks.Task<V1beta1DaemonSetList> ListNamespacedDaemonSetAsync (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1beta1DaemonSetList> localVarResponse = await ListNamespacedDaemonSetAsyncWithHttpInfo(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  list or watch objects of kind DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1DaemonSetList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1DaemonSetList>> ListNamespacedDaemonSetAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ListNamespacedDaemonSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf",
                "application/json;stream=watch",
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNamespacedDaemonSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1DaemonSetList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1DaemonSetList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1DaemonSetList)));
        }

        /// <summary>
        ///  list or watch objects of kind Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ExtensionsV1beta1DeploymentList</returns>
        public ExtensionsV1beta1DeploymentList ListNamespacedDeployment (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<ExtensionsV1beta1DeploymentList> localVarResponse = ListNamespacedDeploymentWithHttpInfo(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  list or watch objects of kind Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1DeploymentList</returns>
        public ApiResponse< ExtensionsV1beta1DeploymentList > ListNamespacedDeploymentWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ListNamespacedDeployment");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf",
                "application/json;stream=watch",
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNamespacedDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1DeploymentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1DeploymentList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1DeploymentList)));
        }

        /// <summary>
        ///  list or watch objects of kind Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1DeploymentList</returns>
        public async System.Threading.Tasks.Task<ExtensionsV1beta1DeploymentList> ListNamespacedDeploymentAsync (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<ExtensionsV1beta1DeploymentList> localVarResponse = await ListNamespacedDeploymentAsyncWithHttpInfo(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  list or watch objects of kind Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1DeploymentList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1DeploymentList>> ListNamespacedDeploymentAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ListNamespacedDeployment");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf",
                "application/json;stream=watch",
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNamespacedDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1DeploymentList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1DeploymentList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1DeploymentList)));
        }

        /// <summary>
        ///  list or watch objects of kind Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1beta1IngressList</returns>
        public V1beta1IngressList ListNamespacedIngress (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1beta1IngressList> localVarResponse = ListNamespacedIngressWithHttpInfo(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  list or watch objects of kind Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1beta1IngressList</returns>
        public ApiResponse< V1beta1IngressList > ListNamespacedIngressWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ListNamespacedIngress");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf",
                "application/json;stream=watch",
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNamespacedIngress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1IngressList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1IngressList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1IngressList)));
        }

        /// <summary>
        ///  list or watch objects of kind Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1beta1IngressList</returns>
        public async System.Threading.Tasks.Task<V1beta1IngressList> ListNamespacedIngressAsync (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1beta1IngressList> localVarResponse = await ListNamespacedIngressAsyncWithHttpInfo(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  list or watch objects of kind Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1IngressList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1IngressList>> ListNamespacedIngressAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ListNamespacedIngress");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf",
                "application/json;stream=watch",
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNamespacedIngress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1IngressList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1IngressList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1IngressList)));
        }

        /// <summary>
        ///  list or watch objects of kind NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1beta1NetworkPolicyList</returns>
        public V1beta1NetworkPolicyList ListNamespacedNetworkPolicy (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1beta1NetworkPolicyList> localVarResponse = ListNamespacedNetworkPolicyWithHttpInfo(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  list or watch objects of kind NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1beta1NetworkPolicyList</returns>
        public ApiResponse< V1beta1NetworkPolicyList > ListNamespacedNetworkPolicyWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ListNamespacedNetworkPolicy");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf",
                "application/json;stream=watch",
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNamespacedNetworkPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1NetworkPolicyList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1NetworkPolicyList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1NetworkPolicyList)));
        }

        /// <summary>
        ///  list or watch objects of kind NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1beta1NetworkPolicyList</returns>
        public async System.Threading.Tasks.Task<V1beta1NetworkPolicyList> ListNamespacedNetworkPolicyAsync (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1beta1NetworkPolicyList> localVarResponse = await ListNamespacedNetworkPolicyAsyncWithHttpInfo(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  list or watch objects of kind NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1NetworkPolicyList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1NetworkPolicyList>> ListNamespacedNetworkPolicyAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ListNamespacedNetworkPolicy");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf",
                "application/json;stream=watch",
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNamespacedNetworkPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1NetworkPolicyList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1NetworkPolicyList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1NetworkPolicyList)));
        }

        /// <summary>
        ///  list or watch objects of kind ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1beta1ReplicaSetList</returns>
        public V1beta1ReplicaSetList ListNamespacedReplicaSet (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1beta1ReplicaSetList> localVarResponse = ListNamespacedReplicaSetWithHttpInfo(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  list or watch objects of kind ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1beta1ReplicaSetList</returns>
        public ApiResponse< V1beta1ReplicaSetList > ListNamespacedReplicaSetWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ListNamespacedReplicaSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf",
                "application/json;stream=watch",
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNamespacedReplicaSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ReplicaSetList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ReplicaSetList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ReplicaSetList)));
        }

        /// <summary>
        ///  list or watch objects of kind ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1beta1ReplicaSetList</returns>
        public async System.Threading.Tasks.Task<V1beta1ReplicaSetList> ListNamespacedReplicaSetAsync (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1beta1ReplicaSetList> localVarResponse = await ListNamespacedReplicaSetAsyncWithHttpInfo(_namespace, pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  list or watch objects of kind ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ReplicaSetList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1ReplicaSetList>> ListNamespacedReplicaSetAsyncWithHttpInfo (string _namespace, string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ListNamespacedReplicaSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf",
                "application/json;stream=watch",
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNamespacedReplicaSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ReplicaSetList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ReplicaSetList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ReplicaSetList)));
        }

        /// <summary>
        ///  list or watch objects of kind NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1beta1NetworkPolicyList</returns>
        public V1beta1NetworkPolicyList ListNetworkPolicyForAllNamespaces (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1beta1NetworkPolicyList> localVarResponse = ListNetworkPolicyForAllNamespacesWithHttpInfo(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  list or watch objects of kind NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1beta1NetworkPolicyList</returns>
        public ApiResponse< V1beta1NetworkPolicyList > ListNetworkPolicyForAllNamespacesWithHttpInfo (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {

            var localVarPath = "/apis/extensions/v1beta1/networkpolicies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf",
                "application/json;stream=watch",
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNetworkPolicyForAllNamespaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1NetworkPolicyList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1NetworkPolicyList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1NetworkPolicyList)));
        }

        /// <summary>
        ///  list or watch objects of kind NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1beta1NetworkPolicyList</returns>
        public async System.Threading.Tasks.Task<V1beta1NetworkPolicyList> ListNetworkPolicyForAllNamespacesAsync (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1beta1NetworkPolicyList> localVarResponse = await ListNetworkPolicyForAllNamespacesAsyncWithHttpInfo(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  list or watch objects of kind NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1NetworkPolicyList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1NetworkPolicyList>> ListNetworkPolicyForAllNamespacesAsyncWithHttpInfo (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {

            var localVarPath = "/apis/extensions/v1beta1/networkpolicies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf",
                "application/json;stream=watch",
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListNetworkPolicyForAllNamespaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1NetworkPolicyList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1NetworkPolicyList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1NetworkPolicyList)));
        }

        /// <summary>
        ///  list or watch objects of kind PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1beta1PodSecurityPolicyList</returns>
        public V1beta1PodSecurityPolicyList ListPodSecurityPolicy (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1beta1PodSecurityPolicyList> localVarResponse = ListPodSecurityPolicyWithHttpInfo(pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  list or watch objects of kind PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1beta1PodSecurityPolicyList</returns>
        public ApiResponse< V1beta1PodSecurityPolicyList > ListPodSecurityPolicyWithHttpInfo (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {

            var localVarPath = "/apis/extensions/v1beta1/podsecuritypolicies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf",
                "application/json;stream=watch",
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPodSecurityPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1PodSecurityPolicyList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1PodSecurityPolicyList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1PodSecurityPolicyList)));
        }

        /// <summary>
        ///  list or watch objects of kind PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1beta1PodSecurityPolicyList</returns>
        public async System.Threading.Tasks.Task<V1beta1PodSecurityPolicyList> ListPodSecurityPolicyAsync (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1beta1PodSecurityPolicyList> localVarResponse = await ListPodSecurityPolicyAsyncWithHttpInfo(pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  list or watch objects of kind PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1PodSecurityPolicyList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1PodSecurityPolicyList>> ListPodSecurityPolicyAsyncWithHttpInfo (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {

            var localVarPath = "/apis/extensions/v1beta1/podsecuritypolicies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf",
                "application/json;stream=watch",
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListPodSecurityPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1PodSecurityPolicyList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1PodSecurityPolicyList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1PodSecurityPolicyList)));
        }

        /// <summary>
        ///  list or watch objects of kind ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1beta1ReplicaSetList</returns>
        public V1beta1ReplicaSetList ListReplicaSetForAllNamespaces (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1beta1ReplicaSetList> localVarResponse = ListReplicaSetForAllNamespacesWithHttpInfo(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  list or watch objects of kind ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1beta1ReplicaSetList</returns>
        public ApiResponse< V1beta1ReplicaSetList > ListReplicaSetForAllNamespacesWithHttpInfo (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {

            var localVarPath = "/apis/extensions/v1beta1/replicasets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf",
                "application/json;stream=watch",
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListReplicaSetForAllNamespaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ReplicaSetList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ReplicaSetList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ReplicaSetList)));
        }

        /// <summary>
        ///  list or watch objects of kind ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1beta1ReplicaSetList</returns>
        public async System.Threading.Tasks.Task<V1beta1ReplicaSetList> ListReplicaSetForAllNamespacesAsync (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1beta1ReplicaSetList> localVarResponse = await ListReplicaSetForAllNamespacesAsyncWithHttpInfo(fieldSelector, includeUninitialized, labelSelector, pretty, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  list or watch objects of kind ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ReplicaSetList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1ReplicaSetList>> ListReplicaSetForAllNamespacesAsyncWithHttpInfo (string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string pretty = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {

            var localVarPath = "/apis/extensions/v1beta1/replicasets";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf",
                "application/json;stream=watch",
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListReplicaSetForAllNamespaces", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ReplicaSetList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ReplicaSetList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ReplicaSetList)));
        }

        /// <summary>
        ///  list or watch objects of kind ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>V1beta1ThirdPartyResourceList</returns>
        public V1beta1ThirdPartyResourceList ListThirdPartyResource (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1beta1ThirdPartyResourceList> localVarResponse = ListThirdPartyResourceWithHttpInfo(pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  list or watch objects of kind ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>ApiResponse of V1beta1ThirdPartyResourceList</returns>
        public ApiResponse< V1beta1ThirdPartyResourceList > ListThirdPartyResourceWithHttpInfo (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {

            var localVarPath = "/apis/extensions/v1beta1/thirdpartyresources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf",
                "application/json;stream=watch",
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListThirdPartyResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ThirdPartyResourceList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ThirdPartyResourceList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ThirdPartyResourceList)));
        }

        /// <summary>
        ///  list or watch objects of kind ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of V1beta1ThirdPartyResourceList</returns>
        public async System.Threading.Tasks.Task<V1beta1ThirdPartyResourceList> ListThirdPartyResourceAsync (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {
             ApiResponse<V1beta1ThirdPartyResourceList> localVarResponse = await ListThirdPartyResourceAsyncWithHttpInfo(pretty, fieldSelector, includeUninitialized, labelSelector, resourceVersion, timeoutSeconds, watch);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  list or watch objects of kind ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="fieldSelector">A selector to restrict the list of returned objects by their fields. Defaults to everything. (optional)</param>
        /// <param name="includeUninitialized">If true, partially initialized resources are included in the response. (optional)</param>
        /// <param name="labelSelector">A selector to restrict the list of returned objects by their labels. Defaults to everything. (optional)</param>
        /// <param name="resourceVersion">When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it&#39;s 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv. (optional)</param>
        /// <param name="timeoutSeconds">Timeout for the list/watch call. (optional)</param>
        /// <param name="watch">Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ThirdPartyResourceList)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1ThirdPartyResourceList>> ListThirdPartyResourceAsyncWithHttpInfo (string pretty = null, string fieldSelector = null, bool? includeUninitialized = null, string labelSelector = null, string resourceVersion = null, int? timeoutSeconds = null, bool? watch = null)
        {

            var localVarPath = "/apis/extensions/v1beta1/thirdpartyresources";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf",
                "application/json;stream=watch",
                "application/vnd.kubernetes.protobuf;stream=watch"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (fieldSelector != null) localVarQueryParams.Add("fieldSelector", Configuration.ApiClient.ParameterToString(fieldSelector)); // query parameter
            if (includeUninitialized != null) localVarQueryParams.Add("includeUninitialized", Configuration.ApiClient.ParameterToString(includeUninitialized)); // query parameter
            if (labelSelector != null) localVarQueryParams.Add("labelSelector", Configuration.ApiClient.ParameterToString(labelSelector)); // query parameter
            if (resourceVersion != null) localVarQueryParams.Add("resourceVersion", Configuration.ApiClient.ParameterToString(resourceVersion)); // query parameter
            if (timeoutSeconds != null) localVarQueryParams.Add("timeoutSeconds", Configuration.ApiClient.ParameterToString(timeoutSeconds)); // query parameter
            if (watch != null) localVarQueryParams.Add("watch", Configuration.ApiClient.ParameterToString(watch)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListThirdPartyResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ThirdPartyResourceList>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ThirdPartyResourceList) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ThirdPartyResourceList)));
        }

        /// <summary>
        ///  partially update the specified DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1DaemonSet</returns>
        public V1beta1DaemonSet PatchNamespacedDaemonSet (string name, string _namespace, Object body, string pretty = null)
        {
             ApiResponse<V1beta1DaemonSet> localVarResponse = PatchNamespacedDaemonSetWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  partially update the specified DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1DaemonSet</returns>
        public ApiResponse< V1beta1DaemonSet > PatchNamespacedDaemonSetWithHttpInfo (string name, string _namespace, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchNamespacedDaemonSet");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->PatchNamespacedDaemonSet");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchNamespacedDaemonSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedDaemonSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1DaemonSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1DaemonSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1DaemonSet)));
        }

        /// <summary>
        ///  partially update the specified DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1DaemonSet</returns>
        public async System.Threading.Tasks.Task<V1beta1DaemonSet> PatchNamespacedDaemonSetAsync (string name, string _namespace, Object body, string pretty = null)
        {
             ApiResponse<V1beta1DaemonSet> localVarResponse = await PatchNamespacedDaemonSetAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  partially update the specified DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1DaemonSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1DaemonSet>> PatchNamespacedDaemonSetAsyncWithHttpInfo (string name, string _namespace, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchNamespacedDaemonSet");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->PatchNamespacedDaemonSet");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchNamespacedDaemonSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedDaemonSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1DaemonSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1DaemonSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1DaemonSet)));
        }

        /// <summary>
        ///  partially update status of the specified DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1DaemonSet</returns>
        public V1beta1DaemonSet PatchNamespacedDaemonSetStatus (string name, string _namespace, Object body, string pretty = null)
        {
             ApiResponse<V1beta1DaemonSet> localVarResponse = PatchNamespacedDaemonSetStatusWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  partially update status of the specified DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1DaemonSet</returns>
        public ApiResponse< V1beta1DaemonSet > PatchNamespacedDaemonSetStatusWithHttpInfo (string name, string _namespace, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchNamespacedDaemonSetStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->PatchNamespacedDaemonSetStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchNamespacedDaemonSetStatus");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedDaemonSetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1DaemonSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1DaemonSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1DaemonSet)));
        }

        /// <summary>
        ///  partially update status of the specified DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1DaemonSet</returns>
        public async System.Threading.Tasks.Task<V1beta1DaemonSet> PatchNamespacedDaemonSetStatusAsync (string name, string _namespace, Object body, string pretty = null)
        {
             ApiResponse<V1beta1DaemonSet> localVarResponse = await PatchNamespacedDaemonSetStatusAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  partially update status of the specified DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1DaemonSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1DaemonSet>> PatchNamespacedDaemonSetStatusAsyncWithHttpInfo (string name, string _namespace, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchNamespacedDaemonSetStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->PatchNamespacedDaemonSetStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchNamespacedDaemonSetStatus");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedDaemonSetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1DaemonSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1DaemonSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1DaemonSet)));
        }

        /// <summary>
        ///  partially update the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Deployment</returns>
        public ExtensionsV1beta1Deployment PatchNamespacedDeployment (string name, string _namespace, Object body, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Deployment> localVarResponse = PatchNamespacedDeploymentWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  partially update the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Deployment</returns>
        public ApiResponse< ExtensionsV1beta1Deployment > PatchNamespacedDeploymentWithHttpInfo (string name, string _namespace, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchNamespacedDeployment");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->PatchNamespacedDeployment");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchNamespacedDeployment");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Deployment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Deployment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Deployment)));
        }

        /// <summary>
        ///  partially update the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Deployment</returns>
        public async System.Threading.Tasks.Task<ExtensionsV1beta1Deployment> PatchNamespacedDeploymentAsync (string name, string _namespace, Object body, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Deployment> localVarResponse = await PatchNamespacedDeploymentAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  partially update the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Deployment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Deployment>> PatchNamespacedDeploymentAsyncWithHttpInfo (string name, string _namespace, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchNamespacedDeployment");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->PatchNamespacedDeployment");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchNamespacedDeployment");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Deployment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Deployment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Deployment)));
        }

        /// <summary>
        ///  partially update scale of the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Scale</returns>
        public ExtensionsV1beta1Scale PatchNamespacedDeploymentScale (string name, string _namespace, Object body, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Scale> localVarResponse = PatchNamespacedDeploymentScaleWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  partially update scale of the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Scale</returns>
        public ApiResponse< ExtensionsV1beta1Scale > PatchNamespacedDeploymentScaleWithHttpInfo (string name, string _namespace, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchNamespacedDeploymentScale");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->PatchNamespacedDeploymentScale");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchNamespacedDeploymentScale");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedDeploymentScale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Scale>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Scale) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Scale)));
        }

        /// <summary>
        ///  partially update scale of the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Scale</returns>
        public async System.Threading.Tasks.Task<ExtensionsV1beta1Scale> PatchNamespacedDeploymentScaleAsync (string name, string _namespace, Object body, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Scale> localVarResponse = await PatchNamespacedDeploymentScaleAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  partially update scale of the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Scale)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Scale>> PatchNamespacedDeploymentScaleAsyncWithHttpInfo (string name, string _namespace, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchNamespacedDeploymentScale");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->PatchNamespacedDeploymentScale");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchNamespacedDeploymentScale");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedDeploymentScale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Scale>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Scale) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Scale)));
        }

        /// <summary>
        ///  partially update status of the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Deployment</returns>
        public ExtensionsV1beta1Deployment PatchNamespacedDeploymentStatus (string name, string _namespace, Object body, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Deployment> localVarResponse = PatchNamespacedDeploymentStatusWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  partially update status of the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Deployment</returns>
        public ApiResponse< ExtensionsV1beta1Deployment > PatchNamespacedDeploymentStatusWithHttpInfo (string name, string _namespace, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchNamespacedDeploymentStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->PatchNamespacedDeploymentStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchNamespacedDeploymentStatus");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedDeploymentStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Deployment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Deployment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Deployment)));
        }

        /// <summary>
        ///  partially update status of the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Deployment</returns>
        public async System.Threading.Tasks.Task<ExtensionsV1beta1Deployment> PatchNamespacedDeploymentStatusAsync (string name, string _namespace, Object body, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Deployment> localVarResponse = await PatchNamespacedDeploymentStatusAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  partially update status of the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Deployment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Deployment>> PatchNamespacedDeploymentStatusAsyncWithHttpInfo (string name, string _namespace, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchNamespacedDeploymentStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->PatchNamespacedDeploymentStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchNamespacedDeploymentStatus");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedDeploymentStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Deployment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Deployment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Deployment)));
        }

        /// <summary>
        ///  partially update the specified Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1Ingress</returns>
        public V1beta1Ingress PatchNamespacedIngress (string name, string _namespace, Object body, string pretty = null)
        {
             ApiResponse<V1beta1Ingress> localVarResponse = PatchNamespacedIngressWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  partially update the specified Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1Ingress</returns>
        public ApiResponse< V1beta1Ingress > PatchNamespacedIngressWithHttpInfo (string name, string _namespace, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchNamespacedIngress");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->PatchNamespacedIngress");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchNamespacedIngress");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedIngress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1Ingress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1Ingress) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1Ingress)));
        }

        /// <summary>
        ///  partially update the specified Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1Ingress</returns>
        public async System.Threading.Tasks.Task<V1beta1Ingress> PatchNamespacedIngressAsync (string name, string _namespace, Object body, string pretty = null)
        {
             ApiResponse<V1beta1Ingress> localVarResponse = await PatchNamespacedIngressAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  partially update the specified Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1Ingress)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1Ingress>> PatchNamespacedIngressAsyncWithHttpInfo (string name, string _namespace, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchNamespacedIngress");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->PatchNamespacedIngress");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchNamespacedIngress");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedIngress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1Ingress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1Ingress) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1Ingress)));
        }

        /// <summary>
        ///  partially update status of the specified Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1Ingress</returns>
        public V1beta1Ingress PatchNamespacedIngressStatus (string name, string _namespace, Object body, string pretty = null)
        {
             ApiResponse<V1beta1Ingress> localVarResponse = PatchNamespacedIngressStatusWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  partially update status of the specified Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1Ingress</returns>
        public ApiResponse< V1beta1Ingress > PatchNamespacedIngressStatusWithHttpInfo (string name, string _namespace, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchNamespacedIngressStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->PatchNamespacedIngressStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchNamespacedIngressStatus");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedIngressStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1Ingress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1Ingress) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1Ingress)));
        }

        /// <summary>
        ///  partially update status of the specified Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1Ingress</returns>
        public async System.Threading.Tasks.Task<V1beta1Ingress> PatchNamespacedIngressStatusAsync (string name, string _namespace, Object body, string pretty = null)
        {
             ApiResponse<V1beta1Ingress> localVarResponse = await PatchNamespacedIngressStatusAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  partially update status of the specified Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1Ingress)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1Ingress>> PatchNamespacedIngressStatusAsyncWithHttpInfo (string name, string _namespace, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchNamespacedIngressStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->PatchNamespacedIngressStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchNamespacedIngressStatus");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedIngressStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1Ingress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1Ingress) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1Ingress)));
        }

        /// <summary>
        ///  partially update the specified NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1NetworkPolicy</returns>
        public V1beta1NetworkPolicy PatchNamespacedNetworkPolicy (string name, string _namespace, Object body, string pretty = null)
        {
             ApiResponse<V1beta1NetworkPolicy> localVarResponse = PatchNamespacedNetworkPolicyWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  partially update the specified NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1NetworkPolicy</returns>
        public ApiResponse< V1beta1NetworkPolicy > PatchNamespacedNetworkPolicyWithHttpInfo (string name, string _namespace, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchNamespacedNetworkPolicy");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->PatchNamespacedNetworkPolicy");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchNamespacedNetworkPolicy");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedNetworkPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1NetworkPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1NetworkPolicy) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1NetworkPolicy)));
        }

        /// <summary>
        ///  partially update the specified NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1NetworkPolicy</returns>
        public async System.Threading.Tasks.Task<V1beta1NetworkPolicy> PatchNamespacedNetworkPolicyAsync (string name, string _namespace, Object body, string pretty = null)
        {
             ApiResponse<V1beta1NetworkPolicy> localVarResponse = await PatchNamespacedNetworkPolicyAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  partially update the specified NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1NetworkPolicy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1NetworkPolicy>> PatchNamespacedNetworkPolicyAsyncWithHttpInfo (string name, string _namespace, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchNamespacedNetworkPolicy");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->PatchNamespacedNetworkPolicy");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchNamespacedNetworkPolicy");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedNetworkPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1NetworkPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1NetworkPolicy) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1NetworkPolicy)));
        }

        /// <summary>
        ///  partially update the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1ReplicaSet</returns>
        public V1beta1ReplicaSet PatchNamespacedReplicaSet (string name, string _namespace, Object body, string pretty = null)
        {
             ApiResponse<V1beta1ReplicaSet> localVarResponse = PatchNamespacedReplicaSetWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  partially update the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1ReplicaSet</returns>
        public ApiResponse< V1beta1ReplicaSet > PatchNamespacedReplicaSetWithHttpInfo (string name, string _namespace, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchNamespacedReplicaSet");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->PatchNamespacedReplicaSet");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchNamespacedReplicaSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedReplicaSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ReplicaSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ReplicaSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ReplicaSet)));
        }

        /// <summary>
        ///  partially update the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1ReplicaSet</returns>
        public async System.Threading.Tasks.Task<V1beta1ReplicaSet> PatchNamespacedReplicaSetAsync (string name, string _namespace, Object body, string pretty = null)
        {
             ApiResponse<V1beta1ReplicaSet> localVarResponse = await PatchNamespacedReplicaSetAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  partially update the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ReplicaSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1ReplicaSet>> PatchNamespacedReplicaSetAsyncWithHttpInfo (string name, string _namespace, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchNamespacedReplicaSet");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->PatchNamespacedReplicaSet");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchNamespacedReplicaSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedReplicaSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ReplicaSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ReplicaSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ReplicaSet)));
        }

        /// <summary>
        ///  partially update scale of the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Scale</returns>
        public ExtensionsV1beta1Scale PatchNamespacedReplicaSetScale (string name, string _namespace, Object body, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Scale> localVarResponse = PatchNamespacedReplicaSetScaleWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  partially update scale of the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Scale</returns>
        public ApiResponse< ExtensionsV1beta1Scale > PatchNamespacedReplicaSetScaleWithHttpInfo (string name, string _namespace, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchNamespacedReplicaSetScale");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->PatchNamespacedReplicaSetScale");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchNamespacedReplicaSetScale");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedReplicaSetScale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Scale>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Scale) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Scale)));
        }

        /// <summary>
        ///  partially update scale of the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Scale</returns>
        public async System.Threading.Tasks.Task<ExtensionsV1beta1Scale> PatchNamespacedReplicaSetScaleAsync (string name, string _namespace, Object body, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Scale> localVarResponse = await PatchNamespacedReplicaSetScaleAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  partially update scale of the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Scale)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Scale>> PatchNamespacedReplicaSetScaleAsyncWithHttpInfo (string name, string _namespace, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchNamespacedReplicaSetScale");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->PatchNamespacedReplicaSetScale");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchNamespacedReplicaSetScale");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedReplicaSetScale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Scale>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Scale) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Scale)));
        }

        /// <summary>
        ///  partially update status of the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1ReplicaSet</returns>
        public V1beta1ReplicaSet PatchNamespacedReplicaSetStatus (string name, string _namespace, Object body, string pretty = null)
        {
             ApiResponse<V1beta1ReplicaSet> localVarResponse = PatchNamespacedReplicaSetStatusWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  partially update status of the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1ReplicaSet</returns>
        public ApiResponse< V1beta1ReplicaSet > PatchNamespacedReplicaSetStatusWithHttpInfo (string name, string _namespace, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchNamespacedReplicaSetStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->PatchNamespacedReplicaSetStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchNamespacedReplicaSetStatus");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedReplicaSetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ReplicaSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ReplicaSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ReplicaSet)));
        }

        /// <summary>
        ///  partially update status of the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1ReplicaSet</returns>
        public async System.Threading.Tasks.Task<V1beta1ReplicaSet> PatchNamespacedReplicaSetStatusAsync (string name, string _namespace, Object body, string pretty = null)
        {
             ApiResponse<V1beta1ReplicaSet> localVarResponse = await PatchNamespacedReplicaSetStatusAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  partially update status of the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ReplicaSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1ReplicaSet>> PatchNamespacedReplicaSetStatusAsyncWithHttpInfo (string name, string _namespace, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchNamespacedReplicaSetStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->PatchNamespacedReplicaSetStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchNamespacedReplicaSetStatus");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedReplicaSetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ReplicaSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ReplicaSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ReplicaSet)));
        }

        /// <summary>
        ///  partially update scale of the specified ReplicationControllerDummy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Scale</returns>
        public ExtensionsV1beta1Scale PatchNamespacedReplicationControllerDummyScale (string name, string _namespace, Object body, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Scale> localVarResponse = PatchNamespacedReplicationControllerDummyScaleWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  partially update scale of the specified ReplicationControllerDummy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Scale</returns>
        public ApiResponse< ExtensionsV1beta1Scale > PatchNamespacedReplicationControllerDummyScaleWithHttpInfo (string name, string _namespace, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchNamespacedReplicationControllerDummyScale");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->PatchNamespacedReplicationControllerDummyScale");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchNamespacedReplicationControllerDummyScale");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedReplicationControllerDummyScale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Scale>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Scale) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Scale)));
        }

        /// <summary>
        ///  partially update scale of the specified ReplicationControllerDummy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Scale</returns>
        public async System.Threading.Tasks.Task<ExtensionsV1beta1Scale> PatchNamespacedReplicationControllerDummyScaleAsync (string name, string _namespace, Object body, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Scale> localVarResponse = await PatchNamespacedReplicationControllerDummyScaleAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  partially update scale of the specified ReplicationControllerDummy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Scale)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Scale>> PatchNamespacedReplicationControllerDummyScaleAsyncWithHttpInfo (string name, string _namespace, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchNamespacedReplicationControllerDummyScale");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->PatchNamespacedReplicationControllerDummyScale");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchNamespacedReplicationControllerDummyScale");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchNamespacedReplicationControllerDummyScale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Scale>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Scale) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Scale)));
        }

        /// <summary>
        ///  partially update the specified PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1PodSecurityPolicy</returns>
        public V1beta1PodSecurityPolicy PatchPodSecurityPolicy (string name, Object body, string pretty = null)
        {
             ApiResponse<V1beta1PodSecurityPolicy> localVarResponse = PatchPodSecurityPolicyWithHttpInfo(name, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  partially update the specified PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1PodSecurityPolicy</returns>
        public ApiResponse< V1beta1PodSecurityPolicy > PatchPodSecurityPolicyWithHttpInfo (string name, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchPodSecurityPolicy");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchPodSecurityPolicy");

            var localVarPath = "/apis/extensions/v1beta1/podsecuritypolicies/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchPodSecurityPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1PodSecurityPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1PodSecurityPolicy) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1PodSecurityPolicy)));
        }

        /// <summary>
        ///  partially update the specified PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1PodSecurityPolicy</returns>
        public async System.Threading.Tasks.Task<V1beta1PodSecurityPolicy> PatchPodSecurityPolicyAsync (string name, Object body, string pretty = null)
        {
             ApiResponse<V1beta1PodSecurityPolicy> localVarResponse = await PatchPodSecurityPolicyAsyncWithHttpInfo(name, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  partially update the specified PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1PodSecurityPolicy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1PodSecurityPolicy>> PatchPodSecurityPolicyAsyncWithHttpInfo (string name, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchPodSecurityPolicy");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchPodSecurityPolicy");

            var localVarPath = "/apis/extensions/v1beta1/podsecuritypolicies/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchPodSecurityPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1PodSecurityPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1PodSecurityPolicy) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1PodSecurityPolicy)));
        }

        /// <summary>
        ///  partially update the specified ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1ThirdPartyResource</returns>
        public V1beta1ThirdPartyResource PatchThirdPartyResource (string name, Object body, string pretty = null)
        {
             ApiResponse<V1beta1ThirdPartyResource> localVarResponse = PatchThirdPartyResourceWithHttpInfo(name, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  partially update the specified ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1ThirdPartyResource</returns>
        public ApiResponse< V1beta1ThirdPartyResource > PatchThirdPartyResourceWithHttpInfo (string name, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchThirdPartyResource");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchThirdPartyResource");

            var localVarPath = "/apis/extensions/v1beta1/thirdpartyresources/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchThirdPartyResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ThirdPartyResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ThirdPartyResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ThirdPartyResource)));
        }

        /// <summary>
        ///  partially update the specified ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1ThirdPartyResource</returns>
        public async System.Threading.Tasks.Task<V1beta1ThirdPartyResource> PatchThirdPartyResourceAsync (string name, Object body, string pretty = null)
        {
             ApiResponse<V1beta1ThirdPartyResource> localVarResponse = await PatchThirdPartyResourceAsyncWithHttpInfo(name, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  partially update the specified ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ThirdPartyResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1ThirdPartyResource>> PatchThirdPartyResourceAsyncWithHttpInfo (string name, Object body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->PatchThirdPartyResource");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->PatchThirdPartyResource");

            var localVarPath = "/apis/extensions/v1beta1/thirdpartyresources/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json-patch+json", 
                "application/merge-patch+json", 
                "application/strategic-merge-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PATCH, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("PatchThirdPartyResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ThirdPartyResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ThirdPartyResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ThirdPartyResource)));
        }

        /// <summary>
        ///  read the specified DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>V1beta1DaemonSet</returns>
        public V1beta1DaemonSet ReadNamespacedDaemonSet (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
             ApiResponse<V1beta1DaemonSet> localVarResponse = ReadNamespacedDaemonSetWithHttpInfo(name, _namespace, pretty, exact, export);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  read the specified DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>ApiResponse of V1beta1DaemonSet</returns>
        public ApiResponse< V1beta1DaemonSet > ReadNamespacedDaemonSetWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadNamespacedDaemonSet");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReadNamespacedDaemonSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (exact != null) localVarQueryParams.Add("exact", Configuration.ApiClient.ParameterToString(exact)); // query parameter
            if (export != null) localVarQueryParams.Add("export", Configuration.ApiClient.ParameterToString(export)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedDaemonSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1DaemonSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1DaemonSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1DaemonSet)));
        }

        /// <summary>
        ///  read the specified DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of V1beta1DaemonSet</returns>
        public async System.Threading.Tasks.Task<V1beta1DaemonSet> ReadNamespacedDaemonSetAsync (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
             ApiResponse<V1beta1DaemonSet> localVarResponse = await ReadNamespacedDaemonSetAsyncWithHttpInfo(name, _namespace, pretty, exact, export);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  read the specified DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1DaemonSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1DaemonSet>> ReadNamespacedDaemonSetAsyncWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadNamespacedDaemonSet");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReadNamespacedDaemonSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (exact != null) localVarQueryParams.Add("exact", Configuration.ApiClient.ParameterToString(exact)); // query parameter
            if (export != null) localVarQueryParams.Add("export", Configuration.ApiClient.ParameterToString(export)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedDaemonSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1DaemonSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1DaemonSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1DaemonSet)));
        }

        /// <summary>
        ///  read status of the specified DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1DaemonSet</returns>
        public V1beta1DaemonSet ReadNamespacedDaemonSetStatus (string name, string _namespace, string pretty = null)
        {
             ApiResponse<V1beta1DaemonSet> localVarResponse = ReadNamespacedDaemonSetStatusWithHttpInfo(name, _namespace, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  read status of the specified DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1DaemonSet</returns>
        public ApiResponse< V1beta1DaemonSet > ReadNamespacedDaemonSetStatusWithHttpInfo (string name, string _namespace, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadNamespacedDaemonSetStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReadNamespacedDaemonSetStatus");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedDaemonSetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1DaemonSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1DaemonSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1DaemonSet)));
        }

        /// <summary>
        ///  read status of the specified DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1DaemonSet</returns>
        public async System.Threading.Tasks.Task<V1beta1DaemonSet> ReadNamespacedDaemonSetStatusAsync (string name, string _namespace, string pretty = null)
        {
             ApiResponse<V1beta1DaemonSet> localVarResponse = await ReadNamespacedDaemonSetStatusAsyncWithHttpInfo(name, _namespace, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  read status of the specified DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1DaemonSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1DaemonSet>> ReadNamespacedDaemonSetStatusAsyncWithHttpInfo (string name, string _namespace, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadNamespacedDaemonSetStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReadNamespacedDaemonSetStatus");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedDaemonSetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1DaemonSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1DaemonSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1DaemonSet)));
        }

        /// <summary>
        ///  read the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>ExtensionsV1beta1Deployment</returns>
        public ExtensionsV1beta1Deployment ReadNamespacedDeployment (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
             ApiResponse<ExtensionsV1beta1Deployment> localVarResponse = ReadNamespacedDeploymentWithHttpInfo(name, _namespace, pretty, exact, export);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  read the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Deployment</returns>
        public ApiResponse< ExtensionsV1beta1Deployment > ReadNamespacedDeploymentWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadNamespacedDeployment");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReadNamespacedDeployment");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (exact != null) localVarQueryParams.Add("exact", Configuration.ApiClient.ParameterToString(exact)); // query parameter
            if (export != null) localVarQueryParams.Add("export", Configuration.ApiClient.ParameterToString(export)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Deployment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Deployment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Deployment)));
        }

        /// <summary>
        ///  read the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Deployment</returns>
        public async System.Threading.Tasks.Task<ExtensionsV1beta1Deployment> ReadNamespacedDeploymentAsync (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
             ApiResponse<ExtensionsV1beta1Deployment> localVarResponse = await ReadNamespacedDeploymentAsyncWithHttpInfo(name, _namespace, pretty, exact, export);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  read the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Deployment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Deployment>> ReadNamespacedDeploymentAsyncWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadNamespacedDeployment");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReadNamespacedDeployment");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (exact != null) localVarQueryParams.Add("exact", Configuration.ApiClient.ParameterToString(exact)); // query parameter
            if (export != null) localVarQueryParams.Add("export", Configuration.ApiClient.ParameterToString(export)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Deployment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Deployment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Deployment)));
        }

        /// <summary>
        ///  read scale of the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Scale</returns>
        public ExtensionsV1beta1Scale ReadNamespacedDeploymentScale (string name, string _namespace, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Scale> localVarResponse = ReadNamespacedDeploymentScaleWithHttpInfo(name, _namespace, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  read scale of the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Scale</returns>
        public ApiResponse< ExtensionsV1beta1Scale > ReadNamespacedDeploymentScaleWithHttpInfo (string name, string _namespace, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadNamespacedDeploymentScale");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReadNamespacedDeploymentScale");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedDeploymentScale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Scale>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Scale) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Scale)));
        }

        /// <summary>
        ///  read scale of the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Scale</returns>
        public async System.Threading.Tasks.Task<ExtensionsV1beta1Scale> ReadNamespacedDeploymentScaleAsync (string name, string _namespace, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Scale> localVarResponse = await ReadNamespacedDeploymentScaleAsyncWithHttpInfo(name, _namespace, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  read scale of the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Scale)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Scale>> ReadNamespacedDeploymentScaleAsyncWithHttpInfo (string name, string _namespace, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadNamespacedDeploymentScale");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReadNamespacedDeploymentScale");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedDeploymentScale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Scale>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Scale) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Scale)));
        }

        /// <summary>
        ///  read status of the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Deployment</returns>
        public ExtensionsV1beta1Deployment ReadNamespacedDeploymentStatus (string name, string _namespace, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Deployment> localVarResponse = ReadNamespacedDeploymentStatusWithHttpInfo(name, _namespace, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  read status of the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Deployment</returns>
        public ApiResponse< ExtensionsV1beta1Deployment > ReadNamespacedDeploymentStatusWithHttpInfo (string name, string _namespace, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadNamespacedDeploymentStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReadNamespacedDeploymentStatus");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedDeploymentStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Deployment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Deployment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Deployment)));
        }

        /// <summary>
        ///  read status of the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Deployment</returns>
        public async System.Threading.Tasks.Task<ExtensionsV1beta1Deployment> ReadNamespacedDeploymentStatusAsync (string name, string _namespace, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Deployment> localVarResponse = await ReadNamespacedDeploymentStatusAsyncWithHttpInfo(name, _namespace, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  read status of the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Deployment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Deployment>> ReadNamespacedDeploymentStatusAsyncWithHttpInfo (string name, string _namespace, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadNamespacedDeploymentStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReadNamespacedDeploymentStatus");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedDeploymentStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Deployment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Deployment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Deployment)));
        }

        /// <summary>
        ///  read the specified Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>V1beta1Ingress</returns>
        public V1beta1Ingress ReadNamespacedIngress (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
             ApiResponse<V1beta1Ingress> localVarResponse = ReadNamespacedIngressWithHttpInfo(name, _namespace, pretty, exact, export);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  read the specified Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>ApiResponse of V1beta1Ingress</returns>
        public ApiResponse< V1beta1Ingress > ReadNamespacedIngressWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadNamespacedIngress");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReadNamespacedIngress");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (exact != null) localVarQueryParams.Add("exact", Configuration.ApiClient.ParameterToString(exact)); // query parameter
            if (export != null) localVarQueryParams.Add("export", Configuration.ApiClient.ParameterToString(export)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedIngress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1Ingress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1Ingress) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1Ingress)));
        }

        /// <summary>
        ///  read the specified Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of V1beta1Ingress</returns>
        public async System.Threading.Tasks.Task<V1beta1Ingress> ReadNamespacedIngressAsync (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
             ApiResponse<V1beta1Ingress> localVarResponse = await ReadNamespacedIngressAsyncWithHttpInfo(name, _namespace, pretty, exact, export);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  read the specified Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1Ingress)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1Ingress>> ReadNamespacedIngressAsyncWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadNamespacedIngress");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReadNamespacedIngress");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (exact != null) localVarQueryParams.Add("exact", Configuration.ApiClient.ParameterToString(exact)); // query parameter
            if (export != null) localVarQueryParams.Add("export", Configuration.ApiClient.ParameterToString(export)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedIngress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1Ingress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1Ingress) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1Ingress)));
        }

        /// <summary>
        ///  read status of the specified Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1Ingress</returns>
        public V1beta1Ingress ReadNamespacedIngressStatus (string name, string _namespace, string pretty = null)
        {
             ApiResponse<V1beta1Ingress> localVarResponse = ReadNamespacedIngressStatusWithHttpInfo(name, _namespace, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  read status of the specified Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1Ingress</returns>
        public ApiResponse< V1beta1Ingress > ReadNamespacedIngressStatusWithHttpInfo (string name, string _namespace, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadNamespacedIngressStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReadNamespacedIngressStatus");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedIngressStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1Ingress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1Ingress) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1Ingress)));
        }

        /// <summary>
        ///  read status of the specified Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1Ingress</returns>
        public async System.Threading.Tasks.Task<V1beta1Ingress> ReadNamespacedIngressStatusAsync (string name, string _namespace, string pretty = null)
        {
             ApiResponse<V1beta1Ingress> localVarResponse = await ReadNamespacedIngressStatusAsyncWithHttpInfo(name, _namespace, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  read status of the specified Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1Ingress)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1Ingress>> ReadNamespacedIngressStatusAsyncWithHttpInfo (string name, string _namespace, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadNamespacedIngressStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReadNamespacedIngressStatus");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedIngressStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1Ingress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1Ingress) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1Ingress)));
        }

        /// <summary>
        ///  read the specified NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>V1beta1NetworkPolicy</returns>
        public V1beta1NetworkPolicy ReadNamespacedNetworkPolicy (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
             ApiResponse<V1beta1NetworkPolicy> localVarResponse = ReadNamespacedNetworkPolicyWithHttpInfo(name, _namespace, pretty, exact, export);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  read the specified NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>ApiResponse of V1beta1NetworkPolicy</returns>
        public ApiResponse< V1beta1NetworkPolicy > ReadNamespacedNetworkPolicyWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadNamespacedNetworkPolicy");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReadNamespacedNetworkPolicy");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (exact != null) localVarQueryParams.Add("exact", Configuration.ApiClient.ParameterToString(exact)); // query parameter
            if (export != null) localVarQueryParams.Add("export", Configuration.ApiClient.ParameterToString(export)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedNetworkPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1NetworkPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1NetworkPolicy) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1NetworkPolicy)));
        }

        /// <summary>
        ///  read the specified NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of V1beta1NetworkPolicy</returns>
        public async System.Threading.Tasks.Task<V1beta1NetworkPolicy> ReadNamespacedNetworkPolicyAsync (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
             ApiResponse<V1beta1NetworkPolicy> localVarResponse = await ReadNamespacedNetworkPolicyAsyncWithHttpInfo(name, _namespace, pretty, exact, export);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  read the specified NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1NetworkPolicy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1NetworkPolicy>> ReadNamespacedNetworkPolicyAsyncWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadNamespacedNetworkPolicy");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReadNamespacedNetworkPolicy");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (exact != null) localVarQueryParams.Add("exact", Configuration.ApiClient.ParameterToString(exact)); // query parameter
            if (export != null) localVarQueryParams.Add("export", Configuration.ApiClient.ParameterToString(export)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedNetworkPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1NetworkPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1NetworkPolicy) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1NetworkPolicy)));
        }

        /// <summary>
        ///  read the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>V1beta1ReplicaSet</returns>
        public V1beta1ReplicaSet ReadNamespacedReplicaSet (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
             ApiResponse<V1beta1ReplicaSet> localVarResponse = ReadNamespacedReplicaSetWithHttpInfo(name, _namespace, pretty, exact, export);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  read the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>ApiResponse of V1beta1ReplicaSet</returns>
        public ApiResponse< V1beta1ReplicaSet > ReadNamespacedReplicaSetWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadNamespacedReplicaSet");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReadNamespacedReplicaSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (exact != null) localVarQueryParams.Add("exact", Configuration.ApiClient.ParameterToString(exact)); // query parameter
            if (export != null) localVarQueryParams.Add("export", Configuration.ApiClient.ParameterToString(export)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedReplicaSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ReplicaSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ReplicaSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ReplicaSet)));
        }

        /// <summary>
        ///  read the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of V1beta1ReplicaSet</returns>
        public async System.Threading.Tasks.Task<V1beta1ReplicaSet> ReadNamespacedReplicaSetAsync (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
             ApiResponse<V1beta1ReplicaSet> localVarResponse = await ReadNamespacedReplicaSetAsyncWithHttpInfo(name, _namespace, pretty, exact, export);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  read the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ReplicaSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1ReplicaSet>> ReadNamespacedReplicaSetAsyncWithHttpInfo (string name, string _namespace, string pretty = null, bool? exact = null, bool? export = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadNamespacedReplicaSet");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReadNamespacedReplicaSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (exact != null) localVarQueryParams.Add("exact", Configuration.ApiClient.ParameterToString(exact)); // query parameter
            if (export != null) localVarQueryParams.Add("export", Configuration.ApiClient.ParameterToString(export)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedReplicaSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ReplicaSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ReplicaSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ReplicaSet)));
        }

        /// <summary>
        ///  read scale of the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Scale</returns>
        public ExtensionsV1beta1Scale ReadNamespacedReplicaSetScale (string name, string _namespace, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Scale> localVarResponse = ReadNamespacedReplicaSetScaleWithHttpInfo(name, _namespace, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  read scale of the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Scale</returns>
        public ApiResponse< ExtensionsV1beta1Scale > ReadNamespacedReplicaSetScaleWithHttpInfo (string name, string _namespace, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadNamespacedReplicaSetScale");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReadNamespacedReplicaSetScale");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedReplicaSetScale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Scale>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Scale) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Scale)));
        }

        /// <summary>
        ///  read scale of the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Scale</returns>
        public async System.Threading.Tasks.Task<ExtensionsV1beta1Scale> ReadNamespacedReplicaSetScaleAsync (string name, string _namespace, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Scale> localVarResponse = await ReadNamespacedReplicaSetScaleAsyncWithHttpInfo(name, _namespace, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  read scale of the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Scale)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Scale>> ReadNamespacedReplicaSetScaleAsyncWithHttpInfo (string name, string _namespace, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadNamespacedReplicaSetScale");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReadNamespacedReplicaSetScale");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedReplicaSetScale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Scale>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Scale) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Scale)));
        }

        /// <summary>
        ///  read status of the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1ReplicaSet</returns>
        public V1beta1ReplicaSet ReadNamespacedReplicaSetStatus (string name, string _namespace, string pretty = null)
        {
             ApiResponse<V1beta1ReplicaSet> localVarResponse = ReadNamespacedReplicaSetStatusWithHttpInfo(name, _namespace, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  read status of the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1ReplicaSet</returns>
        public ApiResponse< V1beta1ReplicaSet > ReadNamespacedReplicaSetStatusWithHttpInfo (string name, string _namespace, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadNamespacedReplicaSetStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReadNamespacedReplicaSetStatus");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedReplicaSetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ReplicaSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ReplicaSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ReplicaSet)));
        }

        /// <summary>
        ///  read status of the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1ReplicaSet</returns>
        public async System.Threading.Tasks.Task<V1beta1ReplicaSet> ReadNamespacedReplicaSetStatusAsync (string name, string _namespace, string pretty = null)
        {
             ApiResponse<V1beta1ReplicaSet> localVarResponse = await ReadNamespacedReplicaSetStatusAsyncWithHttpInfo(name, _namespace, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  read status of the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ReplicaSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1ReplicaSet>> ReadNamespacedReplicaSetStatusAsyncWithHttpInfo (string name, string _namespace, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadNamespacedReplicaSetStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReadNamespacedReplicaSetStatus");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedReplicaSetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ReplicaSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ReplicaSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ReplicaSet)));
        }

        /// <summary>
        ///  read scale of the specified ReplicationControllerDummy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Scale</returns>
        public ExtensionsV1beta1Scale ReadNamespacedReplicationControllerDummyScale (string name, string _namespace, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Scale> localVarResponse = ReadNamespacedReplicationControllerDummyScaleWithHttpInfo(name, _namespace, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  read scale of the specified ReplicationControllerDummy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Scale</returns>
        public ApiResponse< ExtensionsV1beta1Scale > ReadNamespacedReplicationControllerDummyScaleWithHttpInfo (string name, string _namespace, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadNamespacedReplicationControllerDummyScale");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReadNamespacedReplicationControllerDummyScale");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedReplicationControllerDummyScale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Scale>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Scale) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Scale)));
        }

        /// <summary>
        ///  read scale of the specified ReplicationControllerDummy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Scale</returns>
        public async System.Threading.Tasks.Task<ExtensionsV1beta1Scale> ReadNamespacedReplicationControllerDummyScaleAsync (string name, string _namespace, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Scale> localVarResponse = await ReadNamespacedReplicationControllerDummyScaleAsyncWithHttpInfo(name, _namespace, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  read scale of the specified ReplicationControllerDummy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Scale)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Scale>> ReadNamespacedReplicationControllerDummyScaleAsyncWithHttpInfo (string name, string _namespace, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadNamespacedReplicationControllerDummyScale");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReadNamespacedReplicationControllerDummyScale");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadNamespacedReplicationControllerDummyScale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Scale>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Scale) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Scale)));
        }

        /// <summary>
        ///  read the specified PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>V1beta1PodSecurityPolicy</returns>
        public V1beta1PodSecurityPolicy ReadPodSecurityPolicy (string name, string pretty = null, bool? exact = null, bool? export = null)
        {
             ApiResponse<V1beta1PodSecurityPolicy> localVarResponse = ReadPodSecurityPolicyWithHttpInfo(name, pretty, exact, export);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  read the specified PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>ApiResponse of V1beta1PodSecurityPolicy</returns>
        public ApiResponse< V1beta1PodSecurityPolicy > ReadPodSecurityPolicyWithHttpInfo (string name, string pretty = null, bool? exact = null, bool? export = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadPodSecurityPolicy");

            var localVarPath = "/apis/extensions/v1beta1/podsecuritypolicies/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (exact != null) localVarQueryParams.Add("exact", Configuration.ApiClient.ParameterToString(exact)); // query parameter
            if (export != null) localVarQueryParams.Add("export", Configuration.ApiClient.ParameterToString(export)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadPodSecurityPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1PodSecurityPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1PodSecurityPolicy) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1PodSecurityPolicy)));
        }

        /// <summary>
        ///  read the specified PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of V1beta1PodSecurityPolicy</returns>
        public async System.Threading.Tasks.Task<V1beta1PodSecurityPolicy> ReadPodSecurityPolicyAsync (string name, string pretty = null, bool? exact = null, bool? export = null)
        {
             ApiResponse<V1beta1PodSecurityPolicy> localVarResponse = await ReadPodSecurityPolicyAsyncWithHttpInfo(name, pretty, exact, export);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  read the specified PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1PodSecurityPolicy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1PodSecurityPolicy>> ReadPodSecurityPolicyAsyncWithHttpInfo (string name, string pretty = null, bool? exact = null, bool? export = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadPodSecurityPolicy");

            var localVarPath = "/apis/extensions/v1beta1/podsecuritypolicies/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (exact != null) localVarQueryParams.Add("exact", Configuration.ApiClient.ParameterToString(exact)); // query parameter
            if (export != null) localVarQueryParams.Add("export", Configuration.ApiClient.ParameterToString(export)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadPodSecurityPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1PodSecurityPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1PodSecurityPolicy) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1PodSecurityPolicy)));
        }

        /// <summary>
        ///  read the specified ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>V1beta1ThirdPartyResource</returns>
        public V1beta1ThirdPartyResource ReadThirdPartyResource (string name, string pretty = null, bool? exact = null, bool? export = null)
        {
             ApiResponse<V1beta1ThirdPartyResource> localVarResponse = ReadThirdPartyResourceWithHttpInfo(name, pretty, exact, export);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  read the specified ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>ApiResponse of V1beta1ThirdPartyResource</returns>
        public ApiResponse< V1beta1ThirdPartyResource > ReadThirdPartyResourceWithHttpInfo (string name, string pretty = null, bool? exact = null, bool? export = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadThirdPartyResource");

            var localVarPath = "/apis/extensions/v1beta1/thirdpartyresources/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (exact != null) localVarQueryParams.Add("exact", Configuration.ApiClient.ParameterToString(exact)); // query parameter
            if (export != null) localVarQueryParams.Add("export", Configuration.ApiClient.ParameterToString(export)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadThirdPartyResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ThirdPartyResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ThirdPartyResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ThirdPartyResource)));
        }

        /// <summary>
        ///  read the specified ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of V1beta1ThirdPartyResource</returns>
        public async System.Threading.Tasks.Task<V1beta1ThirdPartyResource> ReadThirdPartyResourceAsync (string name, string pretty = null, bool? exact = null, bool? export = null)
        {
             ApiResponse<V1beta1ThirdPartyResource> localVarResponse = await ReadThirdPartyResourceAsyncWithHttpInfo(name, pretty, exact, export);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  read the specified ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <param name="exact">Should the export be exact.  Exact export maintains cluster-specific fields like &#39;Namespace&#39;. (optional)</param>
        /// <param name="export">Should this value be exported.  Export strips fields that a user can not specify. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ThirdPartyResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1ThirdPartyResource>> ReadThirdPartyResourceAsyncWithHttpInfo (string name, string pretty = null, bool? exact = null, bool? export = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReadThirdPartyResource");

            var localVarPath = "/apis/extensions/v1beta1/thirdpartyresources/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (exact != null) localVarQueryParams.Add("exact", Configuration.ApiClient.ParameterToString(exact)); // query parameter
            if (export != null) localVarQueryParams.Add("export", Configuration.ApiClient.ParameterToString(export)); // query parameter

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReadThirdPartyResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ThirdPartyResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ThirdPartyResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ThirdPartyResource)));
        }

        /// <summary>
        ///  replace the specified DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1DaemonSet</returns>
        public V1beta1DaemonSet ReplaceNamespacedDaemonSet (string name, string _namespace, V1beta1DaemonSet body, string pretty = null)
        {
             ApiResponse<V1beta1DaemonSet> localVarResponse = ReplaceNamespacedDaemonSetWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  replace the specified DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1DaemonSet</returns>
        public ApiResponse< V1beta1DaemonSet > ReplaceNamespacedDaemonSetWithHttpInfo (string name, string _namespace, V1beta1DaemonSet body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplaceNamespacedDaemonSet");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReplaceNamespacedDaemonSet");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplaceNamespacedDaemonSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedDaemonSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1DaemonSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1DaemonSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1DaemonSet)));
        }

        /// <summary>
        ///  replace the specified DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1DaemonSet</returns>
        public async System.Threading.Tasks.Task<V1beta1DaemonSet> ReplaceNamespacedDaemonSetAsync (string name, string _namespace, V1beta1DaemonSet body, string pretty = null)
        {
             ApiResponse<V1beta1DaemonSet> localVarResponse = await ReplaceNamespacedDaemonSetAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  replace the specified DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1DaemonSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1DaemonSet>> ReplaceNamespacedDaemonSetAsyncWithHttpInfo (string name, string _namespace, V1beta1DaemonSet body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplaceNamespacedDaemonSet");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReplaceNamespacedDaemonSet");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplaceNamespacedDaemonSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedDaemonSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1DaemonSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1DaemonSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1DaemonSet)));
        }

        /// <summary>
        ///  replace status of the specified DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1DaemonSet</returns>
        public V1beta1DaemonSet ReplaceNamespacedDaemonSetStatus (string name, string _namespace, V1beta1DaemonSet body, string pretty = null)
        {
             ApiResponse<V1beta1DaemonSet> localVarResponse = ReplaceNamespacedDaemonSetStatusWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  replace status of the specified DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1DaemonSet</returns>
        public ApiResponse< V1beta1DaemonSet > ReplaceNamespacedDaemonSetStatusWithHttpInfo (string name, string _namespace, V1beta1DaemonSet body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplaceNamespacedDaemonSetStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReplaceNamespacedDaemonSetStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplaceNamespacedDaemonSetStatus");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedDaemonSetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1DaemonSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1DaemonSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1DaemonSet)));
        }

        /// <summary>
        ///  replace status of the specified DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1DaemonSet</returns>
        public async System.Threading.Tasks.Task<V1beta1DaemonSet> ReplaceNamespacedDaemonSetStatusAsync (string name, string _namespace, V1beta1DaemonSet body, string pretty = null)
        {
             ApiResponse<V1beta1DaemonSet> localVarResponse = await ReplaceNamespacedDaemonSetStatusAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  replace status of the specified DaemonSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the DaemonSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1DaemonSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1DaemonSet>> ReplaceNamespacedDaemonSetStatusAsyncWithHttpInfo (string name, string _namespace, V1beta1DaemonSet body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplaceNamespacedDaemonSetStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReplaceNamespacedDaemonSetStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplaceNamespacedDaemonSetStatus");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/daemonsets/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedDaemonSetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1DaemonSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1DaemonSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1DaemonSet)));
        }

        /// <summary>
        ///  replace the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Deployment</returns>
        public ExtensionsV1beta1Deployment ReplaceNamespacedDeployment (string name, string _namespace, ExtensionsV1beta1Deployment body, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Deployment> localVarResponse = ReplaceNamespacedDeploymentWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  replace the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Deployment</returns>
        public ApiResponse< ExtensionsV1beta1Deployment > ReplaceNamespacedDeploymentWithHttpInfo (string name, string _namespace, ExtensionsV1beta1Deployment body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplaceNamespacedDeployment");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReplaceNamespacedDeployment");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplaceNamespacedDeployment");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Deployment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Deployment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Deployment)));
        }

        /// <summary>
        ///  replace the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Deployment</returns>
        public async System.Threading.Tasks.Task<ExtensionsV1beta1Deployment> ReplaceNamespacedDeploymentAsync (string name, string _namespace, ExtensionsV1beta1Deployment body, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Deployment> localVarResponse = await ReplaceNamespacedDeploymentAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  replace the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Deployment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Deployment>> ReplaceNamespacedDeploymentAsyncWithHttpInfo (string name, string _namespace, ExtensionsV1beta1Deployment body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplaceNamespacedDeployment");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReplaceNamespacedDeployment");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplaceNamespacedDeployment");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedDeployment", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Deployment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Deployment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Deployment)));
        }

        /// <summary>
        ///  replace scale of the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Scale</returns>
        public ExtensionsV1beta1Scale ReplaceNamespacedDeploymentScale (string name, string _namespace, ExtensionsV1beta1Scale body, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Scale> localVarResponse = ReplaceNamespacedDeploymentScaleWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  replace scale of the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Scale</returns>
        public ApiResponse< ExtensionsV1beta1Scale > ReplaceNamespacedDeploymentScaleWithHttpInfo (string name, string _namespace, ExtensionsV1beta1Scale body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplaceNamespacedDeploymentScale");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReplaceNamespacedDeploymentScale");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplaceNamespacedDeploymentScale");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedDeploymentScale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Scale>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Scale) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Scale)));
        }

        /// <summary>
        ///  replace scale of the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Scale</returns>
        public async System.Threading.Tasks.Task<ExtensionsV1beta1Scale> ReplaceNamespacedDeploymentScaleAsync (string name, string _namespace, ExtensionsV1beta1Scale body, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Scale> localVarResponse = await ReplaceNamespacedDeploymentScaleAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  replace scale of the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Scale)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Scale>> ReplaceNamespacedDeploymentScaleAsyncWithHttpInfo (string name, string _namespace, ExtensionsV1beta1Scale body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplaceNamespacedDeploymentScale");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReplaceNamespacedDeploymentScale");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplaceNamespacedDeploymentScale");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/scale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedDeploymentScale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Scale>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Scale) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Scale)));
        }

        /// <summary>
        ///  replace status of the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Deployment</returns>
        public ExtensionsV1beta1Deployment ReplaceNamespacedDeploymentStatus (string name, string _namespace, ExtensionsV1beta1Deployment body, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Deployment> localVarResponse = ReplaceNamespacedDeploymentStatusWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  replace status of the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Deployment</returns>
        public ApiResponse< ExtensionsV1beta1Deployment > ReplaceNamespacedDeploymentStatusWithHttpInfo (string name, string _namespace, ExtensionsV1beta1Deployment body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplaceNamespacedDeploymentStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReplaceNamespacedDeploymentStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplaceNamespacedDeploymentStatus");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedDeploymentStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Deployment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Deployment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Deployment)));
        }

        /// <summary>
        ///  replace status of the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Deployment</returns>
        public async System.Threading.Tasks.Task<ExtensionsV1beta1Deployment> ReplaceNamespacedDeploymentStatusAsync (string name, string _namespace, ExtensionsV1beta1Deployment body, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Deployment> localVarResponse = await ReplaceNamespacedDeploymentStatusAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  replace status of the specified Deployment
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Deployment</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Deployment)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Deployment>> ReplaceNamespacedDeploymentStatusAsyncWithHttpInfo (string name, string _namespace, ExtensionsV1beta1Deployment body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplaceNamespacedDeploymentStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReplaceNamespacedDeploymentStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplaceNamespacedDeploymentStatus");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/deployments/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedDeploymentStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Deployment>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Deployment) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Deployment)));
        }

        /// <summary>
        ///  replace the specified Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1Ingress</returns>
        public V1beta1Ingress ReplaceNamespacedIngress (string name, string _namespace, V1beta1Ingress body, string pretty = null)
        {
             ApiResponse<V1beta1Ingress> localVarResponse = ReplaceNamespacedIngressWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  replace the specified Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1Ingress</returns>
        public ApiResponse< V1beta1Ingress > ReplaceNamespacedIngressWithHttpInfo (string name, string _namespace, V1beta1Ingress body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplaceNamespacedIngress");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReplaceNamespacedIngress");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplaceNamespacedIngress");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedIngress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1Ingress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1Ingress) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1Ingress)));
        }

        /// <summary>
        ///  replace the specified Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1Ingress</returns>
        public async System.Threading.Tasks.Task<V1beta1Ingress> ReplaceNamespacedIngressAsync (string name, string _namespace, V1beta1Ingress body, string pretty = null)
        {
             ApiResponse<V1beta1Ingress> localVarResponse = await ReplaceNamespacedIngressAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  replace the specified Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1Ingress)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1Ingress>> ReplaceNamespacedIngressAsyncWithHttpInfo (string name, string _namespace, V1beta1Ingress body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplaceNamespacedIngress");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReplaceNamespacedIngress");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplaceNamespacedIngress");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedIngress", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1Ingress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1Ingress) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1Ingress)));
        }

        /// <summary>
        ///  replace status of the specified Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1Ingress</returns>
        public V1beta1Ingress ReplaceNamespacedIngressStatus (string name, string _namespace, V1beta1Ingress body, string pretty = null)
        {
             ApiResponse<V1beta1Ingress> localVarResponse = ReplaceNamespacedIngressStatusWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  replace status of the specified Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1Ingress</returns>
        public ApiResponse< V1beta1Ingress > ReplaceNamespacedIngressStatusWithHttpInfo (string name, string _namespace, V1beta1Ingress body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplaceNamespacedIngressStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReplaceNamespacedIngressStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplaceNamespacedIngressStatus");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedIngressStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1Ingress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1Ingress) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1Ingress)));
        }

        /// <summary>
        ///  replace status of the specified Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1Ingress</returns>
        public async System.Threading.Tasks.Task<V1beta1Ingress> ReplaceNamespacedIngressStatusAsync (string name, string _namespace, V1beta1Ingress body, string pretty = null)
        {
             ApiResponse<V1beta1Ingress> localVarResponse = await ReplaceNamespacedIngressStatusAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  replace status of the specified Ingress
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Ingress</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1Ingress)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1Ingress>> ReplaceNamespacedIngressStatusAsyncWithHttpInfo (string name, string _namespace, V1beta1Ingress body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplaceNamespacedIngressStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReplaceNamespacedIngressStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplaceNamespacedIngressStatus");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedIngressStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1Ingress>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1Ingress) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1Ingress)));
        }

        /// <summary>
        ///  replace the specified NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1NetworkPolicy</returns>
        public V1beta1NetworkPolicy ReplaceNamespacedNetworkPolicy (string name, string _namespace, V1beta1NetworkPolicy body, string pretty = null)
        {
             ApiResponse<V1beta1NetworkPolicy> localVarResponse = ReplaceNamespacedNetworkPolicyWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  replace the specified NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1NetworkPolicy</returns>
        public ApiResponse< V1beta1NetworkPolicy > ReplaceNamespacedNetworkPolicyWithHttpInfo (string name, string _namespace, V1beta1NetworkPolicy body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplaceNamespacedNetworkPolicy");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReplaceNamespacedNetworkPolicy");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplaceNamespacedNetworkPolicy");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedNetworkPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1NetworkPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1NetworkPolicy) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1NetworkPolicy)));
        }

        /// <summary>
        ///  replace the specified NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1NetworkPolicy</returns>
        public async System.Threading.Tasks.Task<V1beta1NetworkPolicy> ReplaceNamespacedNetworkPolicyAsync (string name, string _namespace, V1beta1NetworkPolicy body, string pretty = null)
        {
             ApiResponse<V1beta1NetworkPolicy> localVarResponse = await ReplaceNamespacedNetworkPolicyAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  replace the specified NetworkPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the NetworkPolicy</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1NetworkPolicy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1NetworkPolicy>> ReplaceNamespacedNetworkPolicyAsyncWithHttpInfo (string name, string _namespace, V1beta1NetworkPolicy body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplaceNamespacedNetworkPolicy");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReplaceNamespacedNetworkPolicy");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplaceNamespacedNetworkPolicy");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/networkpolicies/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedNetworkPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1NetworkPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1NetworkPolicy) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1NetworkPolicy)));
        }

        /// <summary>
        ///  replace the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1ReplicaSet</returns>
        public V1beta1ReplicaSet ReplaceNamespacedReplicaSet (string name, string _namespace, V1beta1ReplicaSet body, string pretty = null)
        {
             ApiResponse<V1beta1ReplicaSet> localVarResponse = ReplaceNamespacedReplicaSetWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  replace the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1ReplicaSet</returns>
        public ApiResponse< V1beta1ReplicaSet > ReplaceNamespacedReplicaSetWithHttpInfo (string name, string _namespace, V1beta1ReplicaSet body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplaceNamespacedReplicaSet");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReplaceNamespacedReplicaSet");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplaceNamespacedReplicaSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedReplicaSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ReplicaSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ReplicaSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ReplicaSet)));
        }

        /// <summary>
        ///  replace the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1ReplicaSet</returns>
        public async System.Threading.Tasks.Task<V1beta1ReplicaSet> ReplaceNamespacedReplicaSetAsync (string name, string _namespace, V1beta1ReplicaSet body, string pretty = null)
        {
             ApiResponse<V1beta1ReplicaSet> localVarResponse = await ReplaceNamespacedReplicaSetAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  replace the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ReplicaSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1ReplicaSet>> ReplaceNamespacedReplicaSetAsyncWithHttpInfo (string name, string _namespace, V1beta1ReplicaSet body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplaceNamespacedReplicaSet");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReplaceNamespacedReplicaSet");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplaceNamespacedReplicaSet");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedReplicaSet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ReplicaSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ReplicaSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ReplicaSet)));
        }

        /// <summary>
        ///  replace scale of the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Scale</returns>
        public ExtensionsV1beta1Scale ReplaceNamespacedReplicaSetScale (string name, string _namespace, ExtensionsV1beta1Scale body, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Scale> localVarResponse = ReplaceNamespacedReplicaSetScaleWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  replace scale of the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Scale</returns>
        public ApiResponse< ExtensionsV1beta1Scale > ReplaceNamespacedReplicaSetScaleWithHttpInfo (string name, string _namespace, ExtensionsV1beta1Scale body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplaceNamespacedReplicaSetScale");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReplaceNamespacedReplicaSetScale");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplaceNamespacedReplicaSetScale");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedReplicaSetScale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Scale>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Scale) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Scale)));
        }

        /// <summary>
        ///  replace scale of the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Scale</returns>
        public async System.Threading.Tasks.Task<ExtensionsV1beta1Scale> ReplaceNamespacedReplicaSetScaleAsync (string name, string _namespace, ExtensionsV1beta1Scale body, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Scale> localVarResponse = await ReplaceNamespacedReplicaSetScaleAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  replace scale of the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Scale)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Scale>> ReplaceNamespacedReplicaSetScaleAsyncWithHttpInfo (string name, string _namespace, ExtensionsV1beta1Scale body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplaceNamespacedReplicaSetScale");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReplaceNamespacedReplicaSetScale");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplaceNamespacedReplicaSetScale");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/scale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedReplicaSetScale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Scale>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Scale) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Scale)));
        }

        /// <summary>
        ///  replace status of the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1ReplicaSet</returns>
        public V1beta1ReplicaSet ReplaceNamespacedReplicaSetStatus (string name, string _namespace, V1beta1ReplicaSet body, string pretty = null)
        {
             ApiResponse<V1beta1ReplicaSet> localVarResponse = ReplaceNamespacedReplicaSetStatusWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  replace status of the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1ReplicaSet</returns>
        public ApiResponse< V1beta1ReplicaSet > ReplaceNamespacedReplicaSetStatusWithHttpInfo (string name, string _namespace, V1beta1ReplicaSet body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplaceNamespacedReplicaSetStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReplaceNamespacedReplicaSetStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplaceNamespacedReplicaSetStatus");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedReplicaSetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ReplicaSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ReplicaSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ReplicaSet)));
        }

        /// <summary>
        ///  replace status of the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1ReplicaSet</returns>
        public async System.Threading.Tasks.Task<V1beta1ReplicaSet> ReplaceNamespacedReplicaSetStatusAsync (string name, string _namespace, V1beta1ReplicaSet body, string pretty = null)
        {
             ApiResponse<V1beta1ReplicaSet> localVarResponse = await ReplaceNamespacedReplicaSetStatusAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  replace status of the specified ReplicaSet
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ReplicaSet</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ReplicaSet)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1ReplicaSet>> ReplaceNamespacedReplicaSetStatusAsyncWithHttpInfo (string name, string _namespace, V1beta1ReplicaSet body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplaceNamespacedReplicaSetStatus");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReplaceNamespacedReplicaSetStatus");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplaceNamespacedReplicaSetStatus");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicasets/{name}/status";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedReplicaSetStatus", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ReplicaSet>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ReplicaSet) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ReplicaSet)));
        }

        /// <summary>
        ///  replace scale of the specified ReplicationControllerDummy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ExtensionsV1beta1Scale</returns>
        public ExtensionsV1beta1Scale ReplaceNamespacedReplicationControllerDummyScale (string name, string _namespace, ExtensionsV1beta1Scale body, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Scale> localVarResponse = ReplaceNamespacedReplicationControllerDummyScaleWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  replace scale of the specified ReplicationControllerDummy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of ExtensionsV1beta1Scale</returns>
        public ApiResponse< ExtensionsV1beta1Scale > ReplaceNamespacedReplicationControllerDummyScaleWithHttpInfo (string name, string _namespace, ExtensionsV1beta1Scale body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplaceNamespacedReplicationControllerDummyScale");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReplaceNamespacedReplicationControllerDummyScale");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplaceNamespacedReplicationControllerDummyScale");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedReplicationControllerDummyScale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Scale>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Scale) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Scale)));
        }

        /// <summary>
        ///  replace scale of the specified ReplicationControllerDummy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ExtensionsV1beta1Scale</returns>
        public async System.Threading.Tasks.Task<ExtensionsV1beta1Scale> ReplaceNamespacedReplicationControllerDummyScaleAsync (string name, string _namespace, ExtensionsV1beta1Scale body, string pretty = null)
        {
             ApiResponse<ExtensionsV1beta1Scale> localVarResponse = await ReplaceNamespacedReplicationControllerDummyScaleAsyncWithHttpInfo(name, _namespace, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  replace scale of the specified ReplicationControllerDummy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the Scale</param>
        /// <param name="_namespace">object name and auth scope, such as for teams and projects</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (ExtensionsV1beta1Scale)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<ExtensionsV1beta1Scale>> ReplaceNamespacedReplicationControllerDummyScaleAsyncWithHttpInfo (string name, string _namespace, ExtensionsV1beta1Scale body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplaceNamespacedReplicationControllerDummyScale");
            // verify the required parameter '_namespace' is set
            if (_namespace == null)
                throw new ApiException(400, "Missing required parameter '_namespace' when calling Extensions_v1beta1Api->ReplaceNamespacedReplicationControllerDummyScale");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplaceNamespacedReplicationControllerDummyScale");

            var localVarPath = "/apis/extensions/v1beta1/namespaces/{namespace}/replicationcontrollers/{name}/scale";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (_namespace != null) localVarPathParams.Add("namespace", Configuration.ApiClient.ParameterToString(_namespace)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceNamespacedReplicationControllerDummyScale", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<ExtensionsV1beta1Scale>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (ExtensionsV1beta1Scale) Configuration.ApiClient.Deserialize(localVarResponse, typeof(ExtensionsV1beta1Scale)));
        }

        /// <summary>
        ///  replace the specified PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1PodSecurityPolicy</returns>
        public V1beta1PodSecurityPolicy ReplacePodSecurityPolicy (string name, V1beta1PodSecurityPolicy body, string pretty = null)
        {
             ApiResponse<V1beta1PodSecurityPolicy> localVarResponse = ReplacePodSecurityPolicyWithHttpInfo(name, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  replace the specified PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1PodSecurityPolicy</returns>
        public ApiResponse< V1beta1PodSecurityPolicy > ReplacePodSecurityPolicyWithHttpInfo (string name, V1beta1PodSecurityPolicy body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplacePodSecurityPolicy");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplacePodSecurityPolicy");

            var localVarPath = "/apis/extensions/v1beta1/podsecuritypolicies/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplacePodSecurityPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1PodSecurityPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1PodSecurityPolicy) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1PodSecurityPolicy)));
        }

        /// <summary>
        ///  replace the specified PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1PodSecurityPolicy</returns>
        public async System.Threading.Tasks.Task<V1beta1PodSecurityPolicy> ReplacePodSecurityPolicyAsync (string name, V1beta1PodSecurityPolicy body, string pretty = null)
        {
             ApiResponse<V1beta1PodSecurityPolicy> localVarResponse = await ReplacePodSecurityPolicyAsyncWithHttpInfo(name, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  replace the specified PodSecurityPolicy
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the PodSecurityPolicy</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1PodSecurityPolicy)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1PodSecurityPolicy>> ReplacePodSecurityPolicyAsyncWithHttpInfo (string name, V1beta1PodSecurityPolicy body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplacePodSecurityPolicy");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplacePodSecurityPolicy");

            var localVarPath = "/apis/extensions/v1beta1/podsecuritypolicies/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplacePodSecurityPolicy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1PodSecurityPolicy>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1PodSecurityPolicy) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1PodSecurityPolicy)));
        }

        /// <summary>
        ///  replace the specified ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>V1beta1ThirdPartyResource</returns>
        public V1beta1ThirdPartyResource ReplaceThirdPartyResource (string name, V1beta1ThirdPartyResource body, string pretty = null)
        {
             ApiResponse<V1beta1ThirdPartyResource> localVarResponse = ReplaceThirdPartyResourceWithHttpInfo(name, body, pretty);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  replace the specified ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>ApiResponse of V1beta1ThirdPartyResource</returns>
        public ApiResponse< V1beta1ThirdPartyResource > ReplaceThirdPartyResourceWithHttpInfo (string name, V1beta1ThirdPartyResource body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplaceThirdPartyResource");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplaceThirdPartyResource");

            var localVarPath = "/apis/extensions/v1beta1/thirdpartyresources/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceThirdPartyResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ThirdPartyResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ThirdPartyResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ThirdPartyResource)));
        }

        /// <summary>
        ///  replace the specified ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of V1beta1ThirdPartyResource</returns>
        public async System.Threading.Tasks.Task<V1beta1ThirdPartyResource> ReplaceThirdPartyResourceAsync (string name, V1beta1ThirdPartyResource body, string pretty = null)
        {
             ApiResponse<V1beta1ThirdPartyResource> localVarResponse = await ReplaceThirdPartyResourceAsyncWithHttpInfo(name, body, pretty);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  replace the specified ThirdPartyResource
        /// </summary>
        /// <exception cref="Kubernetes.DotNet.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">name of the ThirdPartyResource</param>
        /// <param name="body"></param>
        /// <param name="pretty">If &#39;true&#39;, then the output is pretty printed. (optional)</param>
        /// <returns>Task of ApiResponse (V1beta1ThirdPartyResource)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<V1beta1ThirdPartyResource>> ReplaceThirdPartyResourceAsyncWithHttpInfo (string name, V1beta1ThirdPartyResource body, string pretty = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling Extensions_v1beta1Api->ReplaceThirdPartyResource");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling Extensions_v1beta1Api->ReplaceThirdPartyResource");

            var localVarPath = "/apis/extensions/v1beta1/thirdpartyresources/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "*/*"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "application/yaml",
                "application/vnd.kubernetes.protobuf"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (pretty != null) localVarQueryParams.Add("pretty", Configuration.ApiClient.ParameterToString(pretty)); // query parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (BearerToken) required
            if (!String.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("authorization")))
            {
                localVarHeaderParams["authorization"] = Configuration.GetApiKeyWithPrefix("authorization");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ReplaceThirdPartyResource", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<V1beta1ThirdPartyResource>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (V1beta1ThirdPartyResource) Configuration.ApiClient.Deserialize(localVarResponse, typeof(V1beta1ThirdPartyResource)));
        }

    }
}
